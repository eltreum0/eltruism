local E, _, _, P = unpack(ElvUI)
local L = E.Libs.ACL:GetLocale('ElvUI', E.global.general.locale)
local _G = _G
local tinsert = _G.table.insert
local tconcat = _G.table.concat
local unpack = _G.unpack
local sort = _G.sort
local pairs = _G.pairs
local format = _G.format
local MINIMAP_LABEL = _G.MINIMAP_LABEL
local AURAS = _G.AURAS
local BINDING_HEADER_CHAT = _G.BINDING_HEADER_CHAT
local HONOR = _G.HONOR
local CURRENCY = _G.CURRENCY
local tostring = _G.tostring
local PlaySoundFile = _G.PlaySoundFile
local tonumber = _G.tonumber
local GetCVar = _G.C_CVar and _G.C_CVar.GetCVar or _G.GetCVar
local SetCVar = _G.C_CVar and _G.C_CVar.SetCVar or _G.SetCVar
local OKAY = _G.OKAY
local Item = _G.Item
local tremove = _G.tremove
local IsAddOnLoaded = _G.C_AddOns and _G.C_AddOns.IsAddOnLoaded or _G.IsAddOnLoaded
local IsUsableItem = _G.C_Item and _G.C_Item.IsUsableItem or _G.IsUsableItem
local GetItemInfo = _G.C_Item and _G.C_Item.GetItemInfo or _G.GetItemInfo
local GetItemCount = _G.C_Item and _G.C_Item.GetItemCount or _G.GetItemCount
local GetSpellInfo = _G.C_Spell and _G.C_Spell.GetSpellInfo or _G.GetSpellInfo
--[[local math = _G.math
local string = _G.string
local CHAT_LABEL = _G.CHAT_LABEL
local TARGET = _G.TARGET
local POWER_TYPE_FOCUS = _G.POWER_TYPE_FOCUS
local PARTY = _G.PARTY
local RAID = _G.RAID
local ALL = _G.ALL
local PREVIEW = _G.PREVIEW
local RESAMPLE_QUALITY_FSR = _G.RESAMPLE_QUALITY_FSR
local QUESTS_LABEL = _G.QUESTS_LABEL
local LOOT = _G.LOOT
local SKILL = _G.SKILL
local ITEM_QUALITY0_DESC = _G.ITEM_QUALITY0_DESC
local ITEM_QUALITY1_DESC = _G.ITEM_QUALITY1_DESC
local ITEM_QUALITY2_DESC = _G.ITEM_QUALITY2_DESC
local ITEM_QUALITY3_DESC = _G.ITEM_QUALITY3_DESC
local ITEM_QUALITY4_DESC = _G.ITEM_QUALITY4_DESC
local REMOVE = _G.REMOVE
local SOUND = _G.SOUND
local CUSTOM = _G.CUSTOM
local VOLUME = _G.VOLUME
local ENTERING_COMBAT = _G.ENTERING_COMBAT
local LEAVING_COMBAT = _G.LEAVING_COMBAT
local CLASS = _G.CLASS
local COMBAT_LOG = _G.COMBAT_LOG
local MANA = _G.MANA
local RAGE = _G.RAGE
local ENERGY = _G.ENERGY
local POWER_TYPE_LUNAR_POWER = _G.POWER_TYPE_LUNAR_POWER
local ALTERNATE_RESOURCE_TEXT = _G.ALTERNATE_RESOURCE_TEXT
local POWER_TYPE_MAELSTROM = _G.POWER_TYPE_MAELSTROM
local INSANITY_POWER = _G.INSANITY_POWER
local POWER_TYPE_FURY = _G.POWER_TYPE_FURY
local EXHAUSTION_LABEL = _G.EXHAUSTION_LABEL
local RACE = _G.RACE
local BREATH_LABEL = _G.BREATH_LABEL
local GAMEMENU_SUPPORT = _G.GAMEMENU_SUPPORT
local ChatFrame_RemoveChannel = _G.ChatFrame_RemoveChannel
local FCF_OpenNewWindow = _G.FCF_OpenNewWindow
local ChatFrame_RemoveAllMessageGroups = _G.ChatFrame_RemoveAllMessageGroups
local FCF_SetWindowName = _G.FCF_SetWindowName
local ChatFrame_AddChannel = _G.ChatFrame_AddChannel
local FCFTab_UpdateColors = _G.FCFTab_UpdateColors
local FCFDock_SelectWindow = _G.FCFDock_SelectWindow
local C_VoiceChat = _G.C_VoiceChat
local TEXT_TO_SPEECH = _G.TEXT_TO_SPEECH
local Enum = _G.Enum
local ObjectiveTrackerFrame = _G.ObjectiveTrackerFrame
local IsSpellKnown = _G.IsSpellKnown
local PlayerHasToy = _G.PlayerHasToy
local C_ToyBox = _G.C_ToyBox
local RUNIC_POWER = _G.RUNIC_POWER
local PaperDollFrame_SetLevel = _G.PaperDollFrame_SetLevel
local PaperDollFrame_UpdateStats = _G.PaperDollFrame_UpdateStats
local next = _G.next
]]

local RUNIC_POWER = _G.RUNIC_POWER or "Runic Power"
local EDIT_MODE_LAYOUT_HYPERLINK_TEXT = _G.EDIT_MODE_LAYOUT_HYPERLINK_TEXT or ""
local STAGGER = _G.STAGGER or ""
local TUTORIAL_TITLE61_ROGUE = _G.TUTORIAL_TITLE61_ROGUE or ""
local LOW_LATENCY_MODE = _G.LOW_LATENCY_MODE or "Low Latency Mode"
local OPTION_TOOLTIP_LOW_LATENCY_MODE = _G.OPTION_TOOLTIP_LOW_LATENCY_MODE or "Allows the game to use various techniques to reduce input latency"
local VIDEO_OPTIONS_DISABLED = _G.VIDEO_OPTIONS_DISABLED or "Disabled"
local VIDEO_OPTIONS_BUILTIN = _G.VIDEO_OPTIONS_BUILTIN or "Built-in"
local VIDEO_OPTIONS_NVIDIA_REFLEX = _G.VIDEO_OPTIONS_NVIDIA_REFLEX or "NVIDIA Reflex"
local SHOW_IN_GAME_NAVIGATION = _G.SHOW_IN_GAME_NAVIGATION or " "
local DELVE_LABEL = _G.DELVE_LABEL or ""
local QUESTS_LABEL = _G.QUESTS_LABEL or ""

--Author list
local AUTHORS = {
	E:TextGradient("Eltreum", 0.50, 0.70, 1, 0.67, 0.95, 1),
}

-- Credits and Thank yous list
local THANKYOU = {
	'|cff0070DEAzilroka|r',
	'|cffC41F3BKringel|r',
	'|cFF99CCFFAftermathh|r',
	'|cffF58CBARepooc|r Especially for the huge helps',
	'Blazeflack',
	'Botanica',
	'|cffFFC44DHydra|r',
	'|T134297:15:15:0:0:64:64:5:59:5:59|t |cffff7d0aMerathilis|r',
	'|cff9482c9Darth Predator|r',
	'Caedis',
	'Elv',
	E:TextGradient('Simpy, his name might be shorter sometimes even though he fixes a lot of things', 0.27,0.72,0.86, 0.51,0.36,0.80, 0.69,0.28,0.94, 0.94,0.28,0.63, 1.00,0.51,0.00, 0.27,0.96,0.43),
	--E:TextGradient('Simpy he fixes a lot of things but he cant see power colors right', 0.27,0.72,0.86, 0.51,0.36,0.80, 0.69,0.28,0.94, 0.94,0.28,0.63, 1.00,0.51,0.00, 0.27,0.96,0.43),
	'Shrom',
	'Pat',
	'|cff00c0faBenik|r',
	'|T136012:15:15:0:0:64:64:5:59:5:59|t |cff006fdcRubgrsch|r',
	'|TInterface/AddOns/ElvUI/Core/Media/ChatLogos/Clover:15:15:0:0:64:64:5:59:5:59|t |cffFF7D0ALuckyone|r Especially for allowing the usage of his installer/plugin as a model',
	'|TInterface/AddOns/ElvUI_EltreumUI/Media/Textures/releaf:15:15:0:0:64:64:5:59:5:59|t |cffFF7D0AReleaf|r for the alternate class icons',
	'|TInterface/AddOns/ElvUI_EltreumUI/Media/Textures/tukuidiscord:15:15:0:0:64:64:5:59:5:59|t Tukui Community for all the help and motivation',
	'|TInterface/AddOns/ElvUI_EltreumUI/Media/Textures/addonsdiscord:15:15:0:0:64:64:5:59:5:59|t WoW AddOns; for answering a lot of questions',
	'AcidWeb |TInterface/AddOns/ElvUI/Core/Media/ChatLogos/Gem:15:15:-1:2:64:64:6:60:8:60|t',
	'|cff8E44ADB|r|cff2ECC71lin|r|cff3498DBkii|r',
	'|cff960000Atwood|r - for some of the role icons',
	'|cffB50909Dlarge|r - for the German localization',
	'|cff33937FFang2hou|r - for the compatibility function',
	E:TextGradient("Meowcactus", 1, 0.49, 0.04, 1, 0.96, 0.41),
}

local DONATORS = {
	'Akiao',
	'Artan',
	'BralumConquest',
	'Brovenn',
	'Daxxarri',
	'Dlarge',
	'Dreamador',
	'Dreandor',
	'Gently Caress the Constabulary',
	'Greevir',
	'Jazz',
	'Jiberish',
	'Madlampy',
	'Markpoops',
	'Michael_',
	'Morthart',
	'Mr.Ditto',
	'Nekator',
	'Nyhilatiant',
	'Oakshlam',
	'Smuve',
	'Trenchy',
	'Vxt',
	'BioVenom',
	'bansheeirl',
	'Ante',
	'Spectated',
	'Volo',
	'seba4287',
	'orangepaw3',
	'Jaraxal',
	'BlazeFury',
	'Marynia',
	'Garrgamell',
	'dartworth',
	'Rocket Surgery',
	'Embee',
	'mercenariosgx',
	'Deathclaw',
	'AegisX',
	'windseeker',
	'crusty',
	'clozure',
	'Aphadon',
	'shifty'
}

local TRANSLATORS = {
	'|cffCC3333Khornan|r - German Translation',
	'|cffCC3333Dlarge|r - German Translation',
	'|cffCC3333Neo|r - Simplified Chinese Translation',
	'DeepL artificial intelligence for French and Spanish translations',
	'|cffCC3333魔能機曱 (Johnson)|r - Traditional Chinese translation',
	'|cffCC3333Meowcactus|r - Simplified Chinese Translation',
}

-- SortList
local function SortList(a, b)
	local aUpper = a:gsub("^%l", string.upper)
	local bUpper = b:gsub("^%l", string.upper)
	if E:StripString(aUpper) < E:StripString(bUpper) then
		return true
	else
		return false
	end
end

sort(AUTHORS, SortList)
sort(THANKYOU, SortList)
sort(DONATORS, SortList)
sort(TRANSLATORS, SortList)

-- Author table
local AUTHORS_STRING = tconcat(AUTHORS, '|n')

-- Thank you table
local THANKYOU_STRING = tconcat(THANKYOU, '|n')

-- Donators table
local donator1,donator2 = {},{}
local donatordivisor = math.floor(#DONATORS/2)
for i, name in pairs(DONATORS) do
	local namecolor = "|cffB50909"..name.."|r"
	if i <= donatordivisor then
		tinsert(donator1, namecolor)
	elseif i >= donatordivisor then
		tinsert(donator2, namecolor)
	end
end
local DONATORS_STRING1 = tconcat(donator1, '|n')
local DONATORS_STRING2 = tconcat(donator2, '|n')

-- Translators table
local TRANSLATORS_STRING = tconcat(TRANSLATORS, '|n')

local FrameStrataLevels = { BACKGROUND = 'BACKGROUND', LOW = 'LOW', MEDIUM = 'MEDIUM', HIGH = 'HIGH', DIALOG = 'DIALOG', TOOLTIP = 'TOOLTIP' }
local FrameLevels = { min = 1, max = 256, step = 0.1 }
local BorderOffsetSize = { min = 1, max = 3000, step = 0.1 }

local PortraitStyles = {
	["RELEAF"] = "Releaf",
	["OUTLINE"] = L["Outline"],
	["BLIZZARD"] = L["Blizzard"],
	["BORDER"] = L["Border"],
	["SHADOW"] = L["Shadow"],
	["ORIGINAL"] = L["Original"],
	["GRADIENT"] = L["Gradient"],
	["SYMBOLS"] = L["Symbols"],
	["UGG"] = L["U.GG"],
	["UGGGREY"] = L["U.GG Grey"],
}

-- Eltruism ingame options
function ElvUI_EltreumUI:Configtable()
	-- Add Eltruism version on top of the ElvUI config
	E.Options.name = E.Options.name .. " + " .. ElvUI_EltreumUI.Name .. format(" |cffffffff%s|r", ElvUI_EltreumUI.Version)
	local ACH = E.Libs.ACH

	ElvUI_EltreumUI.Options = ACH:Group("|TInterface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\tinylogo.tga:14:14:0:0|t" .. ElvUI_EltreumUI.Name, nil, 6)
	ElvUI_EltreumUI.Options.args.logo = ACH:Description(nil, 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\logohq', nil, 320, 80)

	-- installer
	ElvUI_EltreumUI.Options.args.installer = ACH:Group(E:TextGradient(L["Installer"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Install, Reinstall or Update various parts of Eltruism"], 2, 'tab')
	ElvUI_EltreumUI.Options.args.installer.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\install'
	ElvUI_EltreumUI.Options.args.installer.args.tab1 = ACH:Group(L["Eltruism Installer"], nil, 1)
	ElvUI_EltreumUI.Options.args.installer.args.tab1.args.description1 = ACH:Description(L["Eltruism Installer"], 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.installer.args.tab1.args.eltruisminstaller = ACH:Execute(L["Launch Eltruism Installer"], L["Launches the Eltruism install prompt"], 3, function() E:GetModule('PluginInstaller'):Queue(ElvUI_EltreumUI.InstallerData) E:ToggleOptions() end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.installer.args.tab1.args.description2 = ACH:Description(L["Eltruism Settings"], 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.installer.args.tab1.args.resetupdateeltruism = ACH:Execute(L["Reset/Update Eltruism Settings"], L["Resets/Updates Eltruism Settings to Eltreum's Defaults"], 5, function() ElvUI_EltreumUI:UpdateEltruismSettings() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.installer.args.tab1.args.description3 = ACH:Description(L["ElvUI Settings"], 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.installer.args.tab1.args.updateelvui = ACH:Execute(L["Reset/Update ElvUI Settings"], L["Resets/Updates ElvUI Settings to Eltreum's Defaults"], 7, function() ElvUI_EltreumUI:UpdateElvUISettings() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.installer.args.tab2 = ACH:Group(L["Nameplates"], nil, 2)
	ElvUI_EltreumUI.Options.args.installer.args.tab2.args.description1 = ACH:Description(L["Reset Nameplates"], 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.installer.args.tab2.args.resetnameplate = ACH:Execute(L["Reset nameplates to Eltruism settings"], nil, 3, function() ElvUI_EltreumUI:SetupNamePlates() ElvUI_EltreumUI:ResolutionOutline() end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.installer.args.tab2.args.description2 = ACH:Description(L["Reset Style Filters"], 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.installer.args.tab2.args.resetstylefilter = ACH:Execute(L["Reset Nameplate Style Filters"], nil, 5, function() ElvUI_EltreumUI:SetupStyleFilters() end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.installer.args.tab3 = ACH:Group(L["Layouts"], nil, 3)
	ElvUI_EltreumUI.Options.args.installer.args.tab3.args.description1 = ACH:Description(L["Reinstall DPS Layout"], 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.installer.args.tab3.args.resetdpslayout = ACH:Execute(L["Reset layout to Eltruism DPS/Tank"], nil, 3, function() E.data:SetProfile('Eltreum DPS/Tank ('..E.mynameRealm..')') ElvUI_EltreumUI:SetupGeneralLayout() ElvUI_EltreumUI:SetupLayoutDPS() end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.installer.args.tab3.args.description2 = ACH:Description(L["Reinstall Healer Layout"], 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.installer.args.tab3.args.resethealerlayout = ACH:Execute(L["Reset layout to Eltruism Healer"], nil, 5, function() E.data:SetProfile('Eltreum Healer ('..E.mynameRealm..')') ElvUI_EltreumUI:SetupGeneralLayout() ElvUI_EltreumUI:SetupLayoutHealer() end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.installer.args.tab3.args.description3 = ACH:Description(L["Reinstall Eltruism Datatext"], 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.installer.args.tab3.args.resetdatatext = ACH:Execute(L["Reset/Add Eltruism Datatext Panel"], nil, 7, function() ElvUI_EltreumUI:SetupDataText() E:UpdateMoverPositions() end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.installer.args.tab3.args.description4 = ACH:Description(L["Reinstall Thin Layout"], 8, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.installer.args.tab3.args.thinmode = ACH:Execute(E.NewSign..L["Reset layout to Eltruism Thin"], nil, 9, function() E.data:SetProfile('Eltreum Thin ('..E.mynameRealm..')') ElvUI_EltreumUI:SetupGeneralLayout() ElvUI_EltreumUI:SetupLayoutThin() end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.installer.args.tab4 = ACH:Group(L["General"], nil, 4)
	ElvUI_EltreumUI.Options.args.installer.args.tab4.args.description1 = ACH:Description(L["Reinstall"].." "..CHAT_LABEL, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.installer.args.tab4.args.resetchat = ACH:Execute(L["Reset Chat to ElvUI Settings"], nil, 3, function()
		E:SetupChat()
		ElvUI_EltreumUI:Print(L["ElvUI Chat has been set."])
		--for classic chat lfg
		local lfg
		if E.global.general.locale == "enUS" then
			lfg = "LookingForGroup"
		elseif E.global.general.locale == "deDE" then
			lfg = "SucheNachGruppe"
		elseif E.global.general.locale == "esMX" or E.global.general.locale == "esES" then
			lfg = "BuscarGrupo"
		elseif E.global.general.locale == "frFR" then
			lfg = "RechercheDeGroupe"
		elseif E.global.general.locale == "ruRU" then
			lfg = "ПоискСпутников"
		elseif E.global.general.locale == "zhTW" then
			lfg = "尋求組隊"
		else
			lfg = "LookingForGroup"
		end
		if not E.Retail then --remove lfg spam from general and creat tab for it
			if lfg then
				ChatFrame_RemoveChannel(_G.ChatFrame1, lfg)
				FCF_OpenNewWindow()
				ChatFrame_RemoveAllMessageGroups(_G.ChatFrame5)
				FCF_SetWindowName(_G.ChatFrame5, 'LFG')
				ChatFrame_AddChannel(_G.ChatFrame5, lfg)
				FCFTab_UpdateColors(_G.ChatFrame5Tab)
				FCFDock_SelectWindow(_G.GENERAL_CHAT_DOCK, _G.ChatFrame1)
			end
		end
	end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.installer.args.tab4.args.description2 = ACH:Description(L["Skip Plugins"], 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.installer.args.tab4.args.skipplugin = ACH:Execute(L["Skip Plugins install message"], L["Make the warnings to install profiles for other plugins stop"], 5, function()
		E.private.ElvUI_EltreumUI.isInstalled.sle = true
		E.private.ElvUI_EltreumUI.isInstalled.windtools = true
		E.private.ElvUI_EltreumUI.isInstalled.projectazilroka = true
	end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.installer.args.tab4.args.description3 = ACH:Description(L["Database Check"], 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.installer.args.tab4.args.databasecheck = ACH:Execute(L["Run Database Check"], L["Perform a Database Check if you are updating from a very old version as some settings have changed places and the Database Check will convert them"], 7, function() ElvUI_EltreumUI:DatabaseConversions(true) end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.installer.args.tab4.args.description4 = ACH:Description(L["Clear Details! Damage Meter tables to free up memory"], 8, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.installer.args.tab4.args.detailscache= ACH:Execute(L["Clear Details Tables"], L["Set Details tables to be empty"], 9, function() ElvUI_EltreumUI:EmptyDetailsTable() end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.installer.args.tab4.args.description5 = ACH:Description(EDIT_MODE_LAYOUT_HYPERLINK_TEXT, 10, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.installer.args.tab4.args.blizzeditmodelayout = ACH:Execute(E.Retail and _G.HUD_EDIT_MODE_IMPORT_LAYOUT.." "..EDIT_MODE_LAYOUT_HYPERLINK_TEXT or "", nil, 11, function() ElvUI_EltreumUI:NewRetailEditModeLayout() end,nil,false,'full',nil,nil,nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.installer.args.tab5 = ACH:Group(L["Gradient"], nil, 5, 'tab')
	ElvUI_EltreumUI.Options.args.installer.args.tab5.args.export = ACH:Group(L["Export"], nil, 1, 'tab')
	ElvUI_EltreumUI.Options.args.installer.args.tab5.args.export.args.input = ACH:Input(L["Exported Gradient Data:"], nil, 1, 27, "full", function() return ElvUI_EltreumUI:ExportImportGradient(nil,"export") end, function() return end)
	ElvUI_EltreumUI.Options.args.installer.args.tab5.args.export.args.input.disableButton = true
	ElvUI_EltreumUI.Options.args.installer.args.tab5.args.import = ACH:Group(L["Import"], nil, 2, 'tab')
	ElvUI_EltreumUI.Options.args.installer.args.tab5.args.import.args.input = ACH:Input(L["Import Gradient Data"], nil, 1, 27, "full", function() return "" end, function(_, data) ElvUI_EltreumUI:ExportImportGradient(data,"import") end)
	ElvUI_EltreumUI.Options.args.installer.args.tab5.args.import.args.input.focusSelect = true

	--addons
	ElvUI_EltreumUI.Options.args.addons = ACH:Group(E:TextGradient(L["Addons"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Install or update other Addon profiles"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.addons.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\addon'
	ElvUI_EltreumUI.Options.args.addons.args.elvuiplugins = ACH:Group(L["ElvUI Plugins"], nil, 2)
	ElvUI_EltreumUI.Options.args.addons.args.elvuiplugins.args.description1 = ACH:Description("Azilroka Addons", 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.addons.args.elvuiplugins.args.addonskins = ACH:Execute('|cff16C3F2AddOn|r|cFFFFFFFFSkins|r', L["Reset to Eltruism defaults."], 3, function() ElvUI_EltreumUI:AddonSetupAS() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("AddOnSkins") end)
	ElvUI_EltreumUI.Options.args.addons.args.elvuiplugins.args.projectazilroka = ACH:Execute('|cFF16C3F2Project|r|cFFFFFFFFAzilroka|r', L["Reset to Eltruism defaults."], 3, function() ElvUI_EltreumUI:AddonSetupPA() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("ProjectAzilroka") end)
	ElvUI_EltreumUI.Options.args.addons.args.elvuiplugins.args.description2 = ACH:Description("Shadow and Light", 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.addons.args.elvuiplugins.args.shadowandlight = ACH:Execute("|cff9482c9S|r|cff8c8ac9h|r|cff8591c9a|r|cff809bc9d|r|cff7fa6c9o|r|cff7eb2c9w|r |cff6fcac1a|r|cff5de7b8n|r|cff4bfdaed|r |cff3cfda2L|r|cff2cfd97i|r|cff20fd7bg|r|cff16fd55h|r|cff0cfd2ft|r", L["Reset to Eltruism defaults."], 5, function() ElvUI_EltreumUI:GetSLEProfile() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("ElvUI_SLE") end, not E.Retail)
	ElvUI_EltreumUI.Options.args.addons.args.elvuiplugins.args.description3 = ACH:Description("WindTools", 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.addons.args.elvuiplugins.args.windtools = ACH:Execute("|cff5385edW|r|cff5094eai|r|cff4da4e7n|r|cff4ab4e4d|r|cff47c0e1T|r|cff44cbdfo|r|cff41d7ddo|r|cff41d7ddl|r|cff41d7dds|r", L["Reset to Eltruism defaults."], 7, function() ElvUI_EltreumUI:GetWindToolsProfile() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("ElvUI_WindTools") end, not E.Retail)
	ElvUI_EltreumUI.Options.args.addons.args.elvuiplugins.args.description4 = ACH:Description("Dynamic Status Icons", 8, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.addons.args.elvuiplugins.args.dyamicstatusicons = ACH:Execute('|cFF16C3F2Dynamic Status |r|cFFFFFFFFIcons|r', L["Reset to Eltruism defaults."], 9, function() ElvUI_EltreumUI:SetupDynamicStatusIcons() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("ElvUI_DynamicStatusIcons") end, not E.Retail)
	ElvUI_EltreumUI.Options.args.addons.args.bossmods = ACH:Group(L["BossMods Profiles"], nil, 3)
	ElvUI_EltreumUI.Options.args.addons.args.bossmods.args.description1 = ACH:Description(nil, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.addons.args.bossmods.args.bigwigs = ACH:Execute('BigWigs', L["Reset to Eltruism defaults."], 3, function() ElvUI_EltreumUI:AddonSetupBW() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("BigWigs") end)
	ElvUI_EltreumUI.Options.args.addons.args.bossmods.args.description2 = ACH:Description(nil, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.addons.args.bossmods.args.dbm = ACH:Execute('DBM', L["Reset to Eltruism defaults."], 5, function() ElvUI_EltreumUI:AddonSetupDBM() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("DBM-Core") end)
	ElvUI_EltreumUI.Options.args.addons.args.bossmods.args.description3 = ACH:Description(nil, 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.addons.args.bossmods.args.methodraidtools = ACH:Execute('Method Raid Tools', L["Reset to Eltruism defaults."], 7, function() ElvUI_EltreumUI:AddonSetupMRT() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("MRT") end)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons = ACH:Group(L["Addon Profiles"], nil, 4)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.description1 = ACH:Description(L["Misc"].." "..L["AddOns"], 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.dynamiccam = ACH:Execute('Dynamic Cam', L["Reset to Eltruism defaults."], 3, function() ElvUI_EltreumUI:AddonSetupDynamicCam() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("DynamicCam") end)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.immersion = ACH:Execute('Immersion', L["Reset to Eltruism defaults."], 3, function() ElvUI_EltreumUI:AddonSetupImmersion() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("Immersion") end)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.warpdeplete = ACH:Execute('WarpDeplete', L["Reset to Eltruism defaults."], 3, function() ElvUI_EltreumUI:GetWarpDepleteProfile() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("WarpDeplete") end, not E.Retail)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.questie = ACH:Execute('Questie', L["Reset to Eltruism defaults."], 3, function() ElvUI_EltreumUI:AddonSetupQuestie() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("Questie") end, E.Retail)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.omnicddps = ACH:Execute('OmniCD DPS', L["Reset to Eltruism defaults."], 4, function() ElvUI_EltreumUI:GetOmniCDProfile("dps") E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("OmniCD") end, not E.Retail)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.omnicdhealer = ACH:Execute('OmniCD Healer', L["Reset to Eltruism defaults."], 4, function() ElvUI_EltreumUI:GetOmniCDProfile("healer") E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("OmniCD") end, not E.Retail)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.BattleGroundEnemies = ACH:Execute('BattleGroundEnemies', L["Reset to Eltruism defaults."], 5, function() ElvUI_EltreumUI:GetBattleGroundEnemiesProfile() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("BattleGroundEnemies") end)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.Capping = ACH:Execute('Capping', L["Reset to Eltruism defaults."], 5, function() ElvUI_EltreumUI:GetCappingProfile() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("Capping") end)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.GladiusEx = ACH:Execute('Gladius Ex', L["Reset to Eltruism defaults."], 6, function() ElvUI_EltreumUI:AddonSetupGladiusEx() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("GladiusEx") end, not E.Retail)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.Gladdy = ACH:Execute('Gladdy', L["Reset to Eltruism defaults."], 6, function() ElvUI_EltreumUI:SetupGladdy() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("Gladdy") end, not E.Cata)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.Gladius = ACH:Execute('Gladius', L["Reset to Eltruism defaults."], 6, function() ElvUI_EltreumUI:SetupGladius() E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("Gladius") end, not E.Cata)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.description2 = ACH:Description(L["Combat Text Addons"], 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.NameplateSCT = ACH:Execute('NameplateSCT', L["Reset to Eltruism defaults."], 8, function() ElvUI_EltreumUI:AddonSetupCombatText("NameplateSCT") E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("NameplateSCT") end)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.ElvUI_FCT = ACH:Execute('ElvUI Floating Combat Text', L["Reset to Eltruism defaults."], 8, function() ElvUI_EltreumUI:AddonSetupCombatText("ElvUI_FCT") E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("ElvUI_FCT") end)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.description3 = ACH:Description(L["Details Profiles"], 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.detailsv1 = ACH:Execute(L["Details v1 - Blizzard Flat Icons"], L["Reset to Eltruism defaults."], 10, function() ElvUI_EltreumUI:AddonSetupDT("spec") E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("Details") end)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.detailsv2 = ACH:Execute(L["Details v2 - Releaf Transparent Icons"], L["Reset to Eltruism defaults."], 10, function() ElvUI_EltreumUI:AddonSetupDT("releafalpha") E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("Details") end)
	ElvUI_EltreumUI.Options.args.addons.args.otheraddons.args.detailsv3 = ACH:Execute(L["Details v3 - Releaf Solid Icons"], L["Reset to Eltruism defaults."], 10, function() ElvUI_EltreumUI:AddonSetupDT("releafsolid") E:StaticPopup_Show('CONFIG_RL') end,nil,false,'full',nil,nil, function() return not IsAddOnLoaded("Details") end)

	--afk
	ElvUI_EltreumUI.Options.args.afk = ACH:Group(E:TextGradient(L["A.F.K"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Enhance the AFK screen"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.afk.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\afk'
	ElvUI_EltreumUI.Options.args.afk.args.description1 = ACH:Description(L["Play music while you are AFK"], 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.afk.args.enable = ACH:Toggle(L["Enable"], nil, 3, nil, false,"full",function() return E.db.ElvUI_EltreumUI.otherstuff.afkmusic.enable end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.afkmusic.enable = value end)
	ElvUI_EltreumUI.Options.args.afk.args.description2 = ACH:Description(L["Select a type of music"], 4, nil, nil, nil, nil, nil, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.afk.args.racialmusic = ACH:Toggle(L["Racial Music"], nil, 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.afkmusic.racial end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.afkmusic.racial = value end, function() return not E.db.ElvUI_EltreumUI.otherstuff.afkmusic.enable or E.db.ElvUI_EltreumUI.otherstuff.afkmusic.playerclass end, not E.Retail)
	ElvUI_EltreumUI.Options.args.afk.args.classmusic = ACH:Toggle(L["Class Music"], nil, 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.afkmusic.playerclass end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.afkmusic.playerclass = value end, function() return not E.db.ElvUI_EltreumUI.otherstuff.afkmusic.enable or E.db.ElvUI_EltreumUI.otherstuff.afkmusic.racial end, not E.Retail)
	ElvUI_EltreumUI.Options.args.afk.args.description3 = ACH:Description(L["Skin"], 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.afk.args.afkskin = ACH:Toggle(L["Enable"], nil, 7, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.afklogo end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.afklogo = value end)
	ElvUI_EltreumUI.Options.args.afk.args.eltruismlogo = ACH:Toggle(L["Eltruism Logo"], nil, 8, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.afklogoeltruism end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.afklogoeltruism = value end)

	-- aurafilters
	ElvUI_EltreumUI.Options.args.aurafilters = ACH:Group(E:TextGradient(L["Aura Filters"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Choose to show all debuffs/buffs or use default Filters"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.aurafilters.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\aurafilter'
	ElvUI_EltreumUI.Options.args.aurafilters.args.general = ACH:Group(L["General"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.general.args.description1 = ACH:Description(L["Apply To All"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.general.args.minimal = ACH:Execute(L["All"], nil, 3, function() ElvUI_EltreumUI:SetupAllAuras('Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.general.args.eltruism = ACH:Execute("Eltruism", nil, 3, function() ElvUI_EltreumUI:SetupAllAuras('Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.general.args.all = ACH:Execute(L["Minimal"], nil, 3, function() ElvUI_EltreumUI:SetupAllAuras('Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.player = ACH:Group(L["Player"], nil, 2)
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player = ACH:Group(L["Select how auras will be displayed for Player"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.inline = true
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.description1 = ACH:Description(nil, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.allbuffs = ACH:Execute(L["All Player Buffs"], L["Set filters to show more buffs on Player"], 2, function() ElvUI_EltreumUI:SetupBuffs('player', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.alldebuffs = ACH:Execute(L["All Player Debuffs"], L["Set filters to show more debuffs on Player"], 3, function() ElvUI_EltreumUI:SetupDebuffs('player', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.description2 = ACH:Description(nil, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.eltruismbuffs = ACH:Execute(L["Eltruism Player Buffs"], L["Set filters to be Eltruism defaults on Player"], 5, function() ElvUI_EltreumUI:SetupBuffs('player', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.eltruismdebuffs = ACH:Execute(L["Eltruism Player Debuffs"], L["Set filters to be Eltruism defaults on Player"], 6, function() ElvUI_EltreumUI:SetupDebuffs('player', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.description3 = ACH:Description(nil, 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.minimalbuffs = ACH:Execute(L["Minimal Buffs"], nil, 8, function() ElvUI_EltreumUI:SetupBuffs('player', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.player.args.player.args.minimaldebuffs = ACH:Execute(L["Minimal Debuffs"], nil, 9, function() ElvUI_EltreumUI:SetupDebuffs('player', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.target = ACH:Group(TARGET, nil, 2)
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target = ACH:Group(L["Select how auras will be displayed for Target"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.inline = true
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.description1 = ACH:Description(nil, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.allbuffs = ACH:Execute(L["All Target Buffs"], L["Set filters to show more buffs on Target"], 2, function() ElvUI_EltreumUI:SetupBuffs('target', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.alldebuffs = ACH:Execute(L["All Target Debuffs"], L["Set filters to show more debuffs on Target"], 3, function() ElvUI_EltreumUI:SetupDebuffs('target', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.description2 = ACH:Description(nil, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.eltruismbuffs = ACH:Execute(L["Eltruism Target Buffs"], L["Set filters to be Eltruism defaults on Target"], 5, function() ElvUI_EltreumUI:SetupBuffs('target', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.eltruismdebuffs = ACH:Execute(L["Eltruism Target Debuffs"], L["Set filters to be Eltruism defaults on Target"], 6, function() ElvUI_EltreumUI:SetupDebuffs('target', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.description3 = ACH:Description(nil, 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.minimalbuffs = ACH:Execute(L["Minimal Buffs"], nil, 8, function() ElvUI_EltreumUI:SetupBuffs('target', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.target.args.target.args.minimaldebuffs = ACH:Execute(L["Minimal Debuffs"], nil, 9, function() ElvUI_EltreumUI:SetupDebuffs('target', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus = ACH:Group(POWER_TYPE_FOCUS, nil, 2, nil, nil, nil, nil, E.Classic)
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus = ACH:Group(L["Select how auras will be displayed for Focus"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.inline = true
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.description1 = ACH:Description(nil, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.allbuffs = ACH:Execute(L["All Focus Buffs"], L["Set filters to show more buffs on Focus"], 2, function() ElvUI_EltreumUI:SetupBuffs('focus', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.alldebuffs = ACH:Execute(L["All Focus Debuffs"], L["Set filters to show more debuffs on Focus"], 3, function() ElvUI_EltreumUI:SetupDebuffs('focus', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.description2 = ACH:Description(nil, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.eltruismbuffs = ACH:Execute(L["Eltruism Focus Buffs"], L["Set filters to be Eltruism defaults on Focus"], 5, function() ElvUI_EltreumUI:SetupBuffs('focus', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.eltruismdebuffs = ACH:Execute(L["Eltruism Focus Debuffs"], L["Set filters to be Eltruism defaults on Focus"], 6, function() ElvUI_EltreumUI:SetupDebuffs('focus', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.description3 = ACH:Description(nil, 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.minimalbuffs = ACH:Execute(L["Minimal Buffs"], nil, 8, function() ElvUI_EltreumUI:SetupBuffs('focus', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.focus.args.focus.args.minimaldebuffs = ACH:Execute(L["Minimal Debuffs"], nil, 9, function() ElvUI_EltreumUI:SetupDebuffs('focus', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss = ACH:Group(L["Boss"], nil, 2, nil, nil, nil, nil, E.Classic)
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss = ACH:Group(L["Select how auras will be displayed for Boss"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.inline = true
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.description1 = ACH:Description(nil, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.allbuffs = ACH:Execute(L["All Boss Buffs"], L["Set filters to show more buffs on Boss"], 2, function() ElvUI_EltreumUI:SetupBuffs('boss', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.alldebuffs = ACH:Execute(L["All Boss Debuffs"], L["Set filters to show more debuffs on Boss"], 3, function() ElvUI_EltreumUI:SetupDebuffs('boss', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.description2 = ACH:Description(nil, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.eltruismbuffs = ACH:Execute(L["Eltruism Boss Buffs"], L["Set filters to be Eltruism defaults on Boss"], 5, function() ElvUI_EltreumUI:SetupBuffs('boss', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.eltruismdebuffs = ACH:Execute(L["Eltruism Boss Debuffs"], L["Set filters to be Eltruism defaults on Boss"], 6, function() ElvUI_EltreumUI:SetupDebuffs('boss', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.description3 = ACH:Description(nil, 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.minimalbuffs = ACH:Execute(L["Minimal Buffs"], nil, 8, function() ElvUI_EltreumUI:SetupBuffs('boss', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.boss.args.boss.args.minimaldebuffs = ACH:Execute(L["Minimal Debuffs"], nil, 9, function() ElvUI_EltreumUI:SetupDebuffs('boss', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate = ACH:Group(L["Nameplates"], nil, 2)
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate = ACH:Group(L["Select how auras will be displayed for Nameplates"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.inline = true
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.description1 = ACH:Description(nil, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.allbuffs = ACH:Execute(L["All Nameplate Buffs"], L["Set filters to show more buffs on Nameplates"], 2, function() ElvUI_EltreumUI:SetupBuffs('nameplate', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.alldebuffs = ACH:Execute(L["All Nameplate Debuffs"], L["Set filters to show more debuffs on Nameplates"], 3, function() ElvUI_EltreumUI:SetupDebuffs('nameplate', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.description2 = ACH:Description(nil, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.eltruismbuffs = ACH:Execute(L["Eltruism Nameplate Buffs"], L["Set filters to be Eltruism defaults on Nameplates"], 5, function() ElvUI_EltreumUI:SetupBuffs('nameplate', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.eltruismdebuffs = ACH:Execute(L["Eltruism Nameplate Debuffs"], L["Set filters to be Eltruism defaults on Nameplates"], 6, function() ElvUI_EltreumUI:SetupDebuffs('nameplate', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.description3 = ACH:Description(nil, 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.minimalbuffs = ACH:Execute(L["Minimal Buffs"], nil, 8, function() ElvUI_EltreumUI:SetupBuffs('nameplate', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.nameplate.args.nameplate.args.minimaldebuffs = ACH:Execute(L["Minimal Debuffs"], nil, 9, function() ElvUI_EltreumUI:SetupDebuffs('nameplate', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.party = ACH:Group(PARTY, nil, 2)
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party = ACH:Group(L["Select how auras will be displayed for Party"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.inline = true
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.description1 = ACH:Description(nil, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.allbuffs = ACH:Execute(L["All Party Buffs"], L["Set filters to show more buffs on Party"], 2, function() ElvUI_EltreumUI:SetupBuffs('party', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.alldebuffs = ACH:Execute(L["All Party Debuffs"], L["Set filters to show more debuffs on Party"], 3, function() ElvUI_EltreumUI:SetupDebuffs('party', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.description2 = ACH:Description(nil, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.eltruismbuffs = ACH:Execute(L["Eltruism Party Buffs"], L["Set filters to be Eltruism defaults on Party"], 5, function() ElvUI_EltreumUI:SetupBuffs('party', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.eltruismdebuffs = ACH:Execute(L["Eltruism Party Debuffs"], L["Set filters to be Eltruism defaults on Party"], 6, function() ElvUI_EltreumUI:SetupDebuffs('party', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.description3 = ACH:Description(nil, 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.minimalbuffs = ACH:Execute(L["Minimal Buffs"], nil, 8, function() ElvUI_EltreumUI:SetupBuffs('party', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.party.args.party.args.minimaldebuffs = ACH:Execute(L["Minimal Debuffs"], nil, 9, function() ElvUI_EltreumUI:SetupDebuffs('party', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid = ACH:Group(RAID, nil, 2)
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid = ACH:Group(L["Select how auras will be displayed for Raid"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.inline = true
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.description1 = ACH:Description(nil, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.allbuffs = ACH:Execute(L["All Raid Buffs"], L["Set filters to show more buffs on Raid"], 2, function() ElvUI_EltreumUI:SetupBuffs('raid', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.alldebuffs = ACH:Execute(L["All Raid Debuffs"], L["Set filters to show more debuffs on Raid"], 3, function() ElvUI_EltreumUI:SetupDebuffs('raid', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.description2 = ACH:Description(nil, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.eltruismbuffs = ACH:Execute(L["Eltruism Raid Buffs"], L["Set filters to be Eltruism defaults on Raid"], 5, function() ElvUI_EltreumUI:SetupBuffs('raid', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.eltruismdebuffs = ACH:Execute(L["Eltruism Raid Debuffs"], L["Set filters to be Eltruism defaults on Raid"], 6, function() ElvUI_EltreumUI:SetupDebuffs('raid', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.description3 = ACH:Description(nil, 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.minimalbuffs = ACH:Execute(L["Minimal Buffs"], nil, 8, function() ElvUI_EltreumUI:SetupBuffs('raid', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.raid.args.raid.args.minimaldebuffs = ACH:Execute(L["Minimal Debuffs"], nil, 9, function() ElvUI_EltreumUI:SetupDebuffs('raid', 'Minimal') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar = ACH:Group(L["Aura Bars"], nil, 2)
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar.args.aurabar = ACH:Group(L["Select how auras will be displayed for Aura Bars"], nil, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar.args.aurabar.inline = true
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar.args.aurabar.args.description1 = ACH:Description(nil, 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar.args.aurabar.args.alldebuffs = ACH:Execute(ALL, nil, 3, function() ElvUI_EltreumUI:SetupDebuffs('aurabar', 'Everything') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar.args.aurabar.args.description2 = ACH:Description(nil, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar.args.aurabar.args.eltruismdebuffs = ACH:Execute("Eltruism", nil, 5, function() ElvUI_EltreumUI:SetupDebuffs('aurabar', 'Eltruism') end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar.args.aurabar.args.description3 = ACH:Description(nil, 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.aurafilters.args.aurabar.args.aurabar.args.minimalbuffs = ACH:Execute(L["Minimal"], nil, 7, function() ElvUI_EltreumUI:SetupBuffs('aurabar', 'Minimal') end,nil,false,'full')

	--borders
	ElvUI_EltreumUI.Options.args.borders = ACH:Group(E:TextGradient(L["Borders"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Add Borders to frames and customize them"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.borders.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\border'
	ElvUI_EltreumUI.Options.args.borders.args.general = ACH:Group(L["General"], nil, 1)
	ElvUI_EltreumUI.Options.args.borders.args.general.args.description1 = ACH:Description(L["Enable Borders"], 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.borders.args.general.args.enable = ACH:Toggle(L["Enable"], nil, 4, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.borders end,function(_, value) E.db.ElvUI_EltreumUI.borders.borders = value ElvUI_EltreumUI:ShowHideBorders() ElvUI_EltreumUI:Borders() E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.borders.args.general.args.enableautoadjust = ACH:Toggle(L["Enable Auto-adjusting the actionbar spacing and position"], L["Adjusts actionbar spacing and position based on borders being enabled or not"], 5, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.borderautoadjust end,function(_, value) E.db.ElvUI_EltreumUI.borders.borderautoadjust = value ElvUI_EltreumUI:Borders() E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.borders.args.general.args.description2 = ACH:Description(L["Choose the Border Texture to be used:"], 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.borders.args.general.args.bordertexture = ACH:SharedMediaBorder("", nil, 7, "full", function() return E.db.ElvUI_EltreumUI.borders.texture end, function(_,key) E.db.ElvUI_EltreumUI.borders.texture = key ElvUI_EltreumUI:Borders() E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.borders.borderautoadjust or not E.db.ElvUI_EltreumUI.borders.borders end)
	ElvUI_EltreumUI.Options.args.borders.args.general.args.classcolors = ACH:Toggle(L["Use Class Colors"], nil, 8, nil, false,nil,function() return E.db.ElvUI_EltreumUI.borders.classcolor end,function(_, value) E.db.ElvUI_EltreumUI.borders.classcolor = value ElvUI_EltreumUI:Borders() E:StaticPopup_Show('CONFIG_RL') end,function() return not E.db.ElvUI_EltreumUI.borders.borders end)
	ElvUI_EltreumUI.Options.args.borders.args.general.args.colorborders = ACH:Color(L["Custom Color"], nil, 9, false, nil, function()
		local customcolorborders = E.db.ElvUI_EltreumUI.borders.bordercolors
		local d = P.ElvUI_EltreumUI.borders.bordercolors
		return customcolorborders.r, customcolorborders.g, customcolorborders.b, customcolorborders.a, d.r, d.g, d.b, d.a
	end,
			function(_, r, g, b)
				local customcolorborders = E.db.ElvUI_EltreumUI.borders.bordercolors
				customcolorborders.r, customcolorborders.g, customcolorborders.b = r, g, b E:StaticPopup_Show('CONFIG_RL') ElvUI_EltreumUI:Borders()
			end, function() return E.db.ElvUI_EltreumUI.borders.classcolor end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders = ACH:Group(L["ActionBars"], nil, 2, nil,nil,nil,function() return E.db.ElvUI_EltreumUI.borders.borderautoadjust or not E.db.ElvUI_EltreumUI.borders.borders end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.description0 = ACH:Group(L["(All settings require a reload)"], nil, 1)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.description0.inline = true
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.description0.args.description1 = ACH:Description(L["Change the size of the borders:"], 2)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.description0.args.ABsize = ACH:Range(L["Actionbar Thickness"], nil, 3, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.baredgesize end, function(_, value) E.db.ElvUI_EltreumUI.borders.baredgesize = value ElvUI_EltreumUI:Borders() end, function() return E.db.ElvUI_EltreumUI.borders.borderautoadjust or not E.db.ElvUI_EltreumUI.borders.borders or not E.private.actionbar.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar1 = ACH:Group(L["Action Bar 1"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar1.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.bar1borders end,function(_, value) E.db.ElvUI_EltreumUI.borders.bar1borders = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar1.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar1.args.bar1xsize = ACH:Range(L["Bar 1 X offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.bar1xborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar1xborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar1.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar1.args.bar1ysize = ACH:Range(L["Bar 1 Y offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.bar1yborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar1yborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar1.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar1.args.frameStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.bar1strata end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar1strata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar1.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar1.args.frameLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.bar1level end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar1level = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar1.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar2 = ACH:Group(L["Action Bar 2"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar2.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.bar2borders end,function(_, value) E.db.ElvUI_EltreumUI.borders.bar2borders = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar2.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar2.args.bar2xsize = ACH:Range(L["Bar 2 X offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.bar2xborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar2xborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar2.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar2.args.bar2ysize = ACH:Range(L["Bar 2 Y offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.bar2yborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar2yborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar2.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar2.args.frameStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.bar2strata end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar2strata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar2.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar2.args.frameLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.bar2level end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar2level = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar2.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar3 = ACH:Group(L["Action Bar 3"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar3.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.bar3borders end,function(_, value) E.db.ElvUI_EltreumUI.borders.bar3borders = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar3.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar3.args.bar3xsize = ACH:Range(L["Bar 3 X offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.bar3xborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar3xborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar3.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar3.args.bar3ysize = ACH:Range(L["Bar 3 Y offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.bar3yborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar3yborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar3.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar3.args.frameStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.bar3strata end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar3strata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar3.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar3.args.frameLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.bar3level end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar3level = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar3.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar4 = ACH:Group(L["Action Bar 4"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar4.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.bar4borders end,function(_, value) E.db.ElvUI_EltreumUI.borders.bar4borders = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar4.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar4.args.bar4xsize = ACH:Range(L["Bar 4 X offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.bar4xborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar4xborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar4.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar4.args.bar4ysize = ACH:Range(L["Bar 4 Y offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.bar4yborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar4yborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar4.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar4.args.frameStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.bar4strata end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar4strata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar4.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar4.args.frameLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.bar4level end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar4level = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar4.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar5 = ACH:Group(L["Action Bar 5"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar5.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.bar5borders end,function(_, value) E.db.ElvUI_EltreumUI.borders.bar5borders = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar5.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar5.args.bar5xsize = ACH:Range(L["Bar 5 X offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.bar5xborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar5xborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar5.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar5.args.bar5ysize = ACH:Range(L["Bar 5 Y offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.bar5yborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar5yborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar5.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar5.args.frameStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.bar5strata end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar5strata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar5.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar5.args.frameLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.bar5level end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar5level = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar5.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar6 = ACH:Group(L["Action Bar 6"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar6.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.bar6borders end,function(_, value) E.db.ElvUI_EltreumUI.borders.bar6borders = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar6.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar6.args.bar6xsize = ACH:Range(L["Bar 6 X offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.bar6xborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar6xborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar6.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar6.args.bar6ysize = ACH:Range(L["Bar 6 Y offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.bar6yborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar6yborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar6.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar6.args.frameStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.bar6strata end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar6strata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar6.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.actionbar6.args.frameLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.bar6level end, function(_, value) E.db.ElvUI_EltreumUI.borders.bar6level = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.bar6.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.totem = ACH:Group(L["Shaman Totem Bar"], nil, 2,"tab",nil,nil,nil,not E.Cata)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.totem.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.totembar end,function(_, value) E.db.ElvUI_EltreumUI.borders.totembar = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.totemBar.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.totem.args.bordertotemsize = ACH:Range(L["Shaman Totem Thickness"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.totemedgesize end, function(_, value) E.db.ElvUI_EltreumUI.borders.totemedgesize = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.totemBar.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.totem.args.totemxsize = ACH:Range(L["Totem X offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.totemxborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.totemxborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.totemBar.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.totem.args.totemysize = ACH:Range(L["Totem Y offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.totemyborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.totemyborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.totemBar.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.totem.args.frameStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.totemstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.totemstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.totemBar.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.totem.args.frameLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.totemlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.totemlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.totemBar.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.stance = ACH:Group(L["Stance Bar"], nil, 2,"tab",nil,nil,nil)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.stance.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.stanceborders end,function(_, value) E.db.ElvUI_EltreumUI.borders.stanceborders = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.stanceBar.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.stance.args.borderstancesize = ACH:Range(L["Stance Bar Thickness"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.stanceedgesize end, function(_, value) E.db.ElvUI_EltreumUI.borders.stanceedgesize = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.stanceBar.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.stance.args.stancexsize = ACH:Range(L["Stance X offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.stancexborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.stancexborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.stanceBar.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.stance.args.stanceysize = ACH:Range(L["Stance Y offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.stanceyborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.stanceyborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.stanceBar.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.stance.args.frameStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.stancestrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.stancestrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.stanceBar.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.stance.args.frameLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.stancelevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.stancelevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.stanceBar.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.pet = ACH:Group(L["Pet Action Bar"], nil, 2,"tab",nil,nil,nil)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.pet.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.petactionborders end,function(_, value) E.db.ElvUI_EltreumUI.borders.petactionborders = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.barPet.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.pet.args.borderpetabsize = ACH:Range(L["Pet Action Bar Thickness"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.petactionedgesize end, function(_, value) E.db.ElvUI_EltreumUI.borders.petactionedgesize = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.barPet.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.pet.args.petactionxsize = ACH:Range(L["Pet Action Bar X offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.petactionxborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.petactionxborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.barPet.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.pet.args.petactionysize = ACH:Range(L["Pet Action Bar Y offset"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.petactionyborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.petactionyborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.barPet.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.pet.args.frameStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.petabstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.petabstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.barPet.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.actionbarsborders.args.pet.args.frameLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.petablevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.petablevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.actionbar.barPet.enabled end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders = ACH:Group(L["Unitframes"], nil, 2, nil,nil,nil,function() return E.db.ElvUI_EltreumUI.borders.borderautoadjust or not E.db.ElvUI_EltreumUI.borders.borders end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.description0 = ACH:Group(L["(All settings require a reload)"], nil, 1)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.description0.inline = true
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.description0.args.description1 = ACH:Description(L["Change the size of the borders:"], 2)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.description0.args.borderUFsize = ACH:Range(L["Unitframe Thickness"], nil, 3, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.playertargetsize end, function(_, value) E.db.ElvUI_EltreumUI.borders.playertargetsize = value ElvUI_EltreumUI:Borders() end, function() return not E.private.unitframe.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.description0.args.bordergroupUFsize = ACH:Range(L["Group Unitframe Thickness"], nil, 3, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.groupsize end, function(_, value) E.db.ElvUI_EltreumUI.borders.groupsize = value ElvUI_EltreumUI:Borders() end, function() return not E.private.unitframe.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.description0.args.bordercastbarsize = ACH:Range(L["Castbar Thickness"], nil, 3, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.playertargetcastsize end, function(_, value) E.db.ElvUI_EltreumUI.borders.playertargetcastsize = value ElvUI_EltreumUI:Borders() end, function() return not E.private.unitframe.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player = ACH:Group(L["Player Border"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.playerborder end,function(_, value) E.db.ElvUI_EltreumUI.borders.playerborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.borderxplayer = ACH:Range(L["Border X offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.xplayer end, function(_, value) E.db.ElvUI_EltreumUI.borders.xplayer = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.borderyplayer = ACH:Range(L["Border Y offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.yplayer end, function(_, value) E.db.ElvUI_EltreumUI.borders.yplayer = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.playerframeStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.playerstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.playerstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.playerframeLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.playerlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.playerlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.castbar = ACH:Description(L["Player Castbar Border"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.barcastplayer = ACH:Toggle(L["Enable"], nil, 6, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.playercastborder end,function(_, value) E.db.ElvUI_EltreumUI.borders.playercastborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.castbar.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.borderxcastplayer = ACH:Range(L["Border X offset"], nil, 7, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.xplayercast end, function(_, value) E.db.ElvUI_EltreumUI.borders.xplayercast = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.castbar.enable or not E.db.ElvUI_EltreumUI.borders.playercastborder end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.borderycastplayer = ACH:Range(L["Border Y offset"], nil, 7, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.yplayercast end, function(_, value) E.db.ElvUI_EltreumUI.borders.yplayercast = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.castbar.enable or not E.db.ElvUI_EltreumUI.borders.playercastborder end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.playercastframeStrata = ACH:Select(L["Frame Strata"], nil, 8, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.playercaststrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.playercaststrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.castbar.enable or not E.db.ElvUI_EltreumUI.borders.playercastborder end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.playercastframeLevel = ACH:Range(L["Frame Level"], nil, 9, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.playercastlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.playercastlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.castbar.enable or not E.db.ElvUI_EltreumUI.borders.playercastborder end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.alternativeclassbar = ACH:Description(L["Alternative Power"] , 10, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.baralternativeclassbar = ACH:Toggle(L["Enable"], nil, 11, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.alternativeclassbar end,function(_, value) E.db.ElvUI_EltreumUI.borders.alternativeclassbar = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.classbar.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.borderxalternativeclassbar = ACH:Range(L["Border X offset"], nil, 12, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.alternativeclassbarxborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.alternativeclassbarxborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.classbar.enable or not E.db.ElvUI_EltreumUI.borders.alternativeclassbar end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.borderyalternativeclassbar = ACH:Range(L["Border Y offset"], nil, 12, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.alternativeclassbaryborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.alternativeclassbaryborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.classbar.enable or not E.db.ElvUI_EltreumUI.borders.alternativeclassbar end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.alternativeclassbarframeStrata = ACH:Select(L["Frame Strata"], nil, 13, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.alternativeclassbarstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.alternativeclassbarstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.classbar.enable or not E.db.ElvUI_EltreumUI.borders.alternativeclassbar end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.alternativeclassbarframeLevel = ACH:Range(L["Frame Level"], nil, 14, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.alternativeclassbarlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.alternativeclassbarlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.classbar.enable or not E.db.ElvUI_EltreumUI.borders.alternativeclassbar end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.staggerclassbar = ACH:Description(STAGGER, 15, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.barstaggerclassbar = ACH:Toggle(L["Enable"], nil, 16, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.staggerclassbar end,function(_, value) E.db.ElvUI_EltreumUI.borders.staggerclassbar = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.classbar.enable end, not E.Retail)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.borderxstaggerclassbar = ACH:Range(L["Border X offset"], nil, 17, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.staggerclassbarxborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.staggerclassbarxborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.classbar.enable or not E.db.ElvUI_EltreumUI.borders.staggerclassbar end, not E.Retail)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.borderystaggerclassbar = ACH:Range(L["Border Y offset"], nil, 17, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.staggerclassbaryborder end, function(_, value) E.db.ElvUI_EltreumUI.borders.staggerclassbaryborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.classbar.enable or not E.db.ElvUI_EltreumUI.borders.staggerclassbar end, not E.Retail)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.staggerclassbarframeStrata = ACH:Select(L["Frame Strata"], nil, 18, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.staggerclassbarstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.staggerclassbarstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.classbar.enable or not E.db.ElvUI_EltreumUI.borders.staggerclassbar end, not E.Retail)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.staggerclassbarframeLevel = ACH:Range(L["Frame Level"], nil, 19, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.staggerclassbarlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.staggerclassbarlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.classbar.enable or not E.db.ElvUI_EltreumUI.borders.staggerclassbar end, not E.Retail)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.comboclassbar = ACH:Description(TUTORIAL_TITLE61_ROGUE, 20, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.barcomboclassbar = ACH:Toggle(L["Enable"], nil, 21, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.comboclassbar end,function(_, value) E.db.ElvUI_EltreumUI.borders.comboclassbar = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.classbar.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.borderxcomboclassbar = ACH:Range(L["Border X offset"], nil, 22, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.combosizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.combosizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.classbar.enable or not E.db.ElvUI_EltreumUI.borders.comboclassbar end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.borderycomboclassbar = ACH:Range(L["Border Y offset"], nil, 22, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.combosizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.combosizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.classbar.enable or not E.db.ElvUI_EltreumUI.borders.comboclassbar end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.comboclassbarframeStrata = ACH:Select(L["Frame Strata"], nil, 23, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.combostrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.combostrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.classbar.enable or not E.db.ElvUI_EltreumUI.borders.comboclassbar end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.comboclassbarframeLevel = ACH:Range(L["Frame Level"], nil, 24, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.combolevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.combolevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.classbar.enable or not E.db.ElvUI_EltreumUI.borders.comboclassbar end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.playerpower = ACH:Description(L["Power"], 25, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.barplayerpower = ACH:Toggle(L["Enable"], nil, 26, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.playerpower end,function(_, value) E.db.ElvUI_EltreumUI.borders.playerpower = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.power.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.borderxplayerpower = ACH:Range(L["Border X offset"], nil, 27, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.playerpowersizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.playerpowersizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.power.enable or not E.db.ElvUI_EltreumUI.borders.playerpower end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.borderyplayerpower = ACH:Range(L["Border Y offset"], nil, 27, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.playerpowersizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.playerpowersizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.power.enable or not E.db.ElvUI_EltreumUI.borders.playerpower end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.playerpowerframeStrata = ACH:Select(L["Frame Strata"], nil, 28, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.playerpowerstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.playerpowerstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.power.enable or not E.db.ElvUI_EltreumUI.borders.playerpower end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.player.args.playerpowerframeLevel = ACH:Range(L["Frame Level"], nil, 29, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.playerpowerlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.playerpowerlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.player.power.enable or not E.db.ElvUI_EltreumUI.borders.playerpower end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target = ACH:Group(L["Target Border"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.targetborder end,function(_, value) E.db.ElvUI_EltreumUI.borders.targetborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.target.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target.args.borderxtarget = ACH:Range(L["Border X offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.xtarget end, function(_, value) E.db.ElvUI_EltreumUI.borders.xtarget = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.target.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target.args.borderytarget = ACH:Range(L["Border Y offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.ytarget end, function(_, value) E.db.ElvUI_EltreumUI.borders.ytarget = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.target.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target.args.targetframeStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.targetstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.targetstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.target.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target.args.targetframeLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.targetlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.targetlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.target.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target.args.castbar = ACH:Description(L["Target Castbar Border"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target.args.barcasttarget = ACH:Toggle(L["Enable"], nil, 6, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.targetcastborder end,function(_, value) E.db.ElvUI_EltreumUI.borders.targetcastborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.target.castbar.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target.args.borderxcasttarget = ACH:Range(L["Border X offset"], nil, 7, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.xcasttarget end, function(_, value) E.db.ElvUI_EltreumUI.borders.xcasttarget = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.target.castbar.enable or not E.db.ElvUI_EltreumUI.borders.targetcastborder end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target.args.borderycasttarget = ACH:Range(L["Border Y offset"], nil, 7, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.ycasttarget end, function(_, value) E.db.ElvUI_EltreumUI.borders.ycasttarget = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.target.castbar.enable or not E.db.ElvUI_EltreumUI.borders.targetcastborder end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target.args.targetcastframeStrata = ACH:Select(L["Frame Strata"], nil, 8, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.targetcaststrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.targetcaststrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.target.castbar.enable or not E.db.ElvUI_EltreumUI.borders.targetcastborder end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target.args.targetcastframeLevel = ACH:Range(L["Frame Level"], nil, 9, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.targetcastlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.targetcastlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.target.castbar.enable or not E.db.ElvUI_EltreumUI.borders.targetcastborder end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target.args.targetpower = ACH:Description(L["Power"], 10, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target.args.bartargetpower = ACH:Toggle(L["Enable"], nil, 11, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.targetpower end,function(_, value) E.db.ElvUI_EltreumUI.borders.targetpower = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.target.power.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target.args.borderxtargetpower = ACH:Range(L["Border X offset"], nil, 12, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.targetpowersizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.targetpowersizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.target.power.enable or not E.db.ElvUI_EltreumUI.borders.targetpower end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target.args.borderytargetpower = ACH:Range(L["Border Y offset"], nil, 12, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.targetpowersizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.targetpowersizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.target.power.enable or not E.db.ElvUI_EltreumUI.borders.targetpower end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target.args.targetpowerframeStrata = ACH:Select(L["Frame Strata"], nil, 13, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.targetpowerstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.targetpowerstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.target.power.enable or not E.db.ElvUI_EltreumUI.borders.targetpower end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.target.args.targetpowerframeLevel = ACH:Range(L["Frame Level"], nil, 14, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.targetpowerlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.targetpowerlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.target.power.enable or not E.db.ElvUI_EltreumUI.borders.targetpower end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.targettarget = ACH:Group(L["Target of Target Border"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.targettarget.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.targettargetborder end,function(_, value) E.db.ElvUI_EltreumUI.borders.targettargetborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.targettarget.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.targettarget.args.borderxtargettarget = ACH:Range(L["Border X offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.xtargettarget end, function(_, value) E.db.ElvUI_EltreumUI.borders.xtargettarget = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.targettarget.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.targettarget.args.borderytargettarget = ACH:Range(L["Border Y offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.ytargettarget end, function(_, value) E.db.ElvUI_EltreumUI.borders.ytargettarget = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.targettarget.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.targettarget.args.targettargetframeStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.targettargetstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.targettargetstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.targettarget.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.targettarget.args.targettargetframeLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.targettargetlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.targettargetlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.targettarget.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.targettarget.args.targettargetpower = ACH:Description(L["Power"], 10, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.targettarget.args.bartargettargetpower = ACH:Toggle(L["Enable"], nil, 11, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.targettargetpower end,function(_, value) E.db.ElvUI_EltreumUI.borders.targettargetpower = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.targettarget.power.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.targettarget.args.borderxtargettargetpower = ACH:Range(L["Border X offset"], nil, 12, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.targettargetpowersizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.targettargetpowersizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.targettarget.power.enable or not E.db.ElvUI_EltreumUI.borders.targettargetpower end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.targettarget.args.borderytargettargetpower = ACH:Range(L["Border Y offset"], nil, 12, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.targettargetpowersizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.targettargetpowersizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.targettarget.power.enable or not E.db.ElvUI_EltreumUI.borders.targettargetpower end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.targettarget.args.targettargetpowerframeStrata = ACH:Select(L["Frame Strata"], nil, 13, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.targettargetpowerstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.targettargetpowerstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.targettarget.power.enable or not E.db.ElvUI_EltreumUI.borders.targettargetpower end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.targettarget.args.targettargetpowerframeLevel = ACH:Range(L["Frame Level"], nil, 14, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.targettargetpowerlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.targettargetpowerlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.targettarget.power.enable or not E.db.ElvUI_EltreumUI.borders.targettargetpower end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.party = ACH:Group(L["Party Border"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.party.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.partyborders end,function(_, value) E.db.ElvUI_EltreumUI.borders.partyborders = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.party.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.party.args.borderxparty = ACH:Range(L["Border X offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.partysizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.partysizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.party.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.party.args.borderyparty = ACH:Range(L["Border Y offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.partysizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.partysizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.party.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.party.args.partyframeStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.partystrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.partystrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.party.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.party.args.partyframeLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.partylevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.partylevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.party.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid1 = ACH:Group(L["Raid1 Border"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid1.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.raidborders end,function(_, value) E.db.ElvUI_EltreumUI.borders.raidborders = value ElvUI_EltreumUI:Borders() end, function() return (not E.db.ElvUI_EltreumUI.borders.raidborders and not E.db.unitframe.units.raid1.enable) or (not E.db.ElvUI_EltreumUI.borders.raidborders and not E.private.unitframe.disabledBlizzardFrames.raid) end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid1.args.borderxraid1 = ACH:Range(L["Border X offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.raidsizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.raidsizex = value ElvUI_EltreumUI:Borders() end, function() return (not E.db.ElvUI_EltreumUI.borders.raidborders and not E.db.unitframe.units.raid1.enable) or (not E.db.ElvUI_EltreumUI.borders.raidborders and not E.private.unitframe.disabledBlizzardFrames.raid) end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid1.args.borderyraid1 = ACH:Range(L["Border Y offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.raidsizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.raidsizey = value ElvUI_EltreumUI:Borders() end, function() return (not E.db.ElvUI_EltreumUI.borders.raidborders and not E.db.unitframe.units.raid1.enable) or (not E.db.ElvUI_EltreumUI.borders.raidborders and not E.private.unitframe.disabledBlizzardFrames.raid) end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid1.args.raid1frameStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.raidstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.raidstrata = value ElvUI_EltreumUI:Borders() end, function() return (not E.db.ElvUI_EltreumUI.borders.raidborders and not E.db.unitframe.units.raid1.enable) or (not E.db.ElvUI_EltreumUI.borders.raidborders and not E.private.unitframe.disabledBlizzardFrames.raid) end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid1.args.raid1frameLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.raidlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.raidlevel = value ElvUI_EltreumUI:Borders() end, function() return (not E.db.ElvUI_EltreumUI.borders.raidborders and not E.db.unitframe.units.raid1.enable) or (not E.db.ElvUI_EltreumUI.borders.raidborders and not E.private.unitframe.disabledBlizzardFrames.raid) end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid2 = ACH:Group(L["Raid2 Border"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid2.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.raid2borders end,function(_, value) E.db.ElvUI_EltreumUI.borders.raid2borders = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.raid2.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid2.args.borderxraid2 = ACH:Range(L["Border X offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.raid2sizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.raid2sizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.raid2.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid2.args.borderyraid2 = ACH:Range(L["Border Y offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.raid2sizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.raid2sizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.raid2.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid2.args.raid2frameStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.raid2strata end, function(_, value) E.db.ElvUI_EltreumUI.borders.raid2strata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.raid2.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid2.args.raid2frameLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.raid2level end, function(_, value) E.db.ElvUI_EltreumUI.borders.raid2level = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.raid2.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid3 = ACH:Group(L["Raid3 Border"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid3.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.raid40borders end,function(_, value) E.db.ElvUI_EltreumUI.borders.raid40borders = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.raid3.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid3.args.borderxraid3 = ACH:Range(L["Border X offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.raid40sizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.raid40sizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.raid3.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid3.args.borderyraid3 = ACH:Range(L["Border Y offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.raid40sizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.raid40sizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.raid3.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid3.args.raid3frameStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.raid40strata end, function(_, value) E.db.ElvUI_EltreumUI.borders.raid40strata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.raid3.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.raid3.args.raid3frameLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.raid40level end, function(_, value) E.db.ElvUI_EltreumUI.borders.raid40level = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.raid3.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus = ACH:Group(L["Focus Border"], nil, 2,"tab", nil, nil, nil, E.Classic)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.focusborder end,function(_, value) E.db.ElvUI_EltreumUI.borders.focusborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focus.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.borderfocus = ACH:Range(L["Focus Thickness"], nil, 1, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.focussize end, function(_, value) E.db.ElvUI_EltreumUI.borders.focussize = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focus.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.borderxfocus = ACH:Range(L["Border X offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.xfocus end, function(_, value) E.db.ElvUI_EltreumUI.borders.xfocus = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focus.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.borderyfocus = ACH:Range(L["Border Y offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.yfocus end, function(_, value) E.db.ElvUI_EltreumUI.borders.yfocus = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focus.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.focusframeStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.focusstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.focusstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focus.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.focusframeLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.focuslevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.focuslevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focus.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.castbar = ACH:Description(L["Focus Castbar Border"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.barcastfocus = ACH:Toggle(L["Enable"], nil, 6, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.focuscastborder end,function(_, value) E.db.ElvUI_EltreumUI.borders.focuscastborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focus.castbar.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.borderxcastfocus = ACH:Range(L["Border X offset"], nil, 7, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.xcastfocus end, function(_, value) E.db.ElvUI_EltreumUI.borders.xcastfocus = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focus.castbar.enable or not E.db.ElvUI_EltreumUI.borders.focuscastborder end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.borderycastfocus = ACH:Range(L["Border Y offset"], nil, 7, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.ycastfocus end, function(_, value) E.db.ElvUI_EltreumUI.borders.ycastfocus = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focus.castbar.enable or not E.db.ElvUI_EltreumUI.borders.focuscastborder end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.focuscastframeStrata = ACH:Select(L["Frame Strata"], nil, 8, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.focuscaststrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.focuscaststrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focus.castbar.enable or not E.db.ElvUI_EltreumUI.borders.focuscastborder end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.focuscastframeLevel = ACH:Range(L["Frame Level"], nil, 9, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.focuscastlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.focuscastlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focus.castbar.enable or not E.db.ElvUI_EltreumUI.borders.focuscastborder end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.powerbar = ACH:Description(L["Focus Power Border"], 10, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.powerbarfocus = ACH:Toggle(L["Enable"], nil, 11, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.focuspowerborder end,function(_, value) E.db.ElvUI_EltreumUI.borders.focuspowerborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focus.power.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.borderxpowerbar = ACH:Range(L["Border X offset"], nil, 12, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.xfocuspower end, function(_, value) E.db.ElvUI_EltreumUI.borders.xfocuspower = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focus.power.enable or not E.db.ElvUI_EltreumUI.borders.focuspowerborder end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.borderypowerbar = ACH:Range(L["Border Y offset"], nil, 13, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.yfocuspower end, function(_, value) E.db.ElvUI_EltreumUI.borders.yfocuspower = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focus.power.enable or not E.db.ElvUI_EltreumUI.borders.focuspowerborder end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.focuspowerbarframeStrata = ACH:Select(L["Frame Strata"], nil, 14, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.focuspowerstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.focuspowerstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focus.power.enable or not E.db.ElvUI_EltreumUI.borders.focuspowerborder end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focus.args.focuspowerbarframeLevel = ACH:Range(L["Frame Level"], nil, 15, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.focuspowerlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.focuspowerlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focus.power.enable or not E.db.ElvUI_EltreumUI.borders.focuspowerborder end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focustarget = ACH:Group(L["Focus Target Border"], nil, 2,"tab", nil, nil, nil, E.Classic)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focustarget.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.focustargetborder end,function(_, value) E.db.ElvUI_EltreumUI.borders.focustargetborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focustarget.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focustarget.args.borderfocustarget = ACH:Range(L["Focus Thickness"], nil, 1, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.focussize end, function(_, value) E.db.ElvUI_EltreumUI.borders.focussize = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focustarget.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focustarget.args.borderxfocustarget = ACH:Range(L["Border X offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.xfocustarget end, function(_, value) E.db.ElvUI_EltreumUI.borders.xfocustarget = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focustarget.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focustarget.args.borderyfocustarget = ACH:Range(L["Border Y offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.yfocustarget end, function(_, value) E.db.ElvUI_EltreumUI.borders.yfocustarget = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focustarget.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focustarget.args.focustargetframeStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.focustargetstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.focustargetstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focustarget.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.focustarget.args.focustargetframeLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.focustargetlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.focustargetlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.focustarget.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.boss = ACH:Group(L["Boss Border"], nil, 2,"tab", nil, nil, nil, E.Classic)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.boss.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.bossborder end,function(_, value) E.db.ElvUI_EltreumUI.borders.bossborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.boss.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.boss.args.borderboss = ACH:Range(L["Boss Thickness"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.bosssize end, function(_, value) E.db.ElvUI_EltreumUI.borders.bosssize = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.boss.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.boss.args.borderxboss = ACH:Range(L["Border X offset"], nil, 3, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.xboss end, function(_, value) E.db.ElvUI_EltreumUI.borders.xboss = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.boss.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.boss.args.borderyboss = ACH:Range(L["Border Y offset"], nil, 3, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.yboss end, function(_, value) E.db.ElvUI_EltreumUI.borders.yboss = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.boss.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.boss.args.bossframeStrata = ACH:Select(L["Frame Strata"], nil, 4, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.bossstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.bossstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.boss.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.boss.args.bossframeLevel = ACH:Range(L["Frame Level"], nil, 5, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.bosslevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.bosslevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.boss.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.pet = ACH:Group(L["Pet Border"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.pet.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.petborder end,function(_, value) E.db.ElvUI_EltreumUI.borders.petborder = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.pet.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.pet.args.borderpet = ACH:Range(L["Pet Thickness"], nil, 1, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.petsize end, function(_, value) E.db.ElvUI_EltreumUI.borders.petsize = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.pet.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.pet.args.borderxpet = ACH:Range(L["Border X offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.petsizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.petsizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.pet.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.pet.args.borderypet = ACH:Range(L["Border Y offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.petsizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.petsizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.pet.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.pet.args.petframeStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.petstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.petstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.pet.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.pet.args.petframeLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.petlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.petlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.unitframe.units.pet.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.tankassist = ACH:Group(L["Assist"].." / "..L["Tank"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.tankassist.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.tankassistborders end,function(_, value) E.db.ElvUI_EltreumUI.borders.tankassistborders = value ElvUI_EltreumUI:Borders() end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.tankassist.args.bordertankassist = ACH:Range(L["Thickness"], nil, 1, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.tankassistsize end, function(_, value) E.db.ElvUI_EltreumUI.borders.tankassistsize = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.tankassistborders end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.tankassist.args.borderxtankassist = ACH:Range(L["Border X offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.tankassistsizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.tankassistsizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.tankassistborders end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.tankassist.args.borderytankassist = ACH:Range(L["Border Y offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.tankassistsizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.tankassistsizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.tankassistborders end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.tankassist.args.tankassistframeStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.tankassiststrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.tankassiststrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.tankassistborders end)
	ElvUI_EltreumUI.Options.args.borders.args.unitframeborders.args.tankassist.args.tankassistframeLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.tankassistlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.tankassistlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.tankassistborders end)
	ElvUI_EltreumUI.Options.args.borders.args.nameplateborders = ACH:Group(L["Nameplate"], nil, 2, nil,nil,nil,function() return E.db.ElvUI_EltreumUI.borders.borderautoadjust or not E.db.ElvUI_EltreumUI.borders.borders end)
	ElvUI_EltreumUI.Options.args.borders.args.nameplateborders.args.powerbar = ACH:Description(L["Nameplate Power Bar Border"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.borders.args.nameplateborders.args.enable = ACH:Toggle(L["Enable"], nil, 2, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.powerbarborder end,function(_, value) E.db.ElvUI_EltreumUI.borders.powerbarborder = value ElvUI_EltreumUI:Borders() end, function() return not E.private.ElvUI_EltreumUI.nameplatepower end)
	ElvUI_EltreumUI.Options.args.borders.args.nameplateborders.args.borderpowerbarsize = ACH:Range(L["Nameplate Power Bar Thickness"], nil, 3, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.powerbarsize end, function(_, value) E.db.ElvUI_EltreumUI.borders.powerbarsize = value ElvUI_EltreumUI:Borders() end, function() return not E.private.ElvUI_EltreumUI.nameplatepower end)
	ElvUI_EltreumUI.Options.args.borders.args.nameplateborders.args.borderxpowerbar = ACH:Range(L["Border X offset"], nil, 4, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.xpowerbar end, function(_, value) E.db.ElvUI_EltreumUI.borders.xpowerbar = value ElvUI_EltreumUI:Borders() end, function() return not E.private.ElvUI_EltreumUI.nameplatepower end)
	ElvUI_EltreumUI.Options.args.borders.args.nameplateborders.args.borderypowerbar = ACH:Range(L["Border Y offset"], nil, 4, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.ypowerbar end, function(_, value) E.db.ElvUI_EltreumUI.borders.ypowerbar = value ElvUI_EltreumUI:Borders() end, function() return not E.private.ElvUI_EltreumUI.nameplatepower end)
	ElvUI_EltreumUI.Options.args.borders.args.nameplateborders.args.frameStrata = ACH:Select(L["Frame Strata"], nil, 5, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.powerbarstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.powerbarstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.private.ElvUI_EltreumUI.nameplatepower end)
	ElvUI_EltreumUI.Options.args.borders.args.nameplateborders.args.frameLevel = ACH:Range(L["Frame Level"], nil, 6, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.powerbarlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.powerbarlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.private.ElvUI_EltreumUI.nameplatepower end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder = ACH:Group(L["Other"], nil, 4, "tab",nil,nil,function() return E.db.ElvUI_EltreumUI.borders.borderautoadjust or not E.db.ElvUI_EltreumUI.borders.borders end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.minimap = ACH:Group(MINIMAP_LABEL, nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.minimap.args.enable = ACH:Toggle(L["Enable"].." "..MINIMAP_LABEL, nil, 3, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.minimapborder end,function(_, value) E.db.ElvUI_EltreumUI.borders.minimapborder = value E:StaticPopup_Show('CONFIG_RL') ElvUI_EltreumUI:Borders() end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.minimap.args.description1 = ACH:Description(L["Change the size of the borders:"], 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.minimap.args.borderthickness = ACH:Range(L["Minimap Thickness"], nil, 5, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.minimapsize end, function(_, value) E.db.ElvUI_EltreumUI.borders.minimapsize = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.minimapborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.minimap.args.borderxminimap = ACH:Range(MINIMAP_LABEL.." "..L["Border X offset"], nil, 6, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.minimapsizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.minimapsizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.minimapborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.minimap.args.borderyminimap = ACH:Range(MINIMAP_LABEL.." "..L["Border Y offset"], nil, 6, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.minimapsizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.minimapsizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.minimapborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.minimap.args.frameStrata = ACH:Select(L["Frame Strata"], nil, 7, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.minimapstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.minimapstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.minimapborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.minimap.args.frameLevel = ACH:Range(L["Frame Level"], nil, 8, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.minimaplevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.minimaplevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.minimapborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.aura = ACH:Group(AURAS, nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.aura.args.enable = ACH:Toggle(L["Enable"].." "..AURAS, nil, 3, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.auraborder end,function(_, value) E.db.ElvUI_EltreumUI.borders.auraborder = value E:StaticPopup_Show('CONFIG_RL') ElvUI_EltreumUI:Borders() end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.aura.args.borderthickness = ACH:Range(L["Aura Thickness"], nil, 5, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.aurasize end, function(_, value) E.db.ElvUI_EltreumUI.borders.aurasize = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.auraborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.aura.args.borderxauras = ACH:Range(L["Aura Border X offset"], nil, 6, { min = 1, max = 100, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.aurasizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.aurasizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.auraborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.aura.args.borderyauras = ACH:Range(L["Aura Border Y offset"], nil, 6, { min = 1, max = 100, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.aurasizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.aurasizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.auraborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.aura.args.borderxaurasdebuff = ACH:Range(L["Debuff Aura Border X offset"], nil, 7, { min = 1, max = 100, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.debuffaurasizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.debuffaurasizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.auraborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.aura.args.borderyaurasdebuff = ACH:Range(L["Debuff Aura Border Y offset"], nil, 7, { min = 1, max = 100, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.debuffaurasizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.debuffaurasizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.auraborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.aura.args.auraframeStrata = ACH:Select(L["Frame Strata"], nil, 8, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.aurastrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.aurastrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.auraborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.aura.args.auraframeLevel = ACH:Range(L["Frame Level"], nil, 9, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.auralevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.auralevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.auraborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.ufaura = ACH:Group(L["Unitframe Auras"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.ufaura.args.enable = ACH:Toggle(L["Enable Unitframe Auras"], nil, 3, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.auraborderuf end,function(_, value) E.db.ElvUI_EltreumUI.borders.auraborderuf = value E:StaticPopup_Show('CONFIG_RL') ElvUI_EltreumUI:Borders() end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.ufaura.args.borderthickness = ACH:Range(L["Aura Thickness"], nil, 5, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.ufaurasize end, function(_, value) E.db.ElvUI_EltreumUI.borders.ufaurasize = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.auraborderuf end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.ufaura.args.borderxauras = ACH:Range(L["Unitframe Aura Border X offset"], nil, 6, { min = 1, max = 100, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.ufbuffsizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.ufbuffsizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.auraborderuf end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.ufaura.args.borderyauras = ACH:Range(L["Unitframe Aura Border Y offset"], nil, 6, { min = 1, max = 100, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.ufbuffsizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.ufbuffsizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.auraborderuf end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.ufaura.args.borderxaurasdebuff = ACH:Range(L["Unitframes Debuff Aura Border X offset"], nil, 7, { min = 1, max = 100, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.ufdebuffsizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.ufdebuffsizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.auraborderuf end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.ufaura.args.borderyaurasdebuff = ACH:Range(L["Unitframes Debuff Aura Border Y offset"], nil, 7, { min = 1, max = 100, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.ufdebuffsizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.ufdebuffsizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.auraborderuf end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.ufaura.args.auraufframeStrata = ACH:Select(L["Frame Strata"], nil, 8, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.auraufstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.auraufstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.auraborderuf end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.ufaura.args.auraufframeLevel = ACH:Range(L["Frame Level"], nil, 9, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.aurauflevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.aurauflevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.auraborderuf end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.chat = ACH:Group(BINDING_HEADER_CHAT, nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.chat.args.enable = ACH:Toggle(L["Enable"].." "..BINDING_HEADER_CHAT, nil, 3, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.chatborder end,function(_, value) E.db.ElvUI_EltreumUI.borders.chatborder = value E:StaticPopup_Show('CONFIG_RL') ElvUI_EltreumUI:Borders() end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.chat.args.borderthickness = ACH:Range(L["Chat Thickness"], nil, 5, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.chatsize end, function(_, value) E.db.ElvUI_EltreumUI.borders.chatsize = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.chatborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.chat.args.leftchatx = ACH:Range(L["Left Chat Border X offset"], nil, 6, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.leftchatborderx end, function(_, value) E.db.ElvUI_EltreumUI.borders.leftchatborderx = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.chatborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.chat.args.leftchaty = ACH:Range(L["Left Chat Border Y offset"], nil, 6, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.leftchatbordery end, function(_, value) E.db.ElvUI_EltreumUI.borders.leftchatbordery = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.chatborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.chat.args.leftchatframeStrata = ACH:Select(L["Frame Strata"], nil, 7, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.leftchatstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.leftchatstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.chatborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.chat.args.leftchatframeLevel = ACH:Range(L["Frame Level"], nil, 8, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.leftchatlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.leftchatlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.chatborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.chat.args.rightchatx = ACH:Range(L["Right Chat Border X offset"], nil, 9, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.rightchatborderx end, function(_, value) E.db.ElvUI_EltreumUI.borders.rightchatborderx = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.chatborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.chat.args.rightchaty = ACH:Range(L["Right Chat Border Y offset"], nil, 10, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.rightchatbordery end, function(_, value) E.db.ElvUI_EltreumUI.borders.rightchatbordery = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.chatborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.chat.args.rightchatframeStrata = ACH:Select(L["Frame Strata"], nil, 11, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.rightchatstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.rightchatstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.chatborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.chat.args.rightchatframeLevel = ACH:Range(L["Frame Level"], nil, 12, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.rightchatlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.rightchatlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.ElvUI_EltreumUI.borders.chatborder end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders = ACH:Group(L["DataBars"], nil, 2, nil,nil,nil,function() return E.db.ElvUI_EltreumUI.borders.borderautoadjust or not E.db.ElvUI_EltreumUI.borders.borders end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.description0 = ACH:Group(L["(All settings require a reload)"], nil, 1)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.description0.inline = true
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.description0.args.description1 = ACH:Description(L["Change the size of the borders:"], 2)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.description0.args.borderdatabarsize = ACH:Range(L["Databars Thickness"], nil, 3, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.databarsize end, function(_, value) E.db.ElvUI_EltreumUI.borders.databarsize = value ElvUI_EltreumUI:Borders() end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.experience = ACH:Group(L["Experience"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.experience.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.experiencebar end,function(_, value) E.db.ElvUI_EltreumUI.borders.experiencebar = value ElvUI_EltreumUI:Borders() end, function() return not E.db.databars.experience.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.experience.args.borderexperiencex = ACH:Range(L["Border X offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.experiencebarsizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.experiencebarsizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.databars.experience.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.experience.args.borderexperiencey = ACH:Range(L["Border Y offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.experiencebarsizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.experiencebarsizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.databars.experience.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.experience.args.experienceframeStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.experiencebarstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.experiencebarstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.databars.experience.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.experience.args.experienceframeLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.experiencebarlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.experiencebarlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.databars.experience.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.reputation = ACH:Group(L["Reputation"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.reputation.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.reputationbar end,function(_, value) E.db.ElvUI_EltreumUI.borders.reputationbar = value ElvUI_EltreumUI:Borders() end, function() return not E.db.databars.reputation.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.reputation.args.borderreputationx = ACH:Range(L["Border X offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.reputationbarsizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.reputationbarsizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.databars.reputation.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.reputation.args.borderreputationy = ACH:Range(L["Border Y offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.reputationbarsizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.reputationbarsizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.databars.reputation.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.reputation.args.reputationframeStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.reputationbarstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.reputationbarstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.databars.reputation.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.reputation.args.reputationframeLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.reputationbarlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.reputationbarlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.databars.reputation.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.threat = ACH:Group(L["Threat"], nil, 2,"tab")
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.threat.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.threatbar end,function(_, value) E.db.ElvUI_EltreumUI.borders.threatbar = value ElvUI_EltreumUI:Borders() end, function() return not E.db.databars.threat.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.threat.args.borderthreatx = ACH:Range(L["Border X offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.threatbarsizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.threatbarsizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.databars.threat.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.threat.args.borderthreaty = ACH:Range(L["Border Y offset"], nil, 2, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.threatbarsizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.threatbarsizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.databars.threat.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.threat.args.threatframeStrata = ACH:Select(L["Frame Strata"], nil, 3, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.threatbarstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.threatbarstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.databars.threat.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.databarsborders.args.threat.args.threatframeLevel = ACH:Range(L["Frame Level"], nil, 4, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.threatbarlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.threatbarlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.databars.threat.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.altpower = ACH:Group(L["Alternative Power"], nil, 2, nil,nil,nil,function() return E.db.ElvUI_EltreumUI.borders.borderautoadjust or not E.db.ElvUI_EltreumUI.borders.borders end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.altpower.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.altpowerbar end,function(_, value) E.db.ElvUI_EltreumUI.borders.altpowerbar = value ElvUI_EltreumUI:Borders() end, function() return not E.db.general.altPowerBar.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.altpower.args.borderthickness = ACH:Range(L["Alternative Power Thickness"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.altpowerbarsize end, function(_, value) E.db.ElvUI_EltreumUI.borders.altpowerbarsize = value ElvUI_EltreumUI:Borders() end, function() return not E.db.general.altPowerBar.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.altpower.args.borderaltpowerx = ACH:Range(L["Border X offset"], nil, 3, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.altpowerbarsizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.altpowerbarsizex = value ElvUI_EltreumUI:Borders() end, function() return not E.db.general.altPowerBar.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.altpower.args.borderaltpowery = ACH:Range(L["Border Y offset"], nil, 3, BorderOffsetSize, "full", function() return E.db.ElvUI_EltreumUI.borders.altpowerbarsizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.altpowerbarsizey = value ElvUI_EltreumUI:Borders() end, function() return not E.db.general.altPowerBar.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.altpower.args.altpowerframeStrata = ACH:Select(L["Frame Strata"], nil, 4, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.altpowerbarstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.altpowerbarstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.db.general.altPowerBar.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.altpower.args.altpowerframeLevel = ACH:Range(L["Frame Level"], nil, 5, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.altpowerbarlevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.altpowerbarlevel = value ElvUI_EltreumUI:Borders() end, function() return not E.db.general.altPowerBar.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.tooltip = ACH:Group(E.NewSign..L["Tooltip"], nil, 2, nil,nil,nil,function() return E.db.ElvUI_EltreumUI.borders.borderautoadjust or not E.db.ElvUI_EltreumUI.borders.borders end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.tooltip.args.enable = ACH:Toggle(L["Enable"], nil, 1, nil, false,"full",function() return E.db.ElvUI_EltreumUI.borders.tooltipborders end,function(_, value) E.db.ElvUI_EltreumUI.borders.tooltipborders = value ElvUI_EltreumUI:Borders() end, function() return not E.private.tooltip.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.tooltip.args.tooltipthickness = ACH:Range(L["Thickness"], nil, 2, { min = 1, max = 200, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.tooltipsize end, function(_, value) E.db.ElvUI_EltreumUI.borders.tooltipsize = value ElvUI_EltreumUI:Borders() end, function() return not E.private.tooltip.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.tooltip.args.tooltipx = ACH:Range(L["Border X offset"], nil, 3, { min = -300, max = 300, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.tooltipsizex end, function(_, value) E.db.ElvUI_EltreumUI.borders.tooltipsizex = value ElvUI_EltreumUI:Borders() end, function() return not E.private.tooltip.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.tooltip.args.tooltipy = ACH:Range(L["Border Y offset"], nil, 3, { min = -300, max = 300, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.borders.tooltipsizey end, function(_, value) E.db.ElvUI_EltreumUI.borders.tooltipsizey = value ElvUI_EltreumUI:Borders() end, function() return not E.private.tooltip.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.tooltip.args.tooltipframeStrata = ACH:Select(L["Frame Strata"], nil, 4, FrameStrataLevels, false, "full",function() return E.db.ElvUI_EltreumUI.borders.tooltipstrata end, function(_, value) E.db.ElvUI_EltreumUI.borders.tooltipstrata = value ElvUI_EltreumUI:Borders() end, function() return not E.private.tooltip.enable end)
	ElvUI_EltreumUI.Options.args.borders.args.otherborder.args.tooltip.args.tooltipframeLevel = ACH:Range(L["Frame Level"], nil, 5, FrameLevels, "full", function() return E.db.ElvUI_EltreumUI.borders.tooltiplevel end, function(_, value) E.db.ElvUI_EltreumUI.borders.tooltiplevel = value ElvUI_EltreumUI:Borders() end, function() return not E.private.tooltip.enable end)

	--combat music
	ElvUI_EltreumUI.Options.args.combatmusic = ACH:Group(E:TextGradient(L["Combat Music"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Play custom music during fights and boss fights"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.combatmusic.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\music'
	ElvUI_EltreumUI.Options.args.combatmusic.args.combat = ACH:Group(L["Combat Music"], nil, 1)
	ElvUI_EltreumUI.Options.args.combatmusic.args.combat.args.enable = ACH:Toggle(L["Enable Combat Music"], L["Enable music during combat"], 4, nil, false,"full",function() return E.private.ElvUI_EltreumUI.combatmusic.enable end,function(_, value) E.private.ElvUI_EltreumUI.combatmusic.enable = value E:StaticPopup_Show('PRIVATE_RL') end)
	ElvUI_EltreumUI.Options.args.combatmusic.args.combat.args.disableinstance = ACH:Toggle(L["Disable Combat Music in Instances"], L["Disable music during combat in instances"], 5, nil, false,"full",function() return E.private.ElvUI_EltreumUI.combatmusic.disableinstance end,function(_, value) E.private.ElvUI_EltreumUI.combatmusic.disableinstance = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.combatmusic.enable end)
	ElvUI_EltreumUI.Options.args.combatmusic.args.combat.args.description1 = ACH:Description(L["Normal Combat Music"], 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.combatmusic.args.combat.args.filepath = ACH:Group(L["Name of file inside Interface\\Addons"], nil, 7)
	ElvUI_EltreumUI.Options.args.combatmusic.args.combat.args.filepath.inline = true
	ElvUI_EltreumUI.Options.args.combatmusic.args.combat.args.filepath.args.description1 = ACH:Description(L["Example: "].."mymusic.mp3", 1)
	ElvUI_EltreumUI.Options.args.combatmusic.args.combat.args.filepath.args.shuffle = ACH:Toggle(L["Shuffle"], L["Randomize Music Order"], 2, nil, false,"full",function() return E.db.ElvUI_EltreumUI.otherstuff.musicshuffle end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.musicshuffle = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.combatmusic.enable end)
	ElvUI_EltreumUI.Options.args.combatmusic.args.combat.args.filepath.args.input = ACH:Input("", "", 3, false, "full", function() return E.private.ElvUI_EltreumUI.combatmusic.musicfile end, function(_, value) E.private.ElvUI_EltreumUI.combatmusic.musicfile = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.combatmusic.enable end, E.db.ElvUI_EltreumUI.otherstuff.musicshuffle)
	ElvUI_EltreumUI.Options.args.combatmusic.args.combat.args.filepath.args.inputshuffle = ACH:Input(L["Shuffle List"], L["Split files with a comma, such as: file1.mp3,file2.mp3"], 3, false, "full", function() return E.private.ElvUI_EltreumUI.combatmusic.shufflelist end, function(_, value) E.private.ElvUI_EltreumUI.combatmusic.shufflelist = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.combatmusic.enable end, not E.db.ElvUI_EltreumUI.otherstuff.musicshuffle)
	ElvUI_EltreumUI.Options.args.combatmusic.args.boss = ACH:Group(L["Boss Music"], nil, 2)
	ElvUI_EltreumUI.Options.args.combatmusic.args.boss.args.enable = ACH:Toggle(L["Enable Boss Music"], L["Enable music during combat"], 4, nil, false,"full",function() return E.private.ElvUI_EltreumUI.combatmusic.bossmusic end,function(_, value) E.private.ElvUI_EltreumUI.combatmusic.bossmusic = value E:StaticPopup_Show('PRIVATE_RL') end)
	ElvUI_EltreumUI.Options.args.combatmusic.args.boss.args.description1 = ACH:Description(L["Boss Combat Music"], 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.combatmusic.args.boss.args.filepath = ACH:Group(L["Name of file inside Interface\\Addons"], nil, 7)
	ElvUI_EltreumUI.Options.args.combatmusic.args.boss.args.filepath.inline = true
	ElvUI_EltreumUI.Options.args.combatmusic.args.boss.args.filepath.args.description1 = ACH:Description(L["Example: "].."mymusic.mp3", 1)
	ElvUI_EltreumUI.Options.args.combatmusic.args.boss.args.filepath.args.input = ACH:Input("", "", 3, false, "full", function() return E.private.ElvUI_EltreumUI.combatmusic.bossfile end, function(_, value) E.private.ElvUI_EltreumUI.combatmusic.bossfile = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.combatmusic.bossmusic end)

	--cooldown
	ElvUI_EltreumUI.Options.args.cooldown = ACH:Group(E:TextGradient(L["Cooldown"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Show a pulsing cooldown and let it speak the spell name"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.cooldown.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\cooldown'
	ElvUI_EltreumUI.Options.args.cooldown.args.description1 = ACH:Description(L["Cooldown"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cooldown.args.enable = ACH:Toggle(L["Enable Cooldown Pulse"], L["Show a Skill Pulse when its cooldown is ending"], 2, nil, false,'full',function() return E.db.ElvUI_EltreumUI.skins.doom.enable end,function(_, value) E.db.ElvUI_EltreumUI.skins.doom.enable = value ElvUI_EltreumUI:Doom() E:StaticPopup_Show('PRIVATE_RL') end)
	ElvUI_EltreumUI.Options.args.cooldown.args.showSpellName = ACH:Toggle(L["Show Spell Name"], L["Displays a Text with the name of the spell"], 3, nil, false,'full',function() return E.db.ElvUI_EltreumUI.skins.doom.showSpellName end,function(_, value) E.db.ElvUI_EltreumUI.skins.doom.showSpellName = value ElvUI_EltreumUI:Doom() E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.doom.enable end)
	ElvUI_EltreumUI.Options.args.cooldown.args.pet = ACH:Toggle(L["Show Pet Spells"], nil, 3, nil, false,'full',function() return E.db.ElvUI_EltreumUI.skins.doom.pet end,function(_, value) E.db.ElvUI_EltreumUI.skins.doom.pet = value ElvUI_EltreumUI:Doom() E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.doom.enable end)
	ElvUI_EltreumUI.Options.args.cooldown.args.fadeInTime = ACH:Range(L["Fade In Time"], L["Time it takes for the icon to fade in"], 4, { min = 0, max = 5, step = 0.1 }, nil, function() return E.db.ElvUI_EltreumUI.skins.doom.fadeInTime end, function(_, value) E.db.ElvUI_EltreumUI.skins.doom.fadeInTime = value end, function() return not E.db.ElvUI_EltreumUI.skins.doom.enable end)
	ElvUI_EltreumUI.Options.args.cooldown.args.fadeOutTime = ACH:Range(L["Fade Out Time"], L["Time it takes for the icon to fade out"], 4, { min = 0, max = 5, step = 0.1 }, nil, function() return E.db.ElvUI_EltreumUI.skins.doom.fadeOutTime end, function(_, value) E.db.ElvUI_EltreumUI.skins.doom.fadeOutTime = value end, function() return not E.db.ElvUI_EltreumUI.skins.doom.enable end)
	ElvUI_EltreumUI.Options.args.cooldown.args.maxAlpha = ACH:Range(L["Alpha"], L["Transparency of the Icon"], 4, { min = 0, max = 1, step = 0.01 }, nil, function() return E.db.ElvUI_EltreumUI.skins.doom.maxAlpha end, function(_, value) E.db.ElvUI_EltreumUI.skins.doom.maxAlpha = value end, function() return not E.db.ElvUI_EltreumUI.skins.doom.enable end)
	ElvUI_EltreumUI.Options.args.cooldown.args.animScale = ACH:Range(L["Animation Scale"], L["Animation will scale to this size"], 4, { min = 0, max = 15, step = 0.1 }, nil, function() return E.db.ElvUI_EltreumUI.skins.doom.animScale end, function(_, value) E.db.ElvUI_EltreumUI.skins.doom.animScale = value end, function() return not E.db.ElvUI_EltreumUI.skins.doom.enable end)
	ElvUI_EltreumUI.Options.args.cooldown.args.iconSize = ACH:Range(L["Icon Size"], L["Size of the Icon"], 4, { min = 6, max = 200, step = 0.1 }, nil, function() return E.db.ElvUI_EltreumUI.skins.doom.iconSize end, function(_, value) E.db.ElvUI_EltreumUI.skins.doom.iconSize = value end, function() return not E.db.ElvUI_EltreumUI.skins.doom.enable end)
	ElvUI_EltreumUI.Options.args.cooldown.args.holdTime = ACH:Range(L["Hold Time"], L["How long the Icon will appear"], 4, { min = 0, max = 5, step = 0.1 }, nil, function() return E.db.ElvUI_EltreumUI.skins.doom.holdTime end, function(_, value) E.db.ElvUI_EltreumUI.skins.doom.holdTime = value end, function() return not E.db.ElvUI_EltreumUI.skins.doom.enable end)
	ElvUI_EltreumUI.Options.args.cooldown.args.graceperiod = ACH:Range(L["Minimum Cooldown Length"], L["Cooldowns must be longer than this to show up"], 4, { min = 0, max = 120, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.skins.doom.graceperiod end, function(_, value) E.db.ElvUI_EltreumUI.skins.doom.graceperiod = value end, function() return not E.db.ElvUI_EltreumUI.skins.doom.enable end)
	ElvUI_EltreumUI.Options.args.cooldown.args.gracelimit = ACH:Range(L["Maximum Cooldown Length"], L["Cooldowns must be shorter than this to show up"], 4, { min = 0, max = 3601, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.skins.doom.gracelimit end, function(_, value) E.db.ElvUI_EltreumUI.skins.doom.gracelimit = value end, function() return not E.db.ElvUI_EltreumUI.skins.doom.enable end)
	ElvUI_EltreumUI.Options.args.cooldown.args.useignore = ACH:Toggle(L["Enable ignoring Spells"], nil, 5, nil, false,'full',function() return E.db.ElvUI_EltreumUI.skins.doom.ignoring end,function(_, value) E.db.ElvUI_EltreumUI.skins.doom.ignoring = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.doom.enable or E.db.ElvUI_EltreumUI.skins.doom.allowing end)
	ElvUI_EltreumUI.Options.args.cooldown.args.doomignored = ACH:Input(L["Ignored Spells, use a comma to separate spells"].." ("..L["Add SpellID"]..")", L["List of spells ignored, use a comma to separate spells"], 6, false, "full", function() return E.private.ElvUI_EltreumUI.doomignored end, function(_, value) E.private.ElvUI_EltreumUI.doomignored = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.doom.enable or not E.db.ElvUI_EltreumUI.skins.doom.ignoring or E.db.ElvUI_EltreumUI.skins.doom.allowing end)
	ElvUI_EltreumUI.Options.args.cooldown.args.useallowed = ACH:Toggle(L["Enable only for listed Spells"], nil, 7, nil, false,'full',function() return E.db.ElvUI_EltreumUI.skins.doom.allowing end,function(_, value) E.db.ElvUI_EltreumUI.skins.doom.allowing = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.doom.enable or E.db.ElvUI_EltreumUI.skins.doom.ignoring end)
	ElvUI_EltreumUI.Options.args.cooldown.args.doomallowed = ACH:Input(L["Allowed Spells, use a comma to separate spells"].." ("..L["Add SpellID"]..")", L["List of spells allowed, use a comma to separate spells"], 8, false, "full", function() return E.private.ElvUI_EltreumUI.doomallowed end, function(_, value) E.private.ElvUI_EltreumUI.doomallowed = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.doom.enable or not E.db.ElvUI_EltreumUI.skins.doom.allowing or E.db.ElvUI_EltreumUI.skins.doom.ignoring end)
	ElvUI_EltreumUI.Options.args.cooldown.args.description2 = ACH:Description(L["Text to Speech"], 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cooldown.args.ttsvoicetoggle = ACH:Toggle(L["Enable"], nil, 10, nil, false,'full',function() return E.db.ElvUI_EltreumUI.skins.doom.tts end,function(_, value) E.db.ElvUI_EltreumUI.skins.doom.tts = value ElvUI_EltreumUI:Doom() end, function() return not E.db.ElvUI_EltreumUI.skins.doom.enable end)
	ElvUI_EltreumUI.Options.args.cooldown.args.ttsvoiceselect = ACH:Select(L["Text to Speech Config"], nil, 11, function()
		local Voices = {}
		for _, v in pairs(C_VoiceChat.GetTtsVoices()) do
			--Voices[i] = v.name
			Voices[v.voiceID] = v.name
		end
		return Voices
	end, false, "full", function() return E.db.ElvUI_EltreumUI.skins.doom.ttsvoice end, function(_, value) E.db.ElvUI_EltreumUI.skins.doom.ttsvoice = tonumber(value) C_VoiceChat.SpeakText(E.db.ElvUI_EltreumUI.skins.doom.ttsvoice, TEXT_TO_SPEECH, Enum.VoiceTtsDestination.LocalPlayback, 0, E.db.ElvUI_EltreumUI.skins.doom.ttsvolume) end, function() return not E.db.ElvUI_EltreumUI.skins.doom.enable or not E.db.ElvUI_EltreumUI.skins.doom.tts end)
	ElvUI_EltreumUI.Options.args.cooldown.args.volume = ACH:Range(VOLUME, nil, 12, { min = 0, max = 100, step = 1 }, 'full', function() return E.db.ElvUI_EltreumUI.skins.doom.ttsvolume end, function(_, value) E.db.ElvUI_EltreumUI.skins.doom.ttsvolume = value end, function() return not E.db.ElvUI_EltreumUI.skins.doom.enable or not E.db.ElvUI_EltreumUI.skins.doom.tts end)
	ElvUI_EltreumUI.Options.args.cooldown.args.description3 = ACH:Description(PREVIEW, 13, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cooldown.args.preview = ACH:Execute(PREVIEW, nil, 14, function() ElvUI_EltreumUI:PreviewDoom() end,nil,false,'full')

	--cvars
	ElvUI_EltreumUI.Options.args.cvars = ACH:Group(E:TextGradient(L["CVars"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Customize Blizzard's Hidden Settings"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.cvars.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\cvar'
	ElvUI_EltreumUI.Options.args.cvars.args.general = ACH:Group(L["General"], nil, 1)
	ElvUI_EltreumUI.Options.args.cvars.args.general.args.description1 = ACH:Description(L["Setup CVars"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cvars.args.general.args.generalVars = ACH:Execute(L["General CVars"], nil, 2, function() ElvUI_EltreumUI:SetupCVars() ElvUI_EltreumUI:NameplateCVars() end,nil,true, "full")
	ElvUI_EltreumUI.Options.args.cvars.args.general.args.description2 = ACH:Description(L["It will set these CVars:"], 3, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.cvars.args.general.args.cvarlist = ACH:Description('- autoLootDefault 1\n- ShowClassColorInFriendlyNameplate 1\n- removeChatDelay 1\n- autoQuestWatch 1\n- cameraDistanceMaxZoomFactor 2.6\n- nameplateLargerScale 1.2\n- nameplateMaxDistance 60\n- nameplateMinAlpha 1\n- nameplateMinScale 1\n- nameplateMotion 1\n- nameplateOccludedAlphaMult 0\n- nameplateOverlapH 0.8\n- nameplateOverlapV 1.1\n- nameplateSelectedScale 1\n- nameplateSelfAlpha 1\n- nameplateShowFriendlyMinions 0\n- nameplateOtherBottomInset 0.02\n- nameplateOtherTopInset 0.1\n- nameplateTargetRadialPosition 1\n- nameplateTargetBehindMaxDistance 40\n- nameplateShowEnemies 1\n- nameplateShowFriends 1\n- UnitNameEnemyGuardianName 0\n- UnitNameEnemyMinionName 0\n- UnitNameEnemyPetName 0\n- UnitNameEnemyPlayerName 1\n- UnitNameEnemyTotemName 1\n- UnitNameFriendlyPetName 0\n- UnitNameNPC 1\n- statusTextDisplay BOTH\n- screenshotQuality 10\n- chatMouseScroll 1\n- wholeChatWindowClickable 0\n- showTutorials 0\n- UberTooltips 1\n- alwaysCompareItems 0\n- allowCompareWithToggle 1\n- instantQuestText 1\nmaxFPSLoading 30\n- autoLootRate 1\n- showQuestTrackingTooltips 1\n- lootUnderMouse 1\n- equipmentManager 1\n- previewTalents 1\n- WorldTextMinSize 6', 4, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars = ACH:Group(L["Other CVars"], nil, 2)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.combattext = ACH:Group(L["Combat Text"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.combattext.args.description1 = ACH:Description(L["Blizzard Floating Combat Text"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.combattext.args.blizzcombatexttoggle = ACH:Toggle(L["Disable Combat Text"], L["Enable or disable Blizzard's default Floating Combat Text"], 2, nil, false,'full',function() return E.db.ElvUI_EltreumUI.otherstuff.blizzcombattext end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.blizzcombattext = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.combattext.args.blizzcombatextmana = ACH:Toggle(L["Enable Resource Gains"], L["Enable or disable Blizzard's default Floating Combat Text for Mana/Rage/Energy and other resouces"], 3, nil, false,'full',function() return E.db.ElvUI_EltreumUI.otherstuff.blizzcombatmana end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.blizzcombatmana = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.combattext.args.restorecvars = ACH:Execute(L["Restore All Blizzard Combat Text"], nil, 4, function() ElvUI_EltreumUI:RestoreBlizzCombatText() E:StaticPopup_Show('CONFIG_RL') end,nil,true, "full")
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.combattext.args.description2 = ACH:Description(L["Change the Scale of the World Text"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.combattext.args.worldtextscale = ACH:Range(L["Select the size of the World Text"], nil, 6, { min = 0.2, max = 2, step = 0.1 }, 'full', function() return E.db.ElvUI_EltreumUI.otherstuff.worldtextscale end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.worldtextscale = value ElvUI_EltreumUI:WorldTextScale(value) end)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.camera = ACH:Group(L["Camera"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.camera.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.camera.args.cameraFOV = ACH:Range(L["Camera Field of View"], L["This allows you to zoom out further with the camera to increase the field of view."], 2, { min = 50, max = 90, step = 1 }, 'full', function() return E.db.ElvUI_EltreumUI.cvars.cameraFOV end, function(_, value) E.db.ElvUI_EltreumUI.cvars.cameraFOV = value SetCVar('camerafov', value) end, nil)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.camera.args.cameraDistanceMaxZoomFactor = ACH:Range(L["Camera Distance Max Zoom Factor"], L["Maximum Camera Zoom Out"], 2, { min = 1, max = function() if not (E.Cata or E.Classic) then return 2.6 else return 4 end end, step = 0.1 }, 'full', function() return E.db.ElvUI_EltreumUI.cvars.cameraDistanceMaxZoomFactor end, function(_, value) E.db.ElvUI_EltreumUI.cvars.cameraDistanceMaxZoomFactor = value SetCVar('cameraDistanceMaxZoomFactor', value) end)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.nameplates = ACH:Group(L["Nameplates"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.nameplates.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.nameplates.args.SoftTargetInteract = ACH:Toggle(L["Soft Target Interact"], L["Enable Soft Target Interactions"], 2, nil, false,'full',
			function()
				if GetCVar('SoftTargetInteract') == '0' then
					return false
				elseif GetCVar('SoftTargetInteract') == '3' then
					return true
				end
			end, function(_, value)
				if value == true then
					SetCVar('SoftTargetInteract', 3)
					SetCVar('SoftTargetIconInteract', 1)
					SetCVar('SoftTargetIconGameObject', 1)
					SetCVar('SoftTargetNameplateInteract', 1)
					SetCVar('SoftTargetLowPriorityIcons', 1)
					SetCVar('SoftTargetIconEnemy', 0)
					SetCVar('SoftTargetIconFriend', 0)
				else
					SetCVar('SoftTargetInteract', 0)
					SetCVar('SoftTargetIconInteract', 0)
					SetCVar('SoftTargetIconGameObject', 0)
					SetCVar('SoftTargetNameplateInteract', 0)
					SetCVar('SoftTargetLowPriorityIcons', 0)
					SetCVar('SoftTargetIconEnemy', 0)
					SetCVar('SoftTargetIconFriend', 0)
				end
			end, nil)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.nameplates.args.description2 = ACH:Description(" ", 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.nameplates.args.nameplateTargetRadialPosition = ACH:Select(L["Nameplate Target Radial Position"], L["When target is off screen, position its nameplate radially around sides and bottom."], 4, {
		["1"] = L["Target Only"],
		["2"] = L["All in Combat"],
	}, false, nil, function() return GetCVar('nameplateTargetRadialPosition') end, function(_, value) E.db.ElvUI_EltreumUI.cvars.nameplateTargetRadialPosition = value SetCVar('nameplateTargetRadialPosition', value) end)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.nameplates.args.nameplateTargetRadialPosition.style = "radio"
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.nameplates.args.description3 = ACH:Description(" ", 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.nameplates.args.nameplateOtherBottomInset = ACH:Range(L["Nameplate Other Bottom Inset"], L["In screen % the inset from the Bottom"], 6, { min = 0.01, max = 1, step = 0.01 }, 'full', function() return E.db.ElvUI_EltreumUI.cvars.nameplateOtherBottomInset end, function(_, value) E.db.ElvUI_EltreumUI.cvars.nameplateOtherBottomInset = value SetCVar('nameplateOtherBottomInset', value) SetCVar('nameplateLargeBottomInset', value) end)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.nameplates.args.nameplateOtherTopInset = ACH:Range(L["Nameplate Other Top Inset"], L["In screen % the inset from the Top"], 6, { min = 0.01, max = 1, step = 0.01 }, 'full', function() return E.db.ElvUI_EltreumUI.cvars.nameplateOtherTopInset end, function(_, value) E.db.ElvUI_EltreumUI.cvars.nameplateOtherTopInset = value SetCVar('nameplateOtherTopInset', value) SetCVar('nameplateLargeTopInset', value) end)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.nameplates.args.nameplateOccludedAlphaMult = ACH:Range(L["Nameplate Occluded Alpha"], L["Alpha of Nameplates out of Sight"], 7, { min = 0, max = 1, step = 0.01 }, 'full', function() return E.db.ElvUI_EltreumUI.cvars.nameplateOccludedAlphaMult end, function(_, value) E.db.ElvUI_EltreumUI.cvars.nameplateOccludedAlphaMult = value SetCVar('nameplateOccludedAlphaMult', value) end)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.nameplates.args.nameplateGlobalScale = ACH:Range(L["Nameplate Global Scale"], L["Global Scaling of nameplates after selected, min, and max scale"], 7, { min = 0.1, max = 10, step = 0.01 }, 'full', function() return tonumber(GetCVar('nameplateGlobalScale')) end, function(_, value) SetCVar('nameplateGlobalScale', value) end)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.nameplates.args.description4 = ACH:Description(" ", 8, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.nameplates.args.clampTargetNameplateToScreen = ACH:Toggle(L["Clamp Nameplates"], nil, 9, nil, false,'full',
			function()
				if GetCVar('clampTargetNameplateToScreen') == '0' then
					return false
				elseif GetCVar('clampTargetNameplateToScreen') == '1' then
					return true
				end
			end, function(_, value)
				if value == true then
					SetCVar('clampTargetNameplateToScreen', 1)
					E.db.ElvUI_EltreumUI.cvars.clampTargetNameplateToScreen = 1
				else
					SetCVar('clampTargetNameplateToScreen', 0)
					E.db.ElvUI_EltreumUI.cvars.clampTargetNameplateToScreen = 0
				end
			end, nil, E.Retail)

	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.graphics = ACH:Group(L["Graphics"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.graphics.args.description1 = ACH:Description(L["AMD FSR"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.graphics.args.forceFSRon = ACH:Toggle(L["Enable AMD FSR even if not scaling"], L["Forces AMD's FSR to sharpen image even if you aren't running a lower resolution"], 2, nil, false,'full',
			function()
				if GetCVar('ResampleAlwaysSharpen') == '0' then
					return false
				elseif GetCVar('ResampleAlwaysSharpen') == '1' then
					return true
				end
			end, function(_, value)
				if value == true then
					SetCVar('ResampleAlwaysSharpen', 1)
				else
					SetCVar('ResampleAlwaysSharpen', 0)
				end
			end)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.graphics.args.forceFSRsharpness = ACH:Range(RESAMPLE_QUALITY_FSR, nil, 3, { min = 0, max = 2, step = 0.1 }, 'full', function() return tonumber(GetCVar('ResampleSharpness')) end, function(_, value) SetCVar('ResampleSharpness', value) end, function() if GetCVar('ResampleAlwaysSharpen') == '1' then return false elseif GetCVar('ResampleAlwaysSharpen') == '0' then return true end end)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.graphics.args.description2 = ACH:Description(LOW_LATENCY_MODE, 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.graphics.args.lowlatencycvar = ACH:Select(" ",OPTION_TOOLTIP_LOW_LATENCY_MODE, 5, {
		["0"] = VIDEO_OPTIONS_DISABLED,
		["1"] = VIDEO_OPTIONS_BUILTIN,
		["2"] = VIDEO_OPTIONS_NVIDIA_REFLEX,
		--["3"] = VIDEO_OPTIONS_NVIDIA_REFLEX_BOOST,
	}, false, nil, function() return GetCVar('LowLatencyMode') end, function(_, value) local number = tonumber(value) SetCVar('LowLatencyMode', number) end, nil)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.graphics.args.lowlatencycvar.style = "radio"
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.graphics.args.description3 = ACH:Description(L["Dynamic Render Scale"], 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.graphics.args.dynamicrenderscaleenable = ACH:Toggle(L["Lowers render scale if GPU bound to hit Target FPS."], L["Note this feature is in BETA.\nKnown issues:\n - May cause hitching.\n - May behave poorly with vsync on."], 7, nil, false,'full',
			function()
				if GetCVar('DynamicRenderScale') == '0' then
					return false
				elseif GetCVar('DynamicRenderScale') == '1' then
					return true
				end
			end, function(_, value)
				if value == true then
					SetCVar('DynamicRenderScale', 1)
				else
					SetCVar('DynamicRenderScale', 0)
				end
			end)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.graphics.args.dynamicrenderscaleenable.descStyle = "inline"
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.graphics.args.dynamicrenderscalepercentage = ACH:Range(L["Dynamic Render Scale Minimum"], L["Lowest Render Scale used"], 8, { min = 0.1, max = 1, step = 0.01 }, 'full', function() return tonumber(GetCVar('DynamicRenderScaleMin')) end, function(_, value) SetCVar('DynamicRenderScaleMin', tonumber(value)) E.db.ElvUI_EltreumUI.cvars.dynamicrenderscalemin = tonumber(value) end, function() if GetCVar('DynamicRenderScale') == '1' then return false elseif GetCVar('DynamicRenderScale') == '0' then return true end end)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.graphics.args.description4 = ACH:Description("", 19, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.graphics.args.preloadNonCritical = ACH:Toggle(_G.DISABLE.." ".."worldPreloadNonCritical", L["Disable the worldPreloadNonCritical CVar, doing so can improve loading times."], 20, nil, false,'full',
			function()
				if GetCVar('worldPreloadNonCritical') == '2' then
					return false
				elseif GetCVar('worldPreloadNonCritical') == '0' then
					return true
				else
					return false
				end
			end, function(_, value)
				if value == true then
					SetCVar('worldPreloadNonCritical', 0)
				else
					SetCVar('worldPreloadNonCritical', 2)
				end
			end)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.misc = ACH:Group(L["Misc"], nil, 2, "tab", nil,nil,nil,not E.Retail)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.misc.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.cvars.args.othercvars.args.misc.args.showInGameNavigation = ACH:Toggle(SHOW_IN_GAME_NAVIGATION, nil, 2, nil, false,"full",
			function()
				if GetCVar('showInGameNavigation') == '0' then
					return false
				elseif GetCVar('showInGameNavigation') == '1' then
					return true
				end
			end, function(_, value)
				if value == true then
					SetCVar('showInGameNavigation', 1)
					E.db.ElvUI_EltreumUI.cvars.showInGameNavigation = 1
				else
					SetCVar('showInGameNavigation', 0)
					E.db.ElvUI_EltreumUI.cvars.showInGameNavigation = 0
				end
			end, nil, not E.Retail)

	--custom glow
	ElvUI_EltreumUI.Options.args.customglow = ACH:Group(E:TextGradient(L["Custom Glow"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Fully customize how action bars glow and add glows to debuffs on unitframes"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.customglow.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\customglow'
	ElvUI_EltreumUI.Options.args.customglow.args.general = ACH:Group(L["General"], nil, 1)
	ElvUI_EltreumUI.Options.args.customglow.args.general.args.description1 = ACH:Description(L["Replace Blizzards Default Glow with a Custom Glow"], 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.customglow.args.general.args.enableab = ACH:Toggle(L["Enable on Action Bars"], nil, 4, nil, false,"full",function() return E.db.ElvUI_EltreumUI.glow.enable end,function(_, value) E.db.ElvUI_EltreumUI.glow.enable = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.customglow.args.general.args.enablepet = ACH:Toggle(L["Enable on Pet Bar"], nil, 4, nil, false,"full",function() return E.db.ElvUI_EltreumUI.glow.enablepet end,function(_, value) E.db.ElvUI_EltreumUI.glow.enablepet = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.customglow.args.general.args.enableuf = ACH:Toggle(L["Enable on Unitframes"], L["Add a glow when Unitframes have a debuff"], 4, nil, false,"full",function() return E.db.ElvUI_EltreumUI.glow.enableUFs end,function(_, value) E.db.ElvUI_EltreumUI.glow.enableUFs = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.customglow.args.general.args.enablenp = ACH:Toggle(L["Enable on Nameplate"], L["Add a glow when buffs or debuffs are expiring on nameplates"], 5, nil, false,"full",function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.npglow end,function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.npglow = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.customglow.args.general.args.debufftimer = ACH:Range(L["Debuff Timer"], L["Time at which the glow will start"], 6, { min = 1, max = 30, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.glow.numberdebuff end, function(_, value) E.db.ElvUI_EltreumUI.glow.numberdebuff = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.npglow end)
	ElvUI_EltreumUI.Options.args.customglow.args.general.args.description2 = ACH:Description(L["Shaman Totems"], 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.general.args.enableshamantotem = ACH:Toggle(L["Enable on Shaman Totems"], nil, 8, nil, false,"full",function() return E.db.ElvUI_EltreumUI.glow.enabletotem end,function(_, value) E.db.ElvUI_EltreumUI.glow.enabletotem = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.glow.enable end, E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.general.args.enableshamantotem1 = ACH:Toggle(L["Enable on Shaman Fire Totem"], nil, 9, nil, false,"full",function() return E.db.ElvUI_EltreumUI.glow.totem1 end,function(_, value) E.db.ElvUI_EltreumUI.glow.totem1 = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.glow.enable or not E.db.ElvUI_EltreumUI.glow.enabletotem end, E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.general.args.enableshamantotem2 = ACH:Toggle(L["Enable on Shaman Earth Totem"], nil, 9, nil, false,"full",function() return E.db.ElvUI_EltreumUI.glow.totem2 end,function(_, value) E.db.ElvUI_EltreumUI.glow.totem2 = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.glow.enable or not E.db.ElvUI_EltreumUI.glow.enabletotem end, E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.general.args.enableshamantotem3 = ACH:Toggle(L["Enable on Shaman Water Totem"], nil, 9, nil, false,"full",function() return E.db.ElvUI_EltreumUI.glow.totem3 end,function(_, value) E.db.ElvUI_EltreumUI.glow.totem3 = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.glow.enable or not E.db.ElvUI_EltreumUI.glow.enabletotem end, E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.general.args.enableshamantotem4 = ACH:Toggle(L["Enable on Shaman Air Totem"], nil, 9, nil, false,"full",function() return E.db.ElvUI_EltreumUI.glow.totem4 end,function(_, value) E.db.ElvUI_EltreumUI.glow.totem4 = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.glow.enable or not E.db.ElvUI_EltreumUI.glow.enabletotem end, E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.general.args.description3 = ACH:Description(" ", 10, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	--ElvUI_EltreumUI.Options.args.customglow.args.general.args.autocast = ACH:Toggle(L["Autocast"], L["Adds an autocast style glow using class color"], 11, nil, false,"full",function() return E.db.ElvUI_EltreumUI.glow.autocast end,function(_, value) E.db.ElvUI_EltreumUI.glow.autocast = value end, function() return not (E.db.ElvUI_EltreumUI.glow.enable or E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.npglow or E.db.ElvUI_EltreumUI.glow.enablepet or E.db.ElvUI_EltreumUI.glow.enableUFs) or E.db.ElvUI_EltreumUI.glow.pixel or E.db.ElvUI_EltreumUI.glow.blizzard end)
	--ElvUI_EltreumUI.Options.args.customglow.args.general.args.pixel = ACH:Toggle(L["Pixel"], L["Adds a pixel style glow using class color"], 11, nil, false,"full",function() return E.db.ElvUI_EltreumUI.glow.pixel end,function(_, value) E.db.ElvUI_EltreumUI.glow.pixel = value end, function() return not (E.db.ElvUI_EltreumUI.glow.enable or E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.npglow or E.db.ElvUI_EltreumUI.glow.enablepet or E.db.ElvUI_EltreumUI.glow.enableUFs) or E.db.ElvUI_EltreumUI.glow.autocast or E.db.ElvUI_EltreumUI.glow.blizzard end)
	--ElvUI_EltreumUI.Options.args.customglow.args.general.args.blizzard = ACH:Toggle(L["Blizzard"], L["Adds an autocast style glow using class color"], 11, nil, false,"full",function() return E.db.ElvUI_EltreumUI.glow.blizzard end,function(_, value) E.db.ElvUI_EltreumUI.glow.blizzard = value end, function() return not (E.db.ElvUI_EltreumUI.glow.enable or E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.npglow or E.db.ElvUI_EltreumUI.glow.enablepet or E.db.ElvUI_EltreumUI.glow.enableUFs) or E.db.ElvUI_EltreumUI.glow.autocast or E.db.ElvUI_EltreumUI.glow.pixel end)
	local procoptions = {
		["autocast"] = L["Autocast"],
		["pixel"] = L["Pixel"],
		["blizzard"] = L["Blizzard"],
		["proc"] = L["Proc"],
	}
	if not E.Retail then
		procoptions = {
			["autocast"] = L["Autocast"],
			["pixel"] = L["Pixel"],
			["blizzard"] = L["Blizzard"],
		}
	end
	ElvUI_EltreumUI.Options.args.customglow.args.general.args.customselection = ACH:Select(L["Select a Type"], nil, 10, procoptions, false, nil, function()
		if E.db.ElvUI_EltreumUI.glow.autocast then
			return "autocast"
		elseif E.db.ElvUI_EltreumUI.glow.pixel then
			return "pixel"
		elseif E.db.ElvUI_EltreumUI.glow.blizzard then
			return "blizzard"
		elseif E.db.ElvUI_EltreumUI.glow.procglow then
			return "proc"
		end
	end,
			function(_,value)
				if value == "autocast" then
					E.db.ElvUI_EltreumUI.glow.autocast = true
					E.db.ElvUI_EltreumUI.glow.pixel = false
					E.db.ElvUI_EltreumUI.glow.blizzard = false
					E.db.ElvUI_EltreumUI.glow.procglow = false
				elseif value == "pixel" then
					E.db.ElvUI_EltreumUI.glow.autocast = false
					E.db.ElvUI_EltreumUI.glow.pixel = true
					E.db.ElvUI_EltreumUI.glow.blizzard = false
					E.db.ElvUI_EltreumUI.glow.procglow = false
				elseif value == "blizzard" then
					E.db.ElvUI_EltreumUI.glow.autocast = false
					E.db.ElvUI_EltreumUI.glow.pixel = false
					E.db.ElvUI_EltreumUI.glow.blizzard = true
					E.db.ElvUI_EltreumUI.glow.procglow = false
				elseif value == "proc" then
					E.db.ElvUI_EltreumUI.glow.autocast = false
					E.db.ElvUI_EltreumUI.glow.pixel = false
					E.db.ElvUI_EltreumUI.glow.blizzard = false
					E.db.ElvUI_EltreumUI.glow.procglow = true
				end
			end, function() return not (E.db.ElvUI_EltreumUI.glow.enable or E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.npglow or E.db.ElvUI_EltreumUI.glow.enablepet or E.db.ElvUI_EltreumUI.glow.enableUFs) end
	)
	ElvUI_EltreumUI.Options.args.customglow.args.general.args.customselection.style = "radio"
	ElvUI_EltreumUI.Options.args.customglow.args.general.args.description4 = ACH:Description(L["Preview the Glow"], 12, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.general.args.preview = ACH:Execute(PREVIEW, L["Preview the Glow, you will need to toggle it off and on to update the glow"], 13, function() ElvUI_EltreumUI:PreviewGlow() end,nil,false,'full')
	ElvUI_EltreumUI.Options.args.customglow.args.colors = ACH:Group(L["Glow Colors"], nil, 2,"tab",nil,nil,function() return not E.db.ElvUI_EltreumUI.glow.enable and not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.npglow and not E.db.ElvUI_EltreumUI.glow.enablepet and not E.db.ElvUI_EltreumUI.glow.enableUFs end)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.description1 = ACH:Description(L["Action Bars"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.classcolorab = ACH:Toggle(L["Use Class Colors"], L["Toggle Class Colored glows"], 2, nil, false,nil,function() return E.db.ElvUI_EltreumUI.glow.colorclass end,function(_, value) E.db.ElvUI_EltreumUI.glow.colorclass = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.glow.enable end)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.customcolorab = ACH:Color(L["Custom Color"], nil, 3, false, nil, function()
		local glowcustomcolor = E.db.ElvUI_EltreumUI.glow.glowcustomcolor
		local d = P.ElvUI_EltreumUI.glow.glowcustomcolor
		return glowcustomcolor.r, glowcustomcolor.g, glowcustomcolor.b, glowcustomcolor.a, d.r, d.g, d.b, d.a
	end,
			function(_, r, g, b)
				local glowcustomcolor = E.db.ElvUI_EltreumUI.glow.glowcustomcolor
				glowcustomcolor.r, glowcustomcolor.g, glowcustomcolor.b = r, g, b E:StaticPopup_Show('CONFIG_RL')
			end, function() return E.db.ElvUI_EltreumUI.glow.colorclass or not E.db.ElvUI_EltreumUI.glow.enable end)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.description2 = ACH:Description(L["Pet Bar"], 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.classcolorpet = ACH:Toggle(L["Use Class Colors"], L["Toggle Class Colored glows"], 5, nil, false,nil,function() return E.db.ElvUI_EltreumUI.glow.colorclasspet end,function(_, value) E.db.ElvUI_EltreumUI.glow.colorclasspet = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.glow.enablepet end)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.customcolorpet = ACH:Color(L["Custom Color"], nil, 6, false, nil, function()
		local glowcustomcolorpet = E.db.ElvUI_EltreumUI.glow.glowcustomcolorpet
		local d = P.ElvUI_EltreumUI.glow.glowcustomcolorpet
		return glowcustomcolorpet.r, glowcustomcolorpet.g, glowcustomcolorpet.b, glowcustomcolorpet.a, d.r, d.g, d.b, d.a
	end,
			function(_, r, g, b)
				local glowcustomcolorpet = E.db.ElvUI_EltreumUI.glow.glowcustomcolorpet
				glowcustomcolorpet.r, glowcustomcolorpet.g, glowcustomcolorpet.b = r, g, b E:StaticPopup_Show('CONFIG_RL')
			end, function() return E.db.ElvUI_EltreumUI.glow.colorclasspet or not E.db.ElvUI_EltreumUI.glow.enablepet end)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.description3 = ACH:Description(L["Nameplate Buff/Debuff"], 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.classcolornp = ACH:Toggle(L["Use Class Colors"], L["Toggle Class Colored glows"], 8, nil, false,nil,function() return E.db.ElvUI_EltreumUI.glow.colorclassnp end,function(_, value) E.db.ElvUI_EltreumUI.glow.colorclassnp = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.npglow end)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.customcolornp = ACH:Color(L["Custom Color"], nil, 9, false, nil, function()
		local glowcustomcolornp = E.db.ElvUI_EltreumUI.glow.glowcustomcolornp
		local d = P.ElvUI_EltreumUI.glow.glowcustomcolornp
		return glowcustomcolornp.r, glowcustomcolornp.g, glowcustomcolornp.b, glowcustomcolornp.a, d.r, d.g, d.b, d.a
	end,
			function(_, r, g, b)
				local glowcustomcolornp = E.db.ElvUI_EltreumUI.glow.glowcustomcolornp
				glowcustomcolornp.r, glowcustomcolornp.g, glowcustomcolornp.b = r, g, b E:StaticPopup_Show('CONFIG_RL')
			end, function() return E.db.ElvUI_EltreumUI.glow.colorclassnp or not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.npglow end)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.totem1 = ACH:Description(L["Shaman Fire Totem"], 10, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.totem1typecolor = ACH:Toggle(L["Use Type Colors"], L["Toggle Totem to use it's own Type Colors"], 11, nil, false,nil,function() return E.db.ElvUI_EltreumUI.glow.totemtypecolor end,function(_, value) E.db.ElvUI_EltreumUI.glow.totemtypecolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.glow.enable or not E.db.ElvUI_EltreumUI.glow.enabletotem end, E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.totem1customcolor = ACH:Color(L["Custom Color"], nil, 12, false, nil, function()
		local glowtotem1customcolor = E.db.ElvUI_EltreumUI.glow.glowtotem1customcolor
		local d = P.ElvUI_EltreumUI.glow.glowtotem1customcolor
		return glowtotem1customcolor.r, glowtotem1customcolor.g, glowtotem1customcolor.b, glowtotem1customcolor.a, d.r, d.g, d.b, d.a
	end,
			function(_, r, g, b)
				local glowtotem1customcolor = E.db.ElvUI_EltreumUI.glow.glowtotem1customcolor
				glowtotem1customcolor.r, glowtotem1customcolor.g, glowtotem1customcolor.b = r, g, b E:StaticPopup_Show('CONFIG_RL')
			end, function() return E.db.ElvUI_EltreumUI.glow.totemtypecolor or not E.db.ElvUI_EltreumUI.glow.enable or not E.db.ElvUI_EltreumUI.glow.enabletotem end, E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.totem2 = ACH:Description(L["Shaman Earth Totem"], 13, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.totem2typecolor = ACH:Toggle(L["Use Type Colors"], L["Toggle Totem to use it's own Type Colors"], 14, nil, false,nil,function() return E.db.ElvUI_EltreumUI.glow.totemtypecolor end,function(_, value) E.db.ElvUI_EltreumUI.glow.totemtypecolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.glow.enable or not E.db.ElvUI_EltreumUI.glow.enabletotem end, E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.totem2customcolor = ACH:Color(L["Custom Color"], nil, 15, false, nil, function()
		local glowtotem2customcolor = E.db.ElvUI_EltreumUI.glow.glowtotem2customcolor
		local d = P.ElvUI_EltreumUI.glow.glowtotem2customcolor
		return glowtotem2customcolor.r, glowtotem2customcolor.g, glowtotem2customcolor.b, glowtotem2customcolor.a, d.r, d.g, d.b, d.a
	end,
			function(_, r, g, b)
				local glowtotem2customcolor = E.db.ElvUI_EltreumUI.glow.glowtotem2customcolor
				glowtotem2customcolor.r, glowtotem2customcolor.g, glowtotem2customcolor.b = r, g, b E:StaticPopup_Show('CONFIG_RL')
			end, function() return E.db.ElvUI_EltreumUI.glow.totemtypecolor or not E.db.ElvUI_EltreumUI.glow.enable or not E.db.ElvUI_EltreumUI.glow.enabletotem end, E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.totem3 = ACH:Description(L["Shaman Water Totem"], 16, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.totem3typecolor = ACH:Toggle(L["Use Type Colors"], L["Toggle Totem to use it's own Type Colors"], 17, nil, false,nil,function() return E.db.ElvUI_EltreumUI.glow.totemtypecolor end,function(_, value) E.db.ElvUI_EltreumUI.glow.totemtypecolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.glow.enable or not E.db.ElvUI_EltreumUI.glow.enabletotem end, E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.totem3customcolor = ACH:Color(L["Custom Color"], nil, 18, false, nil, function()
		local glowtotem3customcolor = E.db.ElvUI_EltreumUI.glow.glowtotem3customcolor
		local d = P.ElvUI_EltreumUI.glow.glowtotem3customcolor
		return glowtotem3customcolor.r, glowtotem3customcolor.g, glowtotem3customcolor.b, glowtotem3customcolor.a, d.r, d.g, d.b, d.a
	end,
			function(_, r, g, b)
				local glowtotem3customcolor = E.db.ElvUI_EltreumUI.glow.glowtotem3customcolor
				glowtotem3customcolor.r, glowtotem3customcolor.g, glowtotem3customcolor.b = r, g, b E:StaticPopup_Show('CONFIG_RL')
			end, function() return E.db.ElvUI_EltreumUI.glow.totemtypecolor or not E.db.ElvUI_EltreumUI.glow.enable or not E.db.ElvUI_EltreumUI.glow.enabletotem end, E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.totem4 = ACH:Description(L["Shaman Air Totem"], 19, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.totem4typecolor = ACH:Toggle(L["Use Type Colors"], L["Toggle Totem to use it's own Type Colors"], 20, nil, false,nil,function() return E.db.ElvUI_EltreumUI.glow.totemtypecolor end,function(_, value) E.db.ElvUI_EltreumUI.glow.totemtypecolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.glow.enable or not E.db.ElvUI_EltreumUI.glow.enabletotem end, E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.totem4customcolor = ACH:Color(L["Custom Color"], nil, 21, false, nil, function()
		local glowtotem4customcolor = E.db.ElvUI_EltreumUI.glow.glowtotem4customcolor
		local d = P.ElvUI_EltreumUI.glow.glowtotem4customcolor
		return glowtotem4customcolor.r, glowtotem4customcolor.g, glowtotem4customcolor.b, glowtotem4customcolor.a, d.r, d.g, d.b, d.a
	end,
			function(_, r, g, b)
				local glowtotem4customcolor = E.db.ElvUI_EltreumUI.glow.glowtotem4customcolor
				glowtotem4customcolor.r, glowtotem4customcolor.g, glowtotem4customcolor.b = r, g, b E:StaticPopup_Show('CONFIG_RL')
			end, function() return E.db.ElvUI_EltreumUI.glow.totemtypecolor or not E.db.ElvUI_EltreumUI.glow.enable or not E.db.ElvUI_EltreumUI.glow.enabletotem end, E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.gradientdesc = ACH:Description(L["Gradient"], 22, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.colors.args.gradient = ACH:Toggle(L["Enable Gradient Glow"], nil, 23, nil, false,"full",function() return E.db.ElvUI_EltreumUI.glow.gradient end,function(_, value) E.db.ElvUI_EltreumUI.glow.gradient = value end)
	ElvUI_EltreumUI.Options.args.customglow.args.pixel = ACH:Group(L["Pixel Glow"], nil, 3, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.glow.enable and not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.npglow and not E.db.ElvUI_EltreumUI.glow.enablepet and not E.db.ElvUI_EltreumUI.glow.enableUFs end)
	ElvUI_EltreumUI.Options.args.customglow.args.pixel.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.pixel.args.pixelborder = ACH:Toggle(L["Enable Pixel Border"], L["Enable a border for the Pixel Glow"], 2, nil, false,nil,function() return E.db.ElvUI_EltreumUI.glow.borderpixel end,function(_, value) E.db.ElvUI_EltreumUI.glow.borderpixel = value end)
	ElvUI_EltreumUI.Options.args.customglow.args.pixel.args.description2 = ACH:Description(" ", 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.pixel.args.numberpixel = ACH:Range(L["Number of Pixels (Default is 9)"], L["Set the number of pixels in pixel glow"], 4, { min = 1, max = 20, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.glow.numberpixel end, function(_, value) E.db.ElvUI_EltreumUI.glow.numberpixel = value end)
	ElvUI_EltreumUI.Options.args.customglow.args.pixel.args.description3 = ACH:Description(" ", 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.pixel.args.pixelfrequency = ACH:Range(L["Pixel Frequency (Default is 1)"], L["Set the frequency pixel glow"], 6, { min = -10, max = 10, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.glow.frequencypixel end, function(_, value) E.db.ElvUI_EltreumUI.glow.frequencypixel = value end)
	ElvUI_EltreumUI.Options.args.customglow.args.pixel.args.description4 = ACH:Description(" ", 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.pixel.args.pixellength = ACH:Range(L["Pixel Length (Default is 3)"], L["Set the length of pixels"], 8, { min = 1, max = 20, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.glow.lengthpixel end, function(_, value) E.db.ElvUI_EltreumUI.glow.lengthpixel = value end)
	ElvUI_EltreumUI.Options.args.customglow.args.pixel.args.description5 = ACH:Description(" ", 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.pixel.args.pixelthickness = ACH:Range(L["Pixel Thickness (Default is 5)"], L["Set the thickness of pixels"], 10, { min = 1, max = 10, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.glow.thicknesspixel end, function(_, value) E.db.ElvUI_EltreumUI.glow.thicknesspixel = value end)
	ElvUI_EltreumUI.Options.args.customglow.args.pixel.args.description6 = ACH:Description(" ", 11, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.pixel.args.pixelxoffset = ACH:Range(L["Pixel Horizontal Offset (Default is 5)"], L["Set the horizontal offset of pixels"], 12, { min = 1, max = 10, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.glow.pixelxOffset end, function(_, value) E.db.ElvUI_EltreumUI.glow.pixelxOffset = value end)
	ElvUI_EltreumUI.Options.args.customglow.args.pixel.args.description7 = ACH:Description(" ", 13, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.pixel.args.pixelyoffset = ACH:Range(L["Pixel Vertical Offset (Default is 5)"], L["Set the vertical offset of pixels"], 14, { min = 1, max = 10, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.glow.pixelyOffset end, function(_, value) E.db.ElvUI_EltreumUI.glow.pixelyOffset = value end)
	ElvUI_EltreumUI.Options.args.customglow.args.autocast = ACH:Group(L["Autocast Glow"], nil, 3, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.glow.enable and not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.npglow and not E.db.ElvUI_EltreumUI.glow.enablepet and not E.db.ElvUI_EltreumUI.glow.enableUFs end)
	ElvUI_EltreumUI.Options.args.customglow.args.autocast.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.autocast.args.numberautocast = ACH:Range(L["Autocast Particle Groups (Default is 8)"], L["Set the number of groups for autocast, for each group you get 4 particles"], 2, { min = 1, max = 10, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.glow.numberauto end, function(_, value) E.db.ElvUI_EltreumUI.glow.numberauto = value end)
	ElvUI_EltreumUI.Options.args.customglow.args.autocast.args.description2 = ACH:Description(" ", 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.autocast.args.autofrequency = ACH:Range(L["Autocast Frequency (Default is 0.8)"], L["Speed for Autocast, set to negative to inverse direction of rotation"], 4, { min = -3, max = 3, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.glow.frequencyauto end, function(_, value) E.db.ElvUI_EltreumUI.glow.frequencyauto = value end)
	ElvUI_EltreumUI.Options.args.customglow.args.autocast.args.description3 = ACH:Description(" ", 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.autocast.args.autoscale = ACH:Range(L["Autocast Scale (Default is 2)"], L["Change the size of Autocast"], 6, { min = -3, max = 3, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.glow.autoscale end, function(_, value) E.db.ElvUI_EltreumUI.glow.autoscale = value end)
	ElvUI_EltreumUI.Options.args.customglow.args.autocast.args.description4 = ACH:Description(" ", 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.autocast.args.autooffsetx = ACH:Range(L["Autocast Horizontal Offset (Default is 5)"], L["Set the horizontal offset of autocast"], 8, { min = 1, max = 10, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.glow.autoxOffset end, function(_, value) E.db.ElvUI_EltreumUI.glow.autoxOffset = value end)
	ElvUI_EltreumUI.Options.args.customglow.args.autocast.args.description5 = ACH:Description(" ", 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.autocast.args.autooffsety = ACH:Range(L["Autocast Vertical Offset (Default is 5)"], L["Set the vertical offset of autocast"], 10, { min = 1, max = 10, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.glow.autoyOffset end, function(_, value) E.db.ElvUI_EltreumUI.glow.autoyOffset = value end)
	ElvUI_EltreumUI.Options.args.customglow.args.blizzard = ACH:Group(L["Blizzard Glow"], nil, 3, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.glow.enable and not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.npglow and not E.db.ElvUI_EltreumUI.glow.enablepet and not E.db.ElvUI_EltreumUI.glow.enableUFs end)
	ElvUI_EltreumUI.Options.args.customglow.args.blizzard.args.description1 = ACH:Description(L["Blizzard Glow"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.blizzard.args.frequencyblizz = ACH:Range(L["Blizzard Frequency (Default is 0.5)"], L["Speed for Blizzard glow"], 2, { min = 0.1, max = 3, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.glow.frequencyblizz end, function(_, value) E.db.ElvUI_EltreumUI.glow.frequencyblizz = value end)
	ElvUI_EltreumUI.Options.args.customglow.args.proc = ACH:Group(L["Proc Glow"], nil, 3, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.glow.enable and not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.npglow and not E.db.ElvUI_EltreumUI.glow.enablepet and not E.db.ElvUI_EltreumUI.glow.enableUFs end, not E.Retail)
	ElvUI_EltreumUI.Options.args.customglow.args.proc.args.startAnimation = ACH:Toggle(L["Start Animation"], L["Enable a start animation"], 1, nil, false,nil,function() return E.db.ElvUI_EltreumUI.glow.proc.startAnimation end,function(_, value) E.db.ElvUI_EltreumUI.glow.proc.startAnimation = value end)
	ElvUI_EltreumUI.Options.args.customglow.args.proc.args.description1 = ACH:Description(L["Proc Glow"], 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.proc.args.duration = ACH:Range(L["SPEED"], L["Speed for Proc Glow"], 3, { min = 0.5, max = 3, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.glow.proc.duration end, function(_, value) E.db.ElvUI_EltreumUI.glow.proc.duration = value end)
	ElvUI_EltreumUI.Options.args.customglow.args.proc.args.description6 = ACH:Description(" ", 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.proc.args.procxoffset = ACH:Range(L["Horizontal Offset"], L["Set the horizontal offset"], 5, { min = 1, max = 10, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.glow.proc.xOffset end, function(_, value) E.db.ElvUI_EltreumUI.glow.proc.xOffset = value end)
	ElvUI_EltreumUI.Options.args.customglow.args.proc.args.description7 = ACH:Description(" ", 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.customglow.args.proc.args.procyoffset = ACH:Range(L["Vertical Offset"], L["Set the vertical offset"], 7, { min = 1, max = 10, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.glow.proc.yOffset end, function(_, value) E.db.ElvUI_EltreumUI.glow.proc.yOffset = value end)

	--maps
	ElvUI_EltreumUI.Options.args.map = ACH:Group(E:TextGradient(L["Maps"], 0.50, 0.70, 1, 0.67, 0.95, 1), E.Retail and L["Add a time to arrive to waypoints, cardinal directions and more"] or L["Add cardinal directions, change map scale and more"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.map.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\map'
	ElvUI_EltreumUI.Options.args.map.args.general = ACH:Group(L["General"], nil, 1)
	ElvUI_EltreumUI.Options.args.map.args.general.args.description1 = ACH:Description(L["Flight Frame"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.map.args.general.args.taxiscale = ACH:Range(L["Flight Frame Scale"], nil, 2, { min = 0.1, max = 3, step = 0.01 }, 'double', function() return E.db.ElvUI_EltreumUI.otherstuff.taxiscale end,
			function(_, value)
				E.db.ElvUI_EltreumUI.otherstuff.taxiscale = value
				if _G["TaxiFrame"] then
					_G["TaxiFrame"]:SetScale(value)
				end
				if _G["FlightMapFrame"] then
					_G["FlightMapFrame"]:SetScale(value)
				end
			end)
	ElvUI_EltreumUI.Options.args.map.args.general.args.description2 = ACH:Description(L["WORLD_MAP"], 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.map.args.general.args.worldmapscaletoggle = ACH:Toggle(L["Enable World Map Scaling"], nil, 4, nil, false,'full',function() return E.db.ElvUI_EltreumUI.otherstuff.worldmapscale end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.worldmapscale = value end)
	ElvUI_EltreumUI.Options.args.map.args.general.args.worldmapscale = ACH:Range(L["World Map Scale"], nil, 5, { min = 0.1, max = 3, step = 0.01 }, 'double', function() return E.db.ElvUI_EltreumUI.otherstuff.worldmapscalevalue end,
			function(_, value) E.db.ElvUI_EltreumUI.otherstuff.worldmapscalevalue = value
				if _G["WorldMapFrame"] then
					_G["WorldMapFrame"]:SetScale(value)
				end
			end,function() return not E.db.ElvUI_EltreumUI.otherstuff.worldmapscale end)
	ElvUI_EltreumUI.Options.args.map.args.general.args.description3 = ACH:Description(_G.MINIMAP_LABEL or L["Minimap"], 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.map.args.general.args.circleMinimap = ACH:Toggle(L["Circle Minimap"], nil, 7, nil, false,nil,function() return E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.circle end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.circle = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.map.args.general.args.RotateMinimap = ACH:Toggle(_G.ROTATE_MINIMAP, nil, 8, nil, false,nil,function() return E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.rotate end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.rotate = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.circle end)
	ElvUI_EltreumUI.Options.args.map.args.eta = ACH:Group(L["Time to Arrive"], nil, 2, "tab", nil, nil, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.map.args.eta.args.description1 = ACH:Description(L["Add a time to arrive below the waypoint"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.map.args.eta.args.description2 = ACH:Description(L["The time will be calculated based on player speed and distance"], 2, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.map.args.eta.args.description3 = ACH:Description(L["If the player is not moving then *** will show up since time cannot be calculated"], 3, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.map.args.eta.args.description4 = ACH:Description(L["If you move away from the waypoint the time will just increase"], 4, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.map.args.eta.args.enable = ACH:Toggle(L["Enable ETA"], L["Add an ETA to waypoints"], 5, nil, false,'full',function() return E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.enable end,function(_, value) E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.enable = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.map.args.eta.args.enableautopin = ACH:Toggle(L["Enable Autopin"], L["Automatically pin the Waypoint"], 6, nil, false,'full',function() return E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.autopin end,function(_, value) E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.autopin = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.enable end)
	ElvUI_EltreumUI.Options.args.map.args.eta.args.etaclasscolor = ACH:Toggle(L["Use Class Colors"], nil,7, nil, false,nil, function() return E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.classcolortext end, function(_, value) E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.classcolortext = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.enable or not E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.color.enable end)
	ElvUI_EltreumUI.Options.args.map.args.eta.args.etacolor = ACH:Color(L["Text Color"], nil, 8, false, nil, function() return E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.textcolorR, E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.textcolorG, E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.textcolorB, 1, P.ElvUI_EltreumUI.waypoints.waypointetasetting.textcolorR, P.ElvUI_EltreumUI.waypoints.waypointetasetting.textcolorG, P.ElvUI_EltreumUI.waypoints.waypointetasetting.textcolorB, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.textcolorR, E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.textcolorG, E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.textcolorB = r, g, b E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.enable or E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.classcolortext end)
	ElvUI_EltreumUI.Options.args.map.args.eta.args.enablelimit = ACH:Toggle(L["Limit Max Distance"], L["Add an ETA to waypoints"], 9, nil, false,'full',function() return E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.limitmaxdistance end,function(_, value) E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.limitmaxdistance = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.enable end)
	ElvUI_EltreumUI.Options.args.map.args.eta.args.limitmaxdistance = ACH:Range(L["Max Distance"], nil, 10, { min = 200, max = 10000, step = 10 }, 'double', function() return E.db.ElvUI_EltreumUI.otherstuff.worldmapscalevalue end, function(_, value) E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.distance = value end, function() return not E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.limitmaxdistance or not E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.enable end)
	ElvUI_EltreumUI.Options.args.map.args.eta.args.description5 = ACH:Description(L["Change Texture Color"], 11, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.map.args.eta.args.color = ACH:Toggle(L["Enable"], nil, 12, nil, false,'full',function() return E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.color.enable end,function(_, value) E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.color.enable = value ElvUI_EltreumUI:UpdateSuperTrackedColor() end, function() return not E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.enable end)
	ElvUI_EltreumUI.Options.args.map.args.eta.args.classcolor = ACH:Toggle(L["Use Class Colors"], nil, 13, nil, false,nil,function() return E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.color.classcolor end,function(_, value) E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.color.classcolor = value ElvUI_EltreumUI:UpdateSuperTrackedColor() end, function() return not E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.enable or not E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.color.enable end)
	ElvUI_EltreumUI.Options.args.map.args.eta.args.customcolor = ACH:Color(L["Custom Color"], nil, 14, false, nil, function() return E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.color.r, E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.color.g, E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.color.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.color.r, E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.color.g, E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.color.b = r, g, b ElvUI_EltreumUI:UpdateSuperTrackedColor() end, function() return E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.color.classcolor or not E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.enable or not E.db.ElvUI_EltreumUI.waypoints.waypointetasetting.color.enable end)
	ElvUI_EltreumUI.Options.args.map.args.waytext = ACH:Group(L["Chat Command"], nil, 3, "tab", nil, nil, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.map.args.waytext.args.description1 = ACH:Description(L["Enable the /way and /waypoint commands"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.map.args.waytext.args.description2 = ACH:Description(L["You can type /way or /waypoint"], 2)
	ElvUI_EltreumUI.Options.args.map.args.waytext.args.description3 = ACH:Description(L["Use formats such as:"], 3)
	ElvUI_EltreumUI.Options.args.map.args.waytext.args.description4 = ACH:Description(L["XX YY, XX.XX YY.YY, XX,XX YY,YY and XXX YYY"], 4)
	ElvUI_EltreumUI.Options.args.map.args.waytext.args.description5 = ACH:Description(L["Other Formats can end up causing errors"], 5)
	ElvUI_EltreumUI.Options.args.map.args.waytext.args.enable = ACH:Toggle(L["Enable"], L["Enable the /way and /waypoint commands"], 6, nil, false,'full',function() return E.db.ElvUI_EltreumUI.waypoints.waytext.enable end,function(_, value) E.db.ElvUI_EltreumUI.waypoints.waytext.enable = value end)
	ElvUI_EltreumUI.Options.args.map.args.cardinal = ACH:Group(L["Cardinal Directions"], nil, 3)
	ElvUI_EltreumUI.Options.args.map.args.cardinal.args.description1 = ACH:Description(L["Minimap Cardinal Directions"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.map.args.cardinal.args.enable = ACH:Toggle(L["Enable Cardinal Directions"], L["Add North, East, South, West to Minimap"], 2, nil, false,'full',function() return E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.enable end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.enable = value ElvUI_EltreumUI:MinimapCardinalDirections() end)
	ElvUI_EltreumUI.Options.args.map.args.cardinal.args.cardinaloffset = ACH:Range(L["Cardinal Text Offset"], nil, 3, { min = -100, max = 100, step = 1 }, 'full', function() return E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.offset end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.offset = value ElvUI_EltreumUI:MinimapCardinalDirections() end, function() return not E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.enable end)
	ElvUI_EltreumUI.Options.args.map.args.cardinal.args.description2 = ACH:Description(" ", 4, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.map.args.cardinal.args.fontsize = ACH:Range(L["Font Size"], nil, 5, { min = 4, max = 64, step = 1 }, 'full', function() return E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.fontsize end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.fontsize = value ElvUI_EltreumUI:MinimapCardinalDirections() end, function() return GetCVar("rotateMinimap") == "1" or not E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.enable end)
	ElvUI_EltreumUI.Options.args.map.args.cardinal.args.description3 = ACH:Description(" ", 6, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.map.args.cardinal.args.classcolor = ACH:Toggle(L["Use Class Colors"], nil, 7, nil, false,nil,function() return E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.colors.classcolor end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.colors.classcolor = value ElvUI_EltreumUI:MinimapCardinalDirections() end, function() return not E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.enable end)
	ElvUI_EltreumUI.Options.args.map.args.cardinal.args.customcolor = ACH:Color(L["Custom Color"], nil, 8, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.colors.r, E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.colors.g, E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.colors.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.colors.r, E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.colors.g, E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.colors.b = r, g, b ElvUI_EltreumUI:MinimapCardinalDirections() end, function() return not E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.enable or E.db.ElvUI_EltreumUI.otherstuff.minimapcardinaldirections.colors.classcolor end)
	ElvUI_EltreumUI.Options.args.map.args.combathide = ACH:Group(L["Combat Hide"], nil, 3)
	ElvUI_EltreumUI.Options.args.map.args.combathide.args.description1 = ACH:Description(L["Minimap"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.map.args.combathide.args.description2 = ACH:Description(L["Hide Minimap while in Combat"], 2, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.map.args.combathide.args.enable = ACH:Toggle(L["Enable"], L["Automatically hide the Minimap in combat"], 3, nil, false,'full',function() return E.db.ElvUI_EltreumUI.otherstuff.mapcombathide end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.mapcombathide = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.map.args.combathide.args.enableauras = ACH:Toggle(L["Adjust Auras Position"], L["Automatically move auras to the Top Right when minimap is hidden"], 4, nil, false,'full',function() return E.db.ElvUI_EltreumUI.otherstuff.mapcombathideadjustaura end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.mapcombathideadjustaura = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.mapcombathide end)

	--media
	ElvUI_EltreumUI.Options.args.media = ACH:Group(E:TextGradient(L["Media"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Change Fonts, Font Outlines and Action Paging"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.media.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\media'
	ElvUI_EltreumUI.Options.args.media.args.general = ACH:Group(L["Setup Media"], nil, 1)
	ElvUI_EltreumUI.Options.args.media.args.general.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.media.args.general.args.resetmedia = ACH:Execute(L["Reset all Media"], L["Reset all Media"], 2, function() ElvUI_EltreumUI:SetupPrivate() E:StaggeredUpdateAll() E:StaticPopup_Show('CONFIG_RL') end,nil,true,'full')
	ElvUI_EltreumUI.Options.args.media.args.general.args.description2 = ACH:Description(L["Set the fonts used in Eltruism. Kimberley is the default font"], 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.media.args.general.args.kimberley = ACH:Execute("Kimberley", L["This will set all ElvUI fonts as Kimberley"], 4, function() ElvUI_EltreumUI:SetupFont("Kimberley") end,nil,true)
	ElvUI_EltreumUI.Options.args.media.args.general.args.exo2 = ACH:Execute("Exo2", L["This will set all ElvUI fonts as Exo2"], 4, function() ElvUI_EltreumUI:SetupFont("Exo2 Extra Bold") end,nil,true)
	ElvUI_EltreumUI.Options.args.media.args.general.args.gap1 = ACH:Description('', 5, nil)
	ElvUI_EltreumUI.Options.args.media.args.general.args.Gotham = ACH:Execute("Gotham", L["This will set all ElvUI fonts as Gotham"], 6, function() ElvUI_EltreumUI:SetupFont("GothamNarrow Black") end,nil,true)
	ElvUI_EltreumUI.Options.args.media.args.general.args.Roboto = ACH:Execute("Roboto", L["This will set all ElvUI fonts as Roboto"], 6, function() ElvUI_EltreumUI:SetupFont("Roboto") end,nil,true)
	ElvUI_EltreumUI.Options.args.media.args.general.args.gap2 = ACH:Description('', 7, nil)
	ElvUI_EltreumUI.Options.args.media.args.general.args.sharedmedia = ACH:SharedMediaFont(L["Or choose a custom font"], L["Choose a different font from the preselected ones"], 8, "double", function() return E.db.ElvUI_EltreumUI.otherstuff.fonts.playerfont end, function(_,fontvalue) E.db.ElvUI_EltreumUI.otherstuff.fonts.playerfont = fontvalue ElvUI_EltreumUI:SetupFont(fontvalue, true) end)
	ElvUI_EltreumUI.Options.args.media.args.general.args.description3 = ACH:Description(L["Texture"], 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.media.args.general.args.sharedmediatexture = ACH:SharedMediaStatusbar(" ", nil, 10, "double", function() return E.private.general.normTex end, function(_,texturevalue) ElvUI_EltreumUI:SetupTexture(texturevalue) E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.media.args.general.args.description4 = ACH:Description(L["Set the Font Outlines everywhere. Use Default to return to Eltruism default settings"], 11, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.media.args.general.args.fontoutlinedefault = ACH:Execute(L["Defaults"], L["This will set fonts to Eltruism defaults, recommended for 4K"], 12, function() ElvUI_EltreumUI:SetupFontsOutlineDefault() E:StaggeredUpdateAll() E:StaticPopup_Show('CONFIG_RL') end,nil,true,"double")
	ElvUI_EltreumUI.Options.args.media.args.general.args.gap3 = ACH:Description('', 13, nil)
	ElvUI_EltreumUI.Options.args.media.args.general.args.fontoutlinenone = ACH:Execute(L["None"], L["This will set fonts to no outline"], 14, function() ElvUI_EltreumUI:SetupFontsOutlineCustom("NONE") E:StaggeredUpdateAll() E:StaticPopup_Show('CONFIG_RL') end,nil,true)
	ElvUI_EltreumUI.Options.args.media.args.general.args.fontoutlineoutline = ACH:Execute(L["Outline"], L["This will set fonts to use outline, recommended for 1440p and 1080p"], 14, function() ElvUI_EltreumUI:SetupFontsOutlineCustom("OUTLINE") E:StaggeredUpdateAll() E:StaticPopup_Show('CONFIG_RL') end,nil,true)
	ElvUI_EltreumUI.Options.args.media.args.general.args.fontoutlinethick = ACH:Execute(L["Thick Outline"], L["This will set fonts to use thick outline"], 14, function() ElvUI_EltreumUI:SetupFontsOutlineCustom("THICKOUTLINE") E:StaggeredUpdateAll() E:StaticPopup_Show('CONFIG_RL') end,nil,true)
	ElvUI_EltreumUI.Options.args.media.args.general.args.fontshadow = ACH:Execute(L['|cff888888Shadow|r'], nil, 14, function() ElvUI_EltreumUI:SetupFontsOutlineCustom("SHADOW") E:StaggeredUpdateAll() E:StaticPopup_Show('CONFIG_RL') end,nil,true)
	ElvUI_EltreumUI.Options.args.media.args.general.args.fontshadowoutline = ACH:Execute(L['|cff888888Shadow|r Outline'], nil, 14, function() ElvUI_EltreumUI:SetupFontsOutlineCustom("SHADOWOUTLINE") E:StaggeredUpdateAll() E:StaticPopup_Show('CONFIG_RL') end,nil,true)
	ElvUI_EltreumUI.Options.args.media.args.general.args.fontshadowoutlinethick = ACH:Execute(L['|cff888888Shadow|r Thick'], nil, 14, function() ElvUI_EltreumUI:SetupFontsOutlineCustom("SHADOWTHICKOUTLINE") E:StaggeredUpdateAll() E:StaticPopup_Show('CONFIG_RL') end,nil,true)
	ElvUI_EltreumUI.Options.args.media.args.general.args.fontmono = ACH:Execute(L['|cFFAAAAAAMono|r'], nil, 14, function() ElvUI_EltreumUI:SetupFontsOutlineCustom("MONOCHROME") E:StaggeredUpdateAll() E:StaticPopup_Show('CONFIG_RL') end,nil,true)
	ElvUI_EltreumUI.Options.args.media.args.general.args.fontmonooutline = ACH:Execute(L['|cFFAAAAAAMono|r Outline'], nil, 14, function() ElvUI_EltreumUI:SetupFontsOutlineCustom("MONOCHROMEOUTLINE") E:StaggeredUpdateAll() E:StaticPopup_Show('CONFIG_RL') end,nil,true)
	ElvUI_EltreumUI.Options.args.media.args.general.args.fontmonooutlinethick = ACH:Execute(L['|cFFAAAAAAMono|r Thick'], nil, 14, function() ElvUI_EltreumUI:SetupFontsOutlineCustom("MONOCHROMETHICKOUTLINE") E:StaggeredUpdateAll() E:StaticPopup_Show('CONFIG_RL') end,nil,true)
	ElvUI_EltreumUI.Options.args.media.args.general.args.description5 = ACH:Description(L["Change the ElvUI background"], 15, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.media.args.general.args.greybg = ACH:Execute(L["Grey Background"], L["This will set the background to be a grey color"], 16, function() ElvUI_EltreumUI:GreyBg() end, nil, true)
	ElvUI_EltreumUI.Options.args.media.args.general.args.darkbg = ACH:Execute(L["Black Background"], L["This will set the background to be a black color"], 16, function() ElvUI_EltreumUI:BlackBg() end, nil, true)
	ElvUI_EltreumUI.Options.args.media.args.general.args.description6 = ACH:Description(L["Class Colors"], 17, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.media.args.general.args.magewarlockclasscolor = ACH:Toggle(L["Make Mage and Warlock use their original Class Colors"], nil, 18, nil, false,'full',function() return E.db.ElvUI_EltreumUI.skins.oldclasscolors end,function(_, value) E.db.ElvUI_EltreumUI.skins.oldclasscolors = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.media.args.general.args.shamanbluecolor = ACH:Toggle(L["Make Shamans Blue instead of Pink"], nil, 18, nil, false,'full',function() return E.db.ElvUI_EltreumUI.skins.classicblueshaman end,function(_, value) E.db.ElvUI_EltreumUI.skins.classicblueshaman = value E:StaticPopup_Show('CONFIG_RL') end, nil, not E.Classic)
	ElvUI_EltreumUI.Options.args.media.args.general.args.description7 = ACH:Description(L["WeakAuras Action Bar"], 19, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.media.args.general.args.weakaurasactionbar = ACH:Toggle(L["Move ActionBars and Power to be similar to WeakAuras"], L["Overwrites some profile settings to move ActionBars, Unitframes and Powers to look more similar to a WeakAura. |cffFF0000WARNING:|r This will overwrite some of your profile settings with no way to restore"], 20, nil, false,'full',function() return E.db.ElvUI_EltreumUI.otherstuff.ABlikeWA end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.ABlikeWA = value ElvUI_EltreumUI:WeakAurasLikeActionBars(value) E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.media.args.general.args.description8 = ACH:Description(" ", 21, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.media.args.general.args.paging = ACH:Execute(L["Swap Action Paging and visibility for Bar1 and Bar4"], nil, 22, function() ElvUI_EltreumUI:ActionPagingSwap() E:StaticPopup_Show('CONFIG_RL') end,nil,true, "full")
	ElvUI_EltreumUI.Options.args.media.args.general.args.aurafilters = ACH:Execute(L["Aura Indicator"].." "..L["Textured Icon"].." "..L["Style"], nil, 23, function() ElvUI_EltreumUI:AuraFiltersUpdate() end,nil,true, "full")
	ElvUI_EltreumUI.Options.args.media.args.tags = ACH:Group(L["Tags"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.media.args.tags.args.enable = ACH:Group("", nil, 1)
	ElvUI_EltreumUI.Options.args.media.args.tags.args.enable.inline = true
	ElvUI_EltreumUI.Options.args.media.args.tags.args.enable.args.description1 = ACH:Description(L["Customize Tags"], 2)
	ElvUI_EltreumUI.Options.args.media.args.tags.args.hpstatus = ACH:Group("[eltruism:hpstatus]", nil, 2)
	ElvUI_EltreumUI.Options.args.media.args.tags.args.hpstatus.args.description1 = ACH:Description(L["Customize Health Status Icons"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.media.args.tags.args.hpstatus.args.deadiconpick = ACH:Select(L["Dead"], nil, 2, {
		["1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Dead\\dead1',':20:20'),
		["2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Dead\\dead2',':20:20'),
		["3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Dead\\dead3',':20:20'),
		["4"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Dead\\dead4',':20:20'),
		["5"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Dead\\dead5',':20:20'),
		["6"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Dead\\dead6',':20:20'),
		["7"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Dead\\dead7',':20:20'),
		["NONE"] = L["None"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.hpstatusdeadicon end, function(_,value) E.db.ElvUI_EltreumUI.otherstuff.hpstatusdeadicon = tostring(value) end)
	ElvUI_EltreumUI.Options.args.media.args.tags.args.hpstatus.args.deadiconpick.style = "radio"
	ElvUI_EltreumUI.Options.args.media.args.tags.args.hpstatus.args.dciconpick = ACH:Select(L["Disconnected"], nil, 2, {
		["1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Disconnect\\dc1',':20:20'),
		["2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Disconnect\\dc2',':20:20'),
		["3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Disconnect\\dc3',':20:20'),
		["4"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Disconnect\\dc4',':20:20'),
		["5"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Disconnect\\dc5',':20:20'),
		["6"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Disconnect\\dc6',':20:20'),
		["NONE"] = L["None"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.hpstatusdcicon end, function(_,value) E.db.ElvUI_EltreumUI.otherstuff.hpstatusdcicon = tostring(value) end)
	ElvUI_EltreumUI.Options.args.media.args.tags.args.hpstatus.args.dciconpick.style = "radio"
	ElvUI_EltreumUI.Options.args.media.args.tags.args.dead = ACH:Group("[eltruism:dead]", nil, 2)
	ElvUI_EltreumUI.Options.args.media.args.tags.args.dead.args.description1 = ACH:Description(L["Customize the Dead Icons"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.media.args.tags.args.dead.args.deadiconpick = ACH:Select(L["Disconnected"], nil, 2, {
		["1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Dead\\dead1',':20:20'),
		["2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Dead\\dead2',':20:20'),
		["3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Dead\\dead3',':20:20'),
		["4"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Dead\\dead4',':20:20'),
		["5"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Dead\\dead5',':20:20'),
		["6"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Dead\\dead6',':20:20'),
		["7"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Dead\\dead7',':20:20'),
		["NONE"] = L["None"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.deadtagicon end, function(_,value) E.db.ElvUI_EltreumUI.otherstuff.deadtagicon = tostring(value) end)
	ElvUI_EltreumUI.Options.args.media.args.tags.args.dead.args.deadiconpick.style = "radio"
	ElvUI_EltreumUI.Options.args.media.args.tags.args.dc = ACH:Group("[eltruism:dc]", nil, 2)
	ElvUI_EltreumUI.Options.args.media.args.tags.args.dc.args.description1 = ACH:Description(L["Customize the Disconnected Icons"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.media.args.tags.args.dc.args.dciconpick = ACH:Select(L["Disconnected"], nil, 2, {
		["1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Disconnect\\dc1',':20:20'),
		["2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Disconnect\\dc2',':20:20'),
		["3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Disconnect\\dc3',':20:20'),
		["4"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Disconnect\\dc4',':20:20'),
		["5"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Disconnect\\dc5',':20:20'),
		["6"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Disconnect\\dc6',':20:20'),
		["NONE"] = L["None"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.dctagicon end, function(_,value) E.db.ElvUI_EltreumUI.otherstuff.dctagicon = tostring(value) end)
	ElvUI_EltreumUI.Options.args.media.args.tags.args.dc.args.dciconpick.style = "radio"

	ElvUI_EltreumUI.Options.args.media.args.tags.args.ghost = ACH:Group(L["Ghost"], nil, 2)
	ElvUI_EltreumUI.Options.args.media.args.tags.args.ghost.args.description1 = ACH:Description(L["Customize the Ghost Icons"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.media.args.tags.args.ghost.args.ghosticonpick = ACH:Select(L["Ghost"], nil, 2, {
		["1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Ghost\\ghost1',':20:20'),
		["2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Ghost\\ghost2',':20:20'),
		["3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Ghost\\ghost3',':20:20'),
		["4"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Ghost\\ghost4',':20:20'),
		["5"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Ghost\\ghost5',':20:20'),
		["6"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Ghost\\ghost6',':20:20'),
		["NONE"] = L["None"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.ghosttagicon end, function(_,value) E.db.ElvUI_EltreumUI.otherstuff.ghosttagicon = tostring(value) end)
	ElvUI_EltreumUI.Options.args.media.args.tags.args.ghost.args.ghosticonpick.style = "radio"

	--quests
	ElvUI_EltreumUI.Options.args.quests = ACH:Group(E:TextGradient(QUESTS_LABEL, 0.50, 0.70, 1, 0.67, 0.95, 1), L["Automate Quests and Gossip, add a Quest Item Bar, hide Quests during Boss fights and more"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.quests.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\quest'
	ElvUI_EltreumUI.Options.args.quests.args.general = ACH:Group(L["General"], nil, 1)
	ElvUI_EltreumUI.Options.args.quests.args.general.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.quests.args.general.args.questboss = ACH:Toggle(L["Collapse Quests during Encounters/Boss Fights"], L["Collapse Quests when the boss fight starts"], 2, nil, false,'full',function() return E.db.ElvUI_EltreumUI.quests.enable end,function(_, value) E.db.ElvUI_EltreumUI.quests.enable = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.quests.args.general.args.description2 = ACH:Description(" ", 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.quests.args.general.args.questcombat = ACH:Toggle(L["Collapse Quests during any combat event"], L["Collapse Quests when you enter combat"], 4, nil, false,'full',function() return E.db.ElvUI_EltreumUI.quests.combatenable end,function(_, value) E.db.ElvUI_EltreumUI.quests.combatenable = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.quests.args.general.args.description3 = ACH:Description(" ", 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.quests.args.general.args.questarena = ACH:Toggle(L["Hide Quests during Battlegrounds and Arenas"], nil, 6, nil, false,'full',function() return E.db.ElvUI_EltreumUI.quests.arena end,function(_, value) E.db.ElvUI_EltreumUI.quests.arena = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.quests.args.general.args.descriptionmplus = ACH:Description(" ", 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.quests.args.general.args.questmplus = ACH:Toggle(E.NewSign..L["Hide Quests during Mythic Plus"], nil, 8, nil, false,'full',function() return E.db.ElvUI_EltreumUI.quests.mythicplus end,function(_, value) E.db.ElvUI_EltreumUI.quests.mythicplus = value E:StaticPopup_Show('CONFIG_RL') end, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.quests.args.general.args.description4 = ACH:Description(" ", 40, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.quests.args.general.args.objectiveanchor = ACH:Toggle(L["Objective Frame Anchor"], L["Reactivate the ElvUI Objective Frame Anchor and Mover"], 41, nil, false,'full',function() return E.db.ElvUI_EltreumUI.quests.anchor end,function(_, value) E.db.ElvUI_EltreumUI.quests.anchor = value E:StaticPopup_Show('CONFIG_RL') end, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.quests.args.general.args.objectiveheight = ACH:Range(L["Objective Frame Height"], L["Height of the objective tracker. Increase size to be able to see more objectives."], 42, { min = 100, max = 900, step = 1 }, "full",
			function()
				if ObjectiveTrackerFrame then
					return E.db.ElvUI_EltreumUI.skins.questsettings.objectiveFrameHeight
				else
					return 1
				end
			end, function(_, value)
				if ObjectiveTrackerFrame then
					E.db.ElvUI_EltreumUI.skins.questsettings.objectiveFrameHeight = value
					ElvUI_EltreumUI:UpdateObjectiveTrackerHeight()
				end
			end, function() return not E.db.ElvUI_EltreumUI.quests.anchor end, not E.Retail)
	ElvUI_EltreumUI.Options.args.quests.args.general.args.description5 = ACH:Description(" ", 43, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.quests.args.general.args.wowhead = ACH:Toggle(L["Enable Wowhead Button on Quest Log"], L["Show a button for Wowhead quest links"], 44, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.questswowhead end, function(_, value) E.db.ElvUI_EltreumUI.skins.questswowhead = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.quests.args.general.args.description6 = ACH:Description(" ", 45, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.quests.args.general.args.questscale = ACH:Range(L["Quest Detail Scale"], nil, 46, { min = 0.01, max = 3, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.skins.questsettings.questScale end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.questScale = value if _G["QuestFrame"] then _G["QuestFrame"]:SetScale(value) end if _G["QuestLogDetailFrame"] then _G["QuestLogDetailFrame"]:SetScale(value) end if _G["QuestLogFrame"] then _G["QuestLogFrame"]:SetScale(value) end if _G["GossipFrame"] then _G["GossipFrame"]:SetScale(value) end end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.quests.args.item = ACH:Group(L["Quest Item Bar"], nil, 2)
	ElvUI_EltreumUI.Options.args.quests.args.item.args.description1 = ACH:Description(L["Quest Item Bar"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.quests.args.item.args.questitembar = ACH:Toggle(L["Enable Quest Item Bar"], L["Add a Quest Item bar, keybind can be changed in Keybinds > ElvUI Eltruism"], 2, nil, false,'full', function() return E.db.ElvUI_EltreumUI.quests.questitems end,function(_, value) E.db.ElvUI_EltreumUI.quests.questitems = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.quests.args.item.args.questitembarfade = ACH:Toggle(L["Quest Item Bar follows visibility settings for ElvUI Action Bar 1"], L["The Quest Item Bar will appear only when ElvUI Action Bar 1 appears, following its settings"], 3, nil, false,'full', function() return E.db.ElvUI_EltreumUI.quests.questitemsbar1 end,function(_, value) E.db.ElvUI_EltreumUI.quests.questitemsbar1 = value E:StaticPopup_Show('CONFIG_RL') end, function() return (not E.db.ElvUI_EltreumUI.quests.questitems) or E.db.ElvUI_EltreumUI.quests.questitemsfade end)
	ElvUI_EltreumUI.Options.args.quests.args.item.args.questitembarmouseover = ACH:Toggle(L["Quest Item Bar Button Mouse Over"], L["Each Button in the Quest Item Bar will appear only if the cursor is over it"], 3, nil, false,'full', function() return E.db.ElvUI_EltreumUI.quests.questitemsfade end,function(_, value) E.db.ElvUI_EltreumUI.quests.questitemsfade = value E:StaticPopup_Show('CONFIG_RL') end, function() return (not E.db.ElvUI_EltreumUI.quests.questitems) or E.db.ElvUI_EltreumUI.quests.questitemsbar1 end)
	ElvUI_EltreumUI.Options.args.quests.args.item.args.questitembarkeybind = ACH:Toggle(L["Keybind Text"], nil, 4, nil, false,'full', function() return E.db.ElvUI_EltreumUI.quests.showkeybind end,function(_, value) E.db.ElvUI_EltreumUI.quests.showkeybind = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.quests.questitems end)
	ElvUI_EltreumUI.Options.args.quests.args.item.args.description2 = ACH:Description(L["Quest Item Bar Button Size"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.quests.args.item.args.questitemsbarsizex = ACH:Range(L["Width"], L["Change the size of the button on the Quest Item Bar"], 6, { min = 10, max = 100, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.quests.questitemsize end, function(_, value) E.db.ElvUI_EltreumUI.quests.questitemsize = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.quests.questitems end)
	ElvUI_EltreumUI.Options.args.quests.args.item.args.questitemsbarsizey = ACH:Range(L["Height"], L["Change the size of the button on the Quest Item Bar"], 6, { min = 10, max = 100, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.quests.questitemsizey end, function(_, value) E.db.ElvUI_EltreumUI.quests.questitemsizey = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.quests.questitems end)
	ElvUI_EltreumUI.Options.args.quests.args.item.args.questitembarspacing = ACH:Range(L["Button Spacing"], L["The spacing between buttons."], 7, { min = 0, max = 20, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.quests.questitemspacing end, function(_, value) E.db.ElvUI_EltreumUI.quests.questitemspacing = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.quests.questitems end)
	ElvUI_EltreumUI.Options.args.quests.args.item.args.questitembarorientation = ACH:Select(L["Bar Direction"], nil, 8, {
		["HORIZONTAL"] = L["Horizontal"],
		["VERTICAL"] = L["Vertical"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.quests.questorientation end, function(_, value) E.db.ElvUI_EltreumUI.quests.questorientation = value end, function() return not E.db.ElvUI_EltreumUI.quests.questitems end)
	ElvUI_EltreumUI.Options.args.quests.args.item.args.questitembarorientation.style = "radio"
	ElvUI_EltreumUI.Options.args.quests.args.autoaccept = ACH:Group(L["Auto Accept"], nil, 2)
	ElvUI_EltreumUI.Options.args.quests.args.autoaccept.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.quests.args.autoaccept.args.autoaccept = ACH:Toggle(L["Enable Automatically accepting/turning in Quests when not holding CTRL/SHIFT/ALT"], L["You will automatically accept and turn in quests that do not require gold, are not weekly and are not daily"], 2, nil, false,'full', function() return E.db.ElvUI_EltreumUI.quests.autoaccept end,function(_, value) E.db.ElvUI_EltreumUI.quests.autoaccept = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.quests.args.autoaccept.args.autoacceptdaily = ACH:Toggle(L["Accept Daily and Weekly quests"], L["You will also automatically accept Daily and Weekly Quests"], 3, nil, false,'full', function() return E.db.ElvUI_EltreumUI.quests.acceptdaily end,function(_, value) E.db.ElvUI_EltreumUI.quests.acceptdaily = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.quests.autoaccept end)
	ElvUI_EltreumUI.Options.args.quests.args.autoaccept.args.autoacceptinvert = ACH:Toggle(L["Invert CTRL/SHIFT/ALT"], L["You will only accept and turn in quests if you hold CTRL/SHIFT/ALT while talking to the NPC"], 4, nil, false,'full', function() return E.db.ElvUI_EltreumUI.quests.autoacceptinvert end,function(_, value) E.db.ElvUI_EltreumUI.quests.autoacceptinvert = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.quests.autoaccept end)

	--chat
	ElvUI_EltreumUI.Options.args.chat = ACH:Group(E:TextGradient(CHAT_LABEL, 0.50, 0.70, 1, 0.67, 0.95, 1), L["Enhance Chat Functionality"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.chat.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\chat'
	ElvUI_EltreumUI.Options.args.chat.args.enablechatmods = ACH:Toggle(L["Enable ElvUI Chat modifications"], L["Enable adding more functions to ElvUI Chat"], 1, nil, false,'full', function() return E.db.ElvUI_EltreumUI.chat.enable end,function(_, value) E.db.ElvUI_EltreumUI.chat.enable = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.chat.args.general = ACH:Group(L["General"], nil, 2)
	ElvUI_EltreumUI.Options.args.chat.args.general.args.description1 = ACH:Description(L["Author, MVP and Donator Icons"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.chat.args.general.args.authoricons = ACH:Toggle(L["Enable Showing Author, Donator and MVP Chat Icons"], L["Toggle the option on"], 2, nil, false,'full', function() return E.db.ElvUI_EltreumUI.chat.AuthorMVPDonatorIcons end,function(_, value) E.db.ElvUI_EltreumUI.chat.AuthorMVPDonatorIcons = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.chat.enable end)
	ElvUI_EltreumUI.Options.args.chat.args.general.args.description2 = ACH:Description(L["Force ElvUI Chat Toggles"], 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.chat.args.general.args.elvuichattoggles = ACH:Toggle(L["Enable Always Forcing ElvUI Chat Toggles On"], L["Toggle the option on"], 4, nil, false,'full', function() return E.db.ElvUI_EltreumUI.chat.chattoggles end,function(_, value) E.db.ElvUI_EltreumUI.chat.chattoggles = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.chat.args.general.args.description3 = ACH:Description(L["!key Chat Command"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.chat.args.general.args.keys = ACH:Toggle(L["Enable !key and !keys chat command"], L["Will link your key in guild or party chat"], 6, nil, false,'full', function() return E.db.ElvUI_EltreumUI.otherstuff.mpluskeys end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.mpluskeys = value E:StaticPopup_Show('CONFIG_RL') end, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.chat.args.general.args.description4 = ACH:Description(L["Enhance Item Links in Chat"], 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.chat.args.general.args.chatlooticons = ACH:Toggle(L["Enable Chat Icons"], L["Toggle the option on"], 8, nil, false,'full', function() return E.db.ElvUI_EltreumUI.chat.looticons end,function(_, value) E.db.ElvUI_EltreumUI.chat.looticons = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.chat.enable end)
	ElvUI_EltreumUI.Options.args.chat.args.general.args.chatitemlevels = ACH:Toggle(L["Enable Item Levels"], L["Toggle the option on"], 9, nil, false,'full', function() return E.db.ElvUI_EltreumUI.chat.itemlevels end,function(_, value) E.db.ElvUI_EltreumUI.chat.itemlevels = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.chat.enable or not E.db.ElvUI_EltreumUI.chat.looticons end)
	ElvUI_EltreumUI.Options.args.chat.args.general.args.description5 = ACH:Description(E.NewSign..L["Add Character Race Icons"], 10, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.chat.args.general.args.chatraceicons = ACH:Toggle(L["Enable Character Race Icons"], L["Toggle the option on"], 11, nil, false,'full', function() return E.db.ElvUI_EltreumUI.chat.chatraceicon end,function(_, value) E.db.ElvUI_EltreumUI.chat.chatraceicon = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.chat.enable end)
	ElvUI_EltreumUI.Options.args.chat.args.general.args.description6 = ACH:Description(L["Customize the Chat tabs"], 40, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.chat.args.general.args.darkchat = ACH:Execute(L["Dark Chat"], nil, 41, function() ElvUI_EltreumUI:DarkChat() E:StaticPopup_Show('CONFIG_RL') end,nil,false, "full")
	ElvUI_EltreumUI.Options.args.chat.args.general.args.lightchat = ACH:Execute(L["Transparent Chat"], nil, 41, function() ElvUI_EltreumUI:TransparentChat() E:StaticPopup_Show('CONFIG_RL') end,nil,false, "full")
	ElvUI_EltreumUI.Options.args.chat.args.fade = ACH:Group(L["Fade"], nil, 3, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.chat.enable end)
	ElvUI_EltreumUI.Options.args.chat.args.fade.args.description1 = ACH:Description(L["Add mouse over to the left chat panel"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.chat.args.fade.args.leftmouseover = ACH:Toggle(L["Left Chat Mouse Over"], L["Toggle the option"], 2, nil, false,'full', function() return E.db.ElvUI_EltreumUI.chat.leftmouseover end,function(_, value) E.db.ElvUI_EltreumUI.chat.leftmouseover = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.chat.args.fade.args.description2 = ACH:Description(L["Add a fade to the left chat panel, controlled by ElvUI Chat > Text Fade > Inactivity Timer"], 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.chat.args.fade.args.leftfade = ACH:Toggle(L["Left Inactivity Fader"], L["Toggle the option"], 4, nil, false,'full', function() return E.db.ElvUI_EltreumUI.chat.leftfader end,function(_, value) E.db.ElvUI_EltreumUI.chat.leftfader = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.chat.args.fade.args.description3 = ACH:Description(L["Add mouse over to the right chat panel"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.chat.args.fade.args.rightmouseover = ACH:Toggle(L["Right Chat Mouse Over"], L["Toggle the option"], 6, nil, false,'full', function() return E.db.ElvUI_EltreumUI.chat.rightmouseover end,function(_, value) E.db.ElvUI_EltreumUI.chat.rightmouseover = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.chat.args.fade.args.description4 = ACH:Description(L["Add a fade to the right chat panel, controlled by ElvUI Chat > Text Fade > Inactivity Timer"], 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.chat.args.fade.args.rightfade = ACH:Toggle(L["Right Inactivity Fader"], L["Toggle the option"], 8, nil, false,'full', function() return E.db.ElvUI_EltreumUI.chat.rightfader end,function(_, value) E.db.ElvUI_EltreumUI.chat.rightfader = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.chat.args.fade.args.description5 = ACH:Description(L["Invert left mouse click so that chat starts faded and mouse click will make it stop fading"], 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.chat.args.fade.args.invertmouse = ACH:Toggle(L["Invert Mouse Click"], L["Toggle the option on"], 10, nil, false,'full', function() return E.db.ElvUI_EltreumUI.chat.invertclick end,function(_, value) E.db.ElvUI_EltreumUI.chat.invertclick = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.chat.args.combathide = ACH:Group(L["Combat Hide"], nil, 3, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.chat.enable end)
	ElvUI_EltreumUI.Options.args.chat.args.combathide.args.description1 = ACH:Description(L["Combat Hide"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.chat.args.combathide.args.leftcombathide = ACH:Toggle(L["Hide Left Chat in Combat"], L["Toggle the option"], 2, nil, false,'full', function() return E.db.ElvUI_EltreumUI.chat.leftcombathide end,function(_, value) E.db.ElvUI_EltreumUI.chat.leftcombathide = value E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.chat.leftbosshide or not E.db.ElvUI_EltreumUI.chat.enable end)
	ElvUI_EltreumUI.Options.args.chat.args.combathide.args.leftbosshide = ACH:Toggle(L["Hide Left Chat in Boss Encounters"], L["Toggle the option"], 3, nil, false,'full', function() return E.db.ElvUI_EltreumUI.chat.leftbosshide end,function(_, value) E.db.ElvUI_EltreumUI.chat.leftbosshide = value E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.chat.leftcombathide or not E.db.ElvUI_EltreumUI.chat.enable end)
	ElvUI_EltreumUI.Options.args.chat.args.combathide.args.rightcombathide = ACH:Toggle(L["Hide Right Chat in Combat"], L["Toggle the option"], 4, nil, false,'full', function() return E.db.ElvUI_EltreumUI.chat.rightcombathide end,function(_, value) E.db.ElvUI_EltreumUI.chat.rightcombathide = value E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.chat.rightbosshide or not E.db.ElvUI_EltreumUI.chat.enable end)
	ElvUI_EltreumUI.Options.args.chat.args.combathide.args.rightbosshide = ACH:Toggle(L["Hide Right Chat in Boss Encounters"], L["Toggle the option"], 5, nil, false,'full', function() return E.db.ElvUI_EltreumUI.chat.rightbosshide end,function(_, value) E.db.ElvUI_EltreumUI.chat.rightbosshide = value E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.chat.rightcombathide or not E.db.ElvUI_EltreumUI.chat.enable end)
	ElvUI_EltreumUI.Options.args.chat.args.color = ACH:Group(L["Color"], nil, 3, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.chat.enable end)
	ElvUI_EltreumUI.Options.args.chat.args.color.args.description1 = ACH:Description(L["Add color to some chat messages"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.chat.args.color.args.colorsysmsgs = ACH:Toggle(L["Enable on System Messages"], L["Toggle the option on"], 2, nil, false,'full', function() return E.db.ElvUI_EltreumUI.chat.colorsysmsg end,function(_, value) E.db.ElvUI_EltreumUI.chat.colorsysmsg = value end)
	ElvUI_EltreumUI.Options.args.chat.args.color.args.gradientnames = ACH:Toggle(L["Add Gradient to Names"], L["Player names in chat will have a class gradient"], 3, nil, false,'full', function() return E.db.ElvUI_EltreumUI.chat.chatgradient end,function(_, value) E.db.ElvUI_EltreumUI.chat.chatgradient = value end)
	ElvUI_EltreumUI.Options.args.chat.args.color.args.classcolormsgs = ACH:Toggle(L["Enable on Chat Messages"], L["Toggle the option on"], 4, nil, false,"double", function() return E.db.ElvUI_EltreumUI.chat.classcolorchat end,function(_, value) E.db.ElvUI_EltreumUI.chat.classcolorchat = value end)
	ElvUI_EltreumUI.Options.args.chat.args.color.args.classcolormsgscustom = ACH:Toggle(L["Custom Color"], L["Toggle the option on"], 5, nil, false,nil, function() return E.db.ElvUI_EltreumUI.chat.classcolorchatcustom end,function(_, value) E.db.ElvUI_EltreumUI.chat.classcolorchatcustom = value end, function() return not E.db.ElvUI_EltreumUI.chat.classcolorchat end)
	ElvUI_EltreumUI.Options.args.chat.args.classicons = ACH:Group(L["Class Icons"], nil, 3, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.chat.enable end)
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.enable = ACH:Toggle(L["Add Class Icons in Chat messages"], L["Player names in chat will have a class icon next to their name"], 2, nil, false,"full", function() return E.db.ElvUI_EltreumUI.chat.chaticonenable end,function(_, value) E.db.ElvUI_EltreumUI.chat.chaticonenable = value end)
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.classicons = ACH:Select(L["Class Icons"], nil, 3, {
		["RELEAF"] = "Releaf "..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightReleaf',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterReleaf',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanReleaf',':20:20'),
		["BLIZZARD"] = 'Blizzard '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnight',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\Hunter',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\Shaman',':20:20'),
		["BORDER"] = 'Border '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightIconReleaf',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterIconReleaf',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanIconReleaf',':20:20'),
		["SHADOW"] = 'Shadow '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightShadow',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterShadow',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanShadow',':20:20'),
		["OUTLINE"] = 'Outline '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnight1',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\Hunter1',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\Shaman1',':20:20'),
		["ORIGINAL"] = 'Original '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightOriginal',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterOriginal',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanOriginal',':20:20'),
		["GRADIENT"] = 'Gradient '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightGradient',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterGradient',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanGradient',':20:20'),
		["BW"] = 'Grey '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightBW',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterBW',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanBW',':20:20'),
		["UGG"] = 'U.GG '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightUGG',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterUGG',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanUGG',':20:20'),
		["UGGGREY"] = 'U.GG Grey'..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightUGGBW',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterUGGBW',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanUGGBW',':20:20'),
		["CUSTOM"] = 'Custom',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.chat.chaticontype end, function(_, value) E.db.ElvUI_EltreumUI.chat.chaticontype = value end, function() return not E.db.ElvUI_EltreumUI.chat.chaticonenable end)
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.classicons.style = "radio"
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.customicons = ACH:Group(L["Path to file"], nil, 7, "tab",nil,nil, function() if not E.db.ElvUI_EltreumUI.chat.chaticonenable then return true else return false end end, function() if E.db.ElvUI_EltreumUI.chat.chaticontype ~= "CUSTOM" then return true else return false end end)
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.customicons.inline = true
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.customicons.args.dk = ACH:Input(L["Death Knight"], "", 5, false, "full", function() return E.private.ElvUI_EltreumUI.chat.customicons.DEATHKNIGHT end, function(_,key) E.private.ElvUI_EltreumUI.chat.customicons.DEATHKNIGHT = key end, function() return E.db.ElvUI_EltreumUI.chat.chaticontype ~= "CUSTOM" or not E.db.ElvUI_EltreumUI.chat.chaticonenable end, E.Classic)
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.customicons.args.dh = ACH:Input(L["Demon Hunter"], "", 6, false, "full", function() return E.private.ElvUI_EltreumUI.chat.customicons.DEMONHUNTER end, function(_,key) E.private.ElvUI_EltreumUI.chat.customicons.DEMONHUNTER = key end, function() return E.db.ElvUI_EltreumUI.chat.chaticontype ~= "CUSTOM" or not E.db.ElvUI_EltreumUI.chat.chaticonenable end, not E.Retail)
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.customicons.args.druid = ACH:Input(L["Druid"], "", 7, false, "full", function() return E.private.ElvUI_EltreumUI.chat.customicons.DRUID end, function(_,key) E.private.ElvUI_EltreumUI.chat.customicons.DRUID = key end, function() return E.db.ElvUI_EltreumUI.chat.chaticontype ~= "CUSTOM" or not E.db.ElvUI_EltreumUI.chat.chaticonenable end)
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.customicons.args.hunter = ACH:Input(L["Hunter"], "", 8, false, "full", function() return E.private.ElvUI_EltreumUI.chat.customicons.HUNTER end, function(_,key) E.private.ElvUI_EltreumUI.chat.customicons.HUNTER = key end, function() return E.db.ElvUI_EltreumUI.chat.chaticontype ~= "CUSTOM" or not E.db.ElvUI_EltreumUI.chat.chaticonenable end)
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.customicons.args.mage = ACH:Input(L["Mage"], "", 9, false, "full", function() return E.private.ElvUI_EltreumUI.chat.customicons.MAGE end, function(_,key) E.private.ElvUI_EltreumUI.chat.customicons.MAGE = key end, function() return E.db.ElvUI_EltreumUI.chat.chaticontype ~= "CUSTOM" or not E.db.ElvUI_EltreumUI.chat.chaticonenable end)
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.customicons.args.monk = ACH:Input(L["Monk"], "", 10, false, "full", function() return E.private.ElvUI_EltreumUI.chat.customicons.MONK end, function(_,key) E.private.ElvUI_EltreumUI.chat.customicons.MONK = key end, function() return E.db.ElvUI_EltreumUI.chat.chaticontype ~= "CUSTOM" or not E.db.ElvUI_EltreumUI.chat.chaticonenable end, not E.Retail)
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.customicons.args.evoker = ACH:Input(L["Evoker"], "", 11, false, "full", function() return E.private.ElvUI_EltreumUI.chat.customicons.EVOKER end, function(_,key) E.private.ElvUI_EltreumUI.chat.customicons.EVOKER = key end, function() return E.db.ElvUI_EltreumUI.chat.chaticontype ~= "CUSTOM" or not E.db.ElvUI_EltreumUI.chat.chaticonenable end, not E.Retail)
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.customicons.args.paladin = ACH:Input(L["Paladin"], "", 12, false, "full", function() return E.private.ElvUI_EltreumUI.chat.customicons.PALADIN end, function(_,key) E.private.ElvUI_EltreumUI.chat.customicons.PALADIN = key end, function() return E.db.ElvUI_EltreumUI.chat.chaticontype ~= "CUSTOM" or not E.db.ElvUI_EltreumUI.chat.chaticonenable end)
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.customicons.args.priest = ACH:Input(L["Priest"], "", 13, false, "full", function() return E.private.ElvUI_EltreumUI.chat.customicons.PRIEST end, function(_,key) E.private.ElvUI_EltreumUI.chat.customicons.PRIEST = key end, function() return E.db.ElvUI_EltreumUI.chat.chaticontype ~= "CUSTOM" or not E.db.ElvUI_EltreumUI.chat.chaticonenable end)
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.customicons.args.rogue = ACH:Input(L["Rogue"], "", 14, false, "full", function() return E.private.ElvUI_EltreumUI.chat.customicons.ROGUE end, function(_,key) E.private.ElvUI_EltreumUI.chat.customicons.ROGUE = key end, function() return E.db.ElvUI_EltreumUI.chat.chaticontype ~= "CUSTOM" or not E.db.ElvUI_EltreumUI.chat.chaticonenable end)
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.customicons.args.shaman = ACH:Input(L["Shaman"], "", 15, false, "full", function() return E.private.ElvUI_EltreumUI.chat.customicons.SHAMAN end, function(_,key) E.private.ElvUI_EltreumUI.chat.customicons.SHAMAN = key end, function() return E.db.ElvUI_EltreumUI.chat.chaticontype ~= "CUSTOM" or not E.db.ElvUI_EltreumUI.chat.chaticonenable end)
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.customicons.args.warlock = ACH:Input(L["Warlock"], "", 16, false, "full", function() return E.private.ElvUI_EltreumUI.chat.customicons.WARLOCK end, function(_,key) E.private.ElvUI_EltreumUI.chat.customicons.WARLOCK = key end, function() return E.db.ElvUI_EltreumUI.chat.chaticontype ~= "CUSTOM" or not E.db.ElvUI_EltreumUI.chat.chaticonenable end)
	ElvUI_EltreumUI.Options.args.chat.args.classicons.args.customicons.args.warrior = ACH:Input(L["Warrior"], "", 17, false, "full", function() return E.private.ElvUI_EltreumUI.chat.customicons.WARRIOR end, function(_,key) E.private.ElvUI_EltreumUI.chat.customicons.WARRIOR = key end, function() return E.db.ElvUI_EltreumUI.chat.chaticontype ~= "CUSTOM" or not E.db.ElvUI_EltreumUI.chat.chaticonenable end)

	--cursor
	ElvUI_EltreumUI.Options.args.cursor = ACH:Group(E:TextGradient(L["Cursor"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Attach Rings to the Cursor that will show Castbars, GCDs and can also show the cooldown of skills you attempt to use"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.cursor.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\cursor'
	ElvUI_EltreumUI.Options.args.cursor.args.general = ACH:Group(L["General"], nil, 1)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.enable = ACH:Toggle(L["Enable cursor rings for Casts, GCD and Combat"], L["Add a rings around the mouse cursor for GCD, casts and combat"], 2, nil, false,"full", function() return E.db.ElvUI_EltreumUI.cursors.cursor.enable end,function(_, value) E.db.ElvUI_EltreumUI.cursors.cursor.enable = value end)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.enablecombatonly = ACH:Toggle(L["Enable cursor only during combat"], L["Cursor will only show during combat"], 3, nil, false,"full", function() return E.db.ElvUI_EltreumUI.cursors.cursor.combat end,function(_, value) E.db.ElvUI_EltreumUI.cursors.cursor.combat = value end, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable end)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.enablecd = ACH:Toggle(L["Enable cooldown tracking"], L["Add a cooldown icon when trying to use skills that are on cooldown, and a cooldown flash when they are ready"], 4, nil, false,"full", function() return E.db.ElvUI_EltreumUI.cursors.cursor.cooldown end,function(_, value) E.db.ElvUI_EltreumUI.cursors.cursor.cooldown = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable end)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.enablepetcd = ACH:Toggle(L["Enable pet cooldown tracking"], L["Add a cooldown icon when trying to use skills that are on cooldown, and a cooldown flash when they are ready"], 5, nil, false,"full", function() return E.db.ElvUI_EltreumUI.cursors.cursor.petcooldown end,function(_, value) E.db.ElvUI_EltreumUI.cursors.cursor.petcooldown = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable end)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.description2 = ACH:Description(L["Cooldown Sound"], 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.enablecdsound = ACH:Toggle(L["Play a Sound when attempting to use a skill that is on cooldown."], nil, 7, nil, false,"full", function() return E.db.ElvUI_EltreumUI.cursors.cursor.cooldownsound end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursor.cooldownsound = value if value == true then SetCVar('Sound_EnableErrorSpeech', 0) else SetCVar('Sound_EnableErrorSpeech', 1) end E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable or not E.db.ElvUI_EltreumUI.cursors.cursor.cooldown end)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.cdsound = ACH:SharedMediaSound(L["Select a Sound"], L["Choose a Sound from SharedMedia files"], 8, "double", function() return E.db.ElvUI_EltreumUI.cursors.cursor.cooldownfile end, function(_,key) E.db.ElvUI_EltreumUI.cursors.cursor.cooldownfile = key E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.cooldownsound or not E.db.ElvUI_EltreumUI.cursors.cursor.cooldown end)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.description3 = ACH:Description(L["Change the size of the World of Warcraft Cursor"], 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.setsize = ACH:Select(L["Select a size"], L["Choose this size"], 10, {
		["-1"] = L["Autodetect"],
		["0"] = '32x32',
		["1"] = '48x48',
		["2"] = '64x64',
		["3"] = '128x128',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.cursors.cursor.size end, function(_, value) ElvUI_EltreumUI:CursorSize(value) end, nil, E.Retail)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.setsize.style = "radio"
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.description4 = ACH:Description(L["Attempt to fix Cursor Lag"], 11, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.fixlag = ACH:Select(" ", L["Software cursor is how the cursor was before Battle for Azeroth, Hardware cursor is faster but will cause problems with addons that attach to it"], 12, {
		["0"] = L["Software Cursor"],
		["1"] = L["Hardware Cursor"],
	}, false, nil, function() return GetCVar('HardwareCursor') end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursor.fixlag = value SetCVar('HardwareCursor', value) end)
	ElvUI_EltreumUI.Options.args.cursor.args.general.args.fixlag.style = "radio"
	ElvUI_EltreumUI.Options.args.cursor.args.size = ACH:Group(L["Cursor Sizes"], nil, 2, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable end)
	ElvUI_EltreumUI.Options.args.cursor.args.size.args.description1 = ACH:Description(L["Cursor Sizes"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.size.args.castradius = ACH:Range(L["Cast Radius (Default: 25)"], L["Set the radius of the cast cursor"], 2, { min = 10, max = 50, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.cursors.cursorcast.radius end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorcast.radius = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.size.args.castthickness = ACH:Range(L["Cast Thickness (Default: 5)"], L["Set the radius of the cast cursor"], 3, { min = 1, max = 10, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.cursors.cursorcast.thickness end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorcast.thickness = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.size.args.gcdradius = ACH:Range(L["GCD Radius (Default: 20)"], L["Set the radius of the gcd cursor"], 4, { min = 10, max = 50, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.cursors.cursorgcd.radius end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorgcd.radius = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.size.args.gcdthickness = ACH:Range(L["GCD Thickness (Default: 5)"], L["Set the thickness of the gcd cursor"], 5, { min = 1, max = 10, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.cursors.cursorgcd.thickness end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorgcd.thickness = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.size.args.cursorcursorradius = ACH:Range(L["Combat Cursor Radius (Default: 15)"], L["Set the radius of the combat cursor"], 6, { min = 1, max = 50, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.cursors.cursorcursor.radius end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorcursor.radius = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.size.args.cursorcursorthickness = ACH:Range(L["Combat Cursor Thickness (Default: 5)"], L["Set the thickness of the combat cursor"], 7, { min = 1, max = 10, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.cursors.cursorcursor.thickness end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorcursor.thickness = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.position = ACH:Group(L["Cursor Position"], nil, 2, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable end)
	ElvUI_EltreumUI.Options.args.cursor.args.position.args.description1 = ACH:Description(L["Cursor Position"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.position.args.coooldownx = ACH:Range(L["Set X Offset"], nil, 2, { min = -200, max = 200, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.cursors.cursor.cooldownoffsetx end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursor.cooldownoffsetx = value end, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable or not E.db.ElvUI_EltreumUI.cursors.cursor.cooldown end)
	ElvUI_EltreumUI.Options.args.cursor.args.position.args.coooldowny = ACH:Range(L["Set Y Offset"], nil, 2, { min = -200, max = 200, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.cursors.cursor.cooldownoffsety end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursor.cooldownoffsety = value end, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable or not E.db.ElvUI_EltreumUI.cursors.cursor.cooldown end)
	ElvUI_EltreumUI.Options.args.cursor.args.colors = ACH:Group(L["Cursor Colors"], nil, 2, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable end)
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.description1 = ACH:Description(L["Cursor Colors"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.castclasscolor = ACH:Toggle(L["Class Colored Casts"], L["Use Class Colors for Cast"], 2, nil, false, nil, function() return E.db.ElvUI_EltreumUI.cursors.cursorcast.classcolor end,function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorcast.classcolor = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.castcolor = ACH:Color(L["Custom Color Cast"], nil, 3, true, nil, function()
		local cursorcast = E.db.ElvUI_EltreumUI.cursors.cursorcast
		local d = P.ElvUI_EltreumUI.cursors.cursorcast
		return cursorcast.r, cursorcast.g, cursorcast.b, cursorcast.a, d.r, d.g, d.b, d.a
	end,
			function(_, r, g, b, a)
				local cursorcast = E.db.ElvUI_EltreumUI.cursors.cursorcast
				cursorcast.r, cursorcast.g, cursorcast.b, cursorcast.a = r, g, b, a ElvUI_EltreumUI:CastCursor()
			end, function() return (not E.db.ElvUI_EltreumUI.cursors.cursor.enable) or E.db.ElvUI_EltreumUI.cursors.cursorcast.classcolor end)
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.gradient = ACH:Toggle(L["Gradient"], nil, 4, nil, false, nil, function() return E.db.ElvUI_EltreumUI.cursors.cursorcast.gradient end, function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorcast.gradient = value ElvUI_EltreumUI:CastCursor() end, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable or not E.db.ElvUI_EltreumUI.cursors.cursorcast.classcolor end)
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.description2 = ACH:Description(" ", 5, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.castclassgcd = ACH:Toggle(L["Class Colored GCD"], L["Use Class Colors for GCD"], 6, nil, false, nil, function() return E.db.ElvUI_EltreumUI.cursors.cursorgcd.classcolor end,function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorgcd.classcolor = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.colorgcd = ACH:Color(L["Custom Color GCD"], nil, 7, true, nil, function()
		local cursorgcd = E.db.ElvUI_EltreumUI.cursors.cursorgcd
		local d = P.ElvUI_EltreumUI.cursors.cursorgcd
		return cursorgcd.r, cursorgcd.g, cursorgcd.b, cursorgcd.a, d.r, d.g, d.b, d.a
	end,
			function(_, r, g, b, a)
				local cursorgcd = E.db.ElvUI_EltreumUI.cursors.cursorgcd
				cursorgcd.r, cursorgcd.g, cursorgcd.b, cursorgcd.a = r, g, b, a ElvUI_EltreumUI:CastCursor()
			end, function() return E.db.ElvUI_EltreumUI.cursors.cursorgcd.classcolor or (not E.db.ElvUI_EltreumUI.cursors.cursor.enable ) end)
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.description3 = ACH:Description(" ", 8, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.cursorcursorclasscolor = ACH:Toggle(L["Class Colored Combat"], L["Use Class Colors for Cursor"], 9, nil, false, nil, function() return E.db.ElvUI_EltreumUI.cursors.cursorcursor.classcolor end,function(_, value) E.db.ElvUI_EltreumUI.cursors.cursorcursor.classcolor = value ElvUI_EltreumUI:CastCursor() end)
	ElvUI_EltreumUI.Options.args.cursor.args.colors.args.cursorcursorcolor = ACH:Color(L["Custom Color Combat"], nil, 10, true, nil, function()
		local cursorcursor = E.db.ElvUI_EltreumUI.cursors.cursorcursor
		local d = P.ElvUI_EltreumUI.cursors.cursorcursor
		return cursorcursor.r, cursorcursor.g, cursorcursor.b, cursorcursor.a, d.r, d.g, d.b, d.a
	end,
			function(_, r, g, b, a)
				local cursorcursor = E.db.ElvUI_EltreumUI.cursors.cursorcursor
				cursorcursor.r, cursorcursor.g, cursorcursor.b, cursorcursor.a = r, g, b, a ElvUI_EltreumUI:CastCursor()
			end, function() return E.db.ElvUI_EltreumUI.cursors.cursorcursor.classcolor or (not E.db.ElvUI_EltreumUI.cursors.cursor.enable) end)
	ElvUI_EltreumUI.Options.args.cursor.args.texture = ACH:Group(L["Cursor Type"], nil, 2, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.cursors.cursor.enable end)
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.description1 = ACH:Description(L["Choose a type of cursor by clicking it"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.description2 = ACH:Description(function() return L["Currently selected cursor: "]..ElvUI_EltreumUI:CurrentTypeofCursor() end, 2, L["Choose a type of cursor by clicking it"], nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring1 = ACH:Execute(L["Type 1"], L["The Cursor will use this type as its texture"], 3, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring1.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring1')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring2 = ACH:Execute(L["Type 2"], L["The Cursor will use this type as its texture"], 4, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring2.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring2')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring3 = ACH:Execute(L["Type 3"], L["The Cursor will use this type as its texture"], 5, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring3.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring3')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring4 = ACH:Execute(L["Type 4"], L["The Cursor will use this type as its texture"], 6, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring4.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring4')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring5 = ACH:Execute(L["Type 5"], L["The Cursor will use this type as its texture"], 7, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring5.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring5')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring6 = ACH:Execute(L["Type 6"], L["The Cursor will use this type as its texture"], 8, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring6.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring6')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring7 = ACH:Execute(L["Type 7"], L["The Cursor will use this type as its texture"], 9, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring7.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring7')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring8 = ACH:Execute(L["Type 8"], L["The Cursor will use this type as its texture"], 10, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring8.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring8')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring9 = ACH:Execute(L["Type 9"], L["The Cursor will use this type as its texture"], 11, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring9.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring9')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring10 = ACH:Execute(L["Type 10"], L["The Cursor will use this type as its texture"], 12, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring10.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring10')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring11 = ACH:Execute(L["Type 11"], L["The Cursor will use this type as its texture"], 13, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring11.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring11')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring12 = ACH:Execute(L["Type 12"], L["The Cursor will use this type as its texture"], 14, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring12.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring12')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring13 = ACH:Execute(L["Type 13"], L["The Cursor will use this type as its texture"], 14, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring13.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring13')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring14 = ACH:Execute(L["Type 14"], L["The Cursor will use this type as its texture"], 14, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring14.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring14')
	ElvUI_EltreumUI.Options.args.cursor.args.texture.args.ring15 = ACH:Execute(L["Type 15"], L["The Cursor will use this type as its texture"], 14, function() E.db.ElvUI_EltreumUI.cursors.cursor.ring = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring15.tga' ElvUI_EltreumUI:CastCursor() end, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Cursor\\ring15')

	--loot
	ElvUI_EltreumUI.Options.args.loot = ACH:Group(E:TextGradient(LOOT, 0.50, 0.70, 1, 0.67, 0.95, 1), L["Add a scrolling loot text that will show items that you loot, filter which items you can loot, enable fast looting and create your own item wishlist"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.loot.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\loot'
	ElvUI_EltreumUI.Options.args.loot.args.loottext = ACH:Group(L["LootText"], nil, 1)
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.setting = ACH:Group("", nil, 1)
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.setting.inline = true
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.setting.args.description1 = ACH:Description(L["Show a floating loot text"], 1, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.setting.args.enable = ACH:Toggle(L["Enable"], L["Toggle On and Off"], 9, nil, false, nil, function() return E.db.ElvUI_EltreumUI.loot.loottext.enable end,function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.enable = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.types = ACH:Group(L["Text Types"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.types.args.honor = ACH:Toggle(HONOR, nil, 1, nil, false, nil, function() return E.db.ElvUI_EltreumUI.loot.loottext.honor end,function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.honor = value end, function() return not E.db.ElvUI_EltreumUI.loot.loottext.enable end)
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.types.args.currency = ACH:Toggle(CURRENCY, nil, 1, nil, false, nil, function() return E.db.ElvUI_EltreumUI.loot.loottext.currency end,function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.currency = value end, function() return not E.db.ElvUI_EltreumUI.loot.loottext.enable end)
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.types.args.pet = ACH:Toggle(L["Pets"], nil, 1, nil, false, nil, function() return E.db.ElvUI_EltreumUI.loot.loottext.pet end,function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.pet = value end, function() return not E.db.ElvUI_EltreumUI.loot.loottext.enable end)
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.types.args.skill = ACH:Toggle(SKILL, nil, 1, nil, false, nil, function() return E.db.ElvUI_EltreumUI.loot.loottext.skill end,function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.skill = value end, function() return not E.db.ElvUI_EltreumUI.loot.loottext.enable end)
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.filter = ACH:Group(L["Filter"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.filter.args.quality = ACH:Select(L["Minimum Loot Quality Filter"], L["Only items of this quality or better will be displayed"], 10, {
		["0"] = ITEM_QUALITY0_DESC,
		["1"] = ITEM_QUALITY1_DESC,
		["2"] = ITEM_QUALITY2_DESC,
		["3"] = ITEM_QUALITY3_DESC,
		["4"] = ITEM_QUALITY4_DESC,
	}, false, nil, function() return E.db.ElvUI_EltreumUI.loot.loottext.quality end, function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.quality = value end, function() return not E.db.ElvUI_EltreumUI.loot.loottext.enable end)
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.filter.args.quality.style = "radio"
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.scale = ACH:Group(L["Scale"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.scale.args.description1 = ACH:Description(L["Change the scale of LootText"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.scale.args.lootscale = ACH:Range(L["Set the size of LootText"], nil, 2, { min = 0.1, max = 1.5, step = 0.05 }, "full", function() return E.db.ElvUI_EltreumUI.loot.loottext.scale end, function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.scale = value end, function() return not E.db.ElvUI_EltreumUI.loot.loottext.enable end)
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.scale.args.reset = ACH:Execute(L["Reset Scale"], L["Return LootText to its default scale"], 3, function() E.db.ElvUI_EltreumUI.loot.loottext.scale = 0.65 end, nil, false, "full", nil, nil, function() return not E.db.ElvUI_EltreumUI.loot.loottext.enable end)
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.strata = ACH:Group(L["Strata"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.strata.args.description1 = ACH:Description(L["Change the strata of the Loot Text"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.strata.args.lootstrata = ACH:Select(" ", L["Set the level that LootText will be drawn to this"], 2, {
		["BACKGROUND"] = L["Background"],
		["LOW"] = L["Low"],
		["MEDIUM"] = L["Medium"],
		["HIGH"] = L["High"],
		["DIALOG"] = L["Dialog"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.loot.loottext.strata end, function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.strata = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.loot.loottext.enable end)
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.strata.args.lootstrata.style = "radio"
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.position = ACH:Group(L["Position"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.position.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.position.args.x = ACH:Range(L["Change the Horizontal Position of LootText (Default = 0)"], nil, 2, { min = -1000, max = 1000, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.loot.loottext.xOffset end, function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.xOffset = value end, function() return not E.db.ElvUI_EltreumUI.loot.loottext.enable end)
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.position.args.y = ACH:Range(L["Change the Vertical Position of LootText (Default = 200)"], nil, 3, { min = -1000, max = 1000, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.loot.loottext.yOffset end, function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.yOffset = value end, function() return not E.db.ElvUI_EltreumUI.loot.loottext.enable end)
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.fonts = ACH:Group(L["Fonts"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.fonts.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.fonts.args.size = ACH:Range(L["Font Size"], nil, 2, { min = 4, max = 160, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.loot.loottext.fontsize end, function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.fontsize = value end, function() return not E.db.ElvUI_EltreumUI.loot.loottext.enable end)
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.fonts.args.description2 = ACH:Description(L["Change the font of LootText to be the ElvUI Default Font found in General"], 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.fonts.args.customfont = ACH:Toggle(L["Use ElvUI General Font"], L["Change the font of LootText"], 4, nil, false, nil, function() return E.db.ElvUI_EltreumUI.loot.loottext.fontsetting end,function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.fontsetting = value E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.loot.loottext.fontsettingdmg or E.db.ElvUI_EltreumUI.loot.loottext.fontLSMenable or not E.db.ElvUI_EltreumUI.loot.loottext.enable end)
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.fonts.args.customfontdmg = ACH:Toggle(L["Use ElvUI Damage Font"], L["Change the font of LootText"], 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.loot.loottext.fontsettingdmg end,function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.fontsettingdmg = value E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.loot.loottext.fontsetting or E.db.ElvUI_EltreumUI.loot.loottext.fontLSMenable or not E.db.ElvUI_EltreumUI.loot.loottext.enable end)
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.fonts.args.customLSMenable = ACH:Toggle(L["Use Custom Font"], L["Change the font of LootText"], 6, nil, false, nil, function() return E.db.ElvUI_EltreumUI.loot.loottext.fontLSMenable end,function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.fontLSMenable = value E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.loot.loottext.fontsettingdmg or E.db.ElvUI_EltreumUI.loot.loottext.fontsetting end)
	ElvUI_EltreumUI.Options.args.loot.args.loottext.args.fonts.args.customLSMfont = ACH:SharedMediaFont(L["Font"], L["Choose a different font from the preselected ones"], 7, nil, function() return E.db.ElvUI_EltreumUI.loot.loottext.fontLSM end, function(_,fontvalue) E.db.ElvUI_EltreumUI.loot.loottext.fontLSM = fontvalue end, function() return E.db.ElvUI_EltreumUI.loot.loottext.fontsettingdmg or E.db.ElvUI_EltreumUI.loot.loottext.fontsetting or not E.db.ElvUI_EltreumUI.loot.loottext.fontLSMenable end)
	ElvUI_EltreumUI.Options.args.loot.args.fastloot = ACH:Group("Fast Loot", nil, 2)
	ElvUI_EltreumUI.Options.args.loot.args.fastloot.args.enable = ACH:Toggle(L["Enable Fast Loot"], L["Decrease the time it takes for auto loot to work, works with TSM"], 1, nil, false, "full", function() return E.db.ElvUI_EltreumUI.loot.fastloot end,function(_, value) E.db.ElvUI_EltreumUI.loot.fastloot = value SetCVar('autoLootDefault', 1) E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.loot.fastlootfilter or E.db.ElvUI_EltreumUI.loot.lootwishlistfilter end)
	ElvUI_EltreumUI.Options.args.loot.args.fastloot.args.enablefilter = ACH:Toggle(L["Enable Fast Loot with Loot Quality Filter"], L["Enable filtering item quality, items can still be looted by holding Shift or the mod key setup in Interface"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.loot.fastlootfilter end, function(_, value) E.db.ElvUI_EltreumUI.loot.fastlootfilter = value SetCVar('autoLootDefault', 0) E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.loot.fastloot or E.db.ElvUI_EltreumUI.loot.lootwishlistfilter end)
	ElvUI_EltreumUI.Options.args.loot.args.fastloot.args.enablewishlist = ACH:Toggle(L["Enable Fast Loot with Wishlist Filter"], L["Items not on the wishlist will not be looted, items can still be looted by holding Shift or the mod key setup in Interface"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.loot.lootwishlistfilter end, function(_, value) E.db.ElvUI_EltreumUI.loot.lootwishlistfilter = value SetCVar('autoLootDefault', 0) E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.loot.fastloot or E.db.ElvUI_EltreumUI.loot.fastlootfilter or #E.private.ElvUI_EltreumUI.wishlistID == 0 end)
	ElvUI_EltreumUI.Options.args.loot.args.fastloot.args.enablewishlistwarning = ACH:Toggle(L["Enable Wishlist Loot Warning"], L["Show a toast if an item in the wishlist is looted"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.loot.lootwishlistwarning end, function(_, value) E.db.ElvUI_EltreumUI.loot.lootwishlistwarning = value E:StaticPopup_Show('CONFIG_RL') end, function() return #E.private.ElvUI_EltreumUI.wishlistID == 0 end)
	ElvUI_EltreumUI.Options.args.loot.args.fastloot.args.autoclose = ACH:Toggle(L["Enable Automatically Closing Loot Window"], L["Loot Window will automatically close when using filters and the item desired is not found"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.loot.lootautoclose end, function(_, value) E.db.ElvUI_EltreumUI.loot.lootautoclose = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.loot.args.fastloot.args.confirmbop = ACH:Toggle(L["Enable Automatically Confirming Bind on Pickup"], L["Loot Window will automatically confirm looting Bind on Pickup items"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.loot.confirmbop end, function(_, value) E.db.ElvUI_EltreumUI.loot.confirmbop = value end)
	ElvUI_EltreumUI.Options.args.loot.args.fastloot.args.screenshot = ACH:Toggle(L["Enable Screenshotting if an item from the wishlist is looted"], L["Automatically screenshot when you loot an item from the wishlist"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.loot.lootwishlistscreenshot end, function(_, value) E.db.ElvUI_EltreumUI.loot.lootwishlistscreenshot = value E:StaticPopup_Show('CONFIG_RL') end, function() return #E.private.ElvUI_EltreumUI.wishlistID == 0 end, E.Retail)
	ElvUI_EltreumUI.Options.args.loot.args.fastloot.args.filterquality = ACH:Select(L["Minimum Loot Quality Filter"], L["Only items of this quality or better will be looted when using Fast Loot Filter"], 4, {
		["0"] = ITEM_QUALITY0_DESC,
		["1"] = ITEM_QUALITY1_DESC,
		["2"] = ITEM_QUALITY2_DESC,
		["3"] = ITEM_QUALITY3_DESC,
		["4"] = ITEM_QUALITY4_DESC,
	}, false, "full", function() return E.db.ElvUI_EltreumUI.loot.fastlootquality end, function(_, value) E.db.ElvUI_EltreumUI.loot.fastlootquality = value E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.loot.fastloot or not E.db.ElvUI_EltreumUI.loot.fastlootfilter or E.db.ElvUI_EltreumUI.loot.lootwishlistfilter end)
	ElvUI_EltreumUI.Options.args.loot.args.fastloot.args.sound = ACH:Toggle(L["Enable Playing a Sound if an item from the wishlist is looted"], nil, 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.loot.lootwishlistsoundenable end, function(_, value) E.db.ElvUI_EltreumUI.loot.lootwishlistsoundenable = value E:StaticPopup_Show('CONFIG_RL') end, function() return #E.private.ElvUI_EltreumUI.wishlistID == 0 end)
	ElvUI_EltreumUI.Options.args.loot.args.fastloot.args.soundLSM = ACH:SharedMediaSound(L["Select a Sound"], L["Choose a Sound from SharedMedia files"], 5, "full", function() return E.db.ElvUI_EltreumUI.loot.lootwishlistsound end, function(_,key) E.db.ElvUI_EltreumUI.loot.lootwishlistsound = key E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.loot.lootwishlistsoundenable or (#E.private.ElvUI_EltreumUI.wishlistID == 0) end)
	ElvUI_EltreumUI.Options.args.loot.args.fastloot.args.lootwishlistenter = ACH:Input(L["Item Wishlist (type the Item ID)"], L["Items in your wishlist will display a warning when looted"], 6, nil, "full", function() return E.private.ElvUI_EltreumUI.wishlistID end,
			function(_, value)
				value = tonumber(value)
				local item = Item:CreateFromItemID(value)
				if not item:IsItemEmpty() then
					item:ContinueOnItemLoad(function()
						local itemName = item:GetItemName()
						local itemID = tonumber(value)
						tinsert(E.private.ElvUI_EltreumUI.wishlistName, itemName)
						tinsert(E.private.ElvUI_EltreumUI.wishlistID, itemID)
					end)
				end
			end, nil, nil,
			function(_, value)
				E.PopupDialogs["ELTRUISMINVALID"] = {
					text = L["Invalid Item, you need to add an itemID which can be found in the tooltip or in Wowhead"],
					button1 = OKAY,
					timeout = 0,
					whileDead = 1,
					hideOnEscape = true,
				}
				if tonumber(value) ~= nil then
					value = tonumber(value)
					local item = Item:CreateFromItemID(value)
					if item == nil then
						return E:StaticPopup_Show('ELTRUISMINVALID') and false
					elseif item:IsItemEmpty() then
						return E:StaticPopup_Show('ELTRUISMINVALID') and false
					else
						return true
					end
				else
					return E:StaticPopup_Show('ELTRUISMINVALID') and false
				end
			end)
	ElvUI_EltreumUI.Options.args.loot.args.fastloot.args.lootwishlistremove = ACH:Select(L["Remove item from Wishlist"], REMOVE, 7, E.private.ElvUI_EltreumUI.wishlistName, true, "full", function() return E.private.ElvUI_EltreumUI.wishlistName end, function(_,value)
		local item = tonumber(value)
		tremove(E.private.ElvUI_EltreumUI.wishlistID, item)
		tremove(E.private.ElvUI_EltreumUI.wishlistName, item)
	end)

	--misc
	ElvUI_EltreumUI.Options.args.misc = ACH:Group(E:TextGradient(L["Misc"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Various miscellaneous features such as death animations, stealth texture, mail sound, /roll sounds and more"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.misc.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\misc'
	ElvUI_EltreumUI.Options.args.misc.args.general = ACH:Group(L["General"], nil, 1)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.description1 = ACH:Description(L["Show Eltruism Game Menu Button"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.misc.args.general.args.gamemenu = ACH:Toggle(L["Enable"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.gamemenu end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.gamemenu = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.description2 = ACH:Description(L["Auto open the Rogue Order Hall, to avoid opening hold CTRL or SHIFT or ALT while talking to the NPC"], 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.rogueorderhall = ACH:Toggle(L["Enable"], L["Enable the Rogue Order Hall Auto Open"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.quests.rogueopen end, function(_, value) E.db.ElvUI_EltreumUI.quests.rogueopen = value E:StaticPopup_Show('CONFIG_RL') end, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.description3 = ACH:Description("", 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.misc.args.general.args.rollsound = ACH:Toggle(L["Add Sounds to /roll when someone gets a 1 or a 100"], L["Plays a sound if someone rolls 1 or 100 out 100"], 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.chat.rollsound end, function(_, value) E.db.ElvUI_EltreumUI.chat.rollsound = value PlaySoundFile("Interface\\AddOns\\ElvUI_EltreumUI\\Media\\sound\\WillSmith-Ahaha.ogg", "Master") E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.description4 = ACH:Description(L["Hide Talking Head"], 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.talkinghead = ACH:Toggle(L["Enable"], L["Prevent Blizzard's Talking Head from appearing"], 8, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.hidetalkinghead end, function(_, value) E.db.ElvUI_EltreumUI.skins.hidetalkinghead = value E:StaticPopup_Show('CONFIG_RL') end, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.description5 = ACH:Description(L["Automatically take Screenshots"], 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.misc.args.general.args.autoscreenshot = ACH:Toggle(L["Enable"], L["Automatically take Screenshots such as when leveling up"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.screenshot end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.screenshot = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.description6 = ACH:Description(L["Vignette"], 11, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.misc.args.general.args.stealthvignette = ACH:Toggle(L["Add a vignette effect while in stealth"], L["Turn the effect on"], 12, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.stealtheffect end, function(_, value) E.db.ElvUI_EltreumUI.skins.stealtheffect = value E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.skins.screenvignette end)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.everywherevignette = ACH:Toggle(L["Add a vignette effect always"], L["Turn the effect on"], 13, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.screenvignette end, function(_, value) E.db.ElvUI_EltreumUI.skins.screenvignette = value E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.skins.stealtheffect end)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.everywherevignettealpha = ACH:Range(L["Alpha"], nil, 14, { min = 0, max = 1, step = 0.01 }, nil, function() return E.db.ElvUI_EltreumUI.skins.screenvignettealpha end, function(_, value) E.db.ElvUI_EltreumUI.skins.screenvignettealpha = value ElvUI_EltreumUI:StealthOptions() end, function() return not E.db.ElvUI_EltreumUI.skins.screenvignette end)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.description7 = ACH:Description(L["Item Deletion"], 15, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.misc.args.general.args.delete = ACH:Toggle(L["Automatically type DELETE on the popup"], L["Will not delete the item, will simply type DELETE instead you needing to type it"], 16, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.delete end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.delete = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.description8 = ACH:Description(L["Play a Sound when receiving mail"], 17, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.misc.args.general.args.mailsoundenable = ACH:Toggle(L["Enable"], nil, 18, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.mailsoundenable end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.mailsoundenable = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.mailsoundselect = ACH:Select(SOUND, nil, 19, { ["tts"] = L["Text to Speech"], ["sharedmedia"] = CUSTOM, }, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.mailsoundtype end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.mailsoundtype = value end, function() return not E.db.ElvUI_EltreumUI.otherstuff.mailsoundenable end)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.mailsoundselect.style = "radio"
	ElvUI_EltreumUI.Options.args.misc.args.general.args.mailsoundLSM = ACH:SharedMediaSound(L["Select a Sound"], L["Choose a Sound from SharedMedia files"], 20, "double", function() return E.db.ElvUI_EltreumUI.otherstuff.mailsound end, function(_,key) E.db.ElvUI_EltreumUI.otherstuff.mailsound = key E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.mailsoundenable or E.db.ElvUI_EltreumUI.otherstuff.mailsoundtype == "tts" end)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.mailsoundTTS = ACH:Input(L["Text to Speech announcement"], nil, 21, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.mailsoundttstext end, function(_, value)
		E.db.ElvUI_EltreumUI.otherstuff.mailsoundttstext = tostring(value)
		if E.db.ElvUI_EltreumUI.otherstuff.mailsoundttsvoice ~= nil then
			C_VoiceChat.SpeakText(E.db.ElvUI_EltreumUI.otherstuff.mailsoundttsvoice, tostring(value) , Enum.VoiceTtsDestination.LocalPlayback, 0, E.db.ElvUI_EltreumUI.otherstuff.mailsoundttsvoicevolume)
		end
	end, function() return not E.db.ElvUI_EltreumUI.otherstuff.mailsoundenable or E.db.ElvUI_EltreumUI.otherstuff.mailsoundtype == "sharedmedia" end)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.mailsoundTTSconfig = ACH:Select(L["Text to Speech Config"], nil, 22, function()
		local Voices = {}
		for _, v in pairs(C_VoiceChat.GetTtsVoices()) do
			--Voices[i] = v.voiceID
			Voices[v.voiceID] = v.name
		end
		return Voices
	end, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.mailsoundttsvoice end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.mailsoundttsvoice = tonumber(value) C_VoiceChat.SpeakText(E.db.ElvUI_EltreumUI.otherstuff.mailsoundttsvoice, TEXT_TO_SPEECH, Enum.VoiceTtsDestination.LocalPlayback, 0, E.db.ElvUI_EltreumUI.otherstuff.mailsoundttsvoicevolume) end, function() return not E.db.ElvUI_EltreumUI.otherstuff.mailsoundenable or E.db.ElvUI_EltreumUI.otherstuff.mailsoundtype ~= "tts" end)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.mailsoundTTSvolume = ACH:Range(VOLUME, nil, 23, { min = 1, max = 100, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.mailsoundttsvoicevolume end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.mailsoundttsvoicevolume = value end, function() return not E.db.ElvUI_EltreumUI.otherstuff.mailsoundenable or E.db.ElvUI_EltreumUI.otherstuff.mailsoundtype ~= "tts" end)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.description9 = ACH:Description(L["Mail Animation"], 24, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.misc.args.general.args.mailAnimation = ACH:Toggle(L["Enable Mail Animation"], L["Play a Blizzard animation when receiving mail or when new mail exists"], 25, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.mailAnimation end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.mailAnimation = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.misc.args.general.args.description10 = ACH:Description(_G.TRADE_SKILLS, 26, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.misc.args.general.args.bagProfessionIcons = ACH:Toggle(L["Add Profession Buttons to Bags"], nil, 27, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.bagProfessionIcons end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.bagProfessionIcons = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.misc.args.combat = ACH:Group(L["Combat"], nil, 2)
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.description1 = ACH:Description(L["Show Buffs in Arena and hide them outside (will overwrite Eltruism default settings)"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.arenabuffs = ACH:Toggle(L["Enable"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.arenabuffs end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.arenabuffs = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.description2 = ACH:Description(function() if E.Retail then return L["Hide Arena Frames in Arena due to Gladius/GladiusEX or another addon"] else return L["Hide Arena Frames in Arena due to Gladius/Gladdy or another addon"] end end, 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Classic)
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.arenaUF = ACH:Toggle(L["Enable"], nil, 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.arenaunitframes end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.arenaunitframes = value E:StaticPopup_Show('CONFIG_RL') end, nil, E.Classic)
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.description3 = ACH:Description(L["Hide Raid Unitframes in battlegrounds due to addons like Battleground Enemies"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.battlegroundUF = ACH:Toggle(L["Enable"], nil, 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.bgunitframes end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.bgunitframes = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.description4 = ACH:Description(" ", 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.combattextindicator = ACH:Toggle(L["Enable Entering/Leaving Combat Indicator Texts"], L["Adds a +Combat and -Combat for when entering and leaving combat"], 8, nil, false, "full", function() return E.db.ElvUI_EltreumUI.loot.loottext.combatindicator end, function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.combatindicator = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.combattextindicatorcustom = ACH:Toggle(L["Custom Texts"], L["Adds a +Combat and -Combat for when entering and leaving combat"], 9, nil, false, "full", function() return E.db.ElvUI_EltreumUI.loot.loottext.combatindicatorcustom.enable end, function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.combatindicatorcustom.enable = value end, function() return not E.db.ElvUI_EltreumUI.loot.loottext.combatindicator end)
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.combattextenter = ACH:Input(ENTERING_COMBAT, nil, 10, false, "double", function() return E.db.ElvUI_EltreumUI.loot.loottext.combatindicatorcustom.enter end, function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.combatindicatorcustom.enter = tostring(value) end, function() return not E.db.ElvUI_EltreumUI.loot.loottext.combatindicator or not E.db.ElvUI_EltreumUI.loot.loottext.combatindicatorcustom.enable end)
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.combattextentercolor = ACH:Color(L["Color"], nil, 11, false, nil, function()
		local color = E.db.ElvUI_EltreumUI.loot.loottext.combatindicatorcustom.entercolor
		local d = P.ElvUI_EltreumUI.loot.loottext.combatindicatorcustom.entercolor
		return color.r, color.g, color.b, 1, d.r, d.g, d.b,1
	end, function(_, r, g, b)
		local color = E.db.ElvUI_EltreumUI.loot.loottext.combatindicatorcustom.entercolor
		color.r, color.g, color.b = r, g, b
	end, function() return not E.db.ElvUI_EltreumUI.loot.loottext.combatindicator or not E.db.ElvUI_EltreumUI.loot.loottext.combatindicatorcustom.enable end)
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.combattextleave = ACH:Input(LEAVING_COMBAT, nil, 12, false, "double", function() return E.db.ElvUI_EltreumUI.loot.loottext.combatindicatorcustom.leave end, function(_, value) E.db.ElvUI_EltreumUI.loot.loottext.combatindicatorcustom.leave = tostring(value) end, function() return not E.db.ElvUI_EltreumUI.loot.loottext.combatindicator or not E.db.ElvUI_EltreumUI.loot.loottext.combatindicatorcustom.enable end)
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.combattextleavecolor = ACH:Color(L["Color"], nil, 13, false, nil, function()
		local color = E.db.ElvUI_EltreumUI.loot.loottext.combatindicatorcustom.leavecolor
		local d = P.ElvUI_EltreumUI.loot.loottext.combatindicatorcustom.leavecolor
		return color.r, color.g, color.b, 1, d.r, d.g, d.b, 1
	end, function(_, r, g, b)
		local color = E.db.ElvUI_EltreumUI.loot.loottext.combatindicatorcustom.leavecolor
		color.r, color.g, color.b = r, g, b
	end, function() return not E.db.ElvUI_EltreumUI.loot.loottext.combatindicator or not E.db.ElvUI_EltreumUI.loot.loottext.combatindicatorcustom.enable end)
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.description5 = ACH:Description(" ", 14, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.darksouls = ACH:Toggle(L["Enable a Dark Souls death animation"], L["Plays an animation when you die"], 15, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.playerdeath end, function(_, value) E.db.ElvUI_EltreumUI.skins.playerdeath = value end, function() return E.db.ElvUI_EltreumUI.skins.playerdeathgta or E.db.ElvUI_EltreumUI.skins.playerdeathcustom end)
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.gta = ACH:Toggle(L["Enable a GTA death animation"], L["Plays an animation when you die"], 15, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.playerdeathgta end, function(_, value) E.db.ElvUI_EltreumUI.skins.playerdeathgta = value end, function() return E.db.ElvUI_EltreumUI.skins.playerdeath or E.db.ElvUI_EltreumUI.skins.playerdeathcustom end)
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.customdeath = ACH:Toggle(L["Enable a Custom death animation"], L["Plays an animation when you die"], 16, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.playerdeathcustom end, function(_, value) E.db.ElvUI_EltreumUI.skins.playerdeathcustom = value end, function() return E.db.ElvUI_EltreumUI.skins.playerdeathgta or E.db.ElvUI_EltreumUI.skins.playerdeath end)
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.customdeathtext = ACH:Input(L["Custom Death Text"], L["The text displayed when you die using the custom text option"], 17, false, nil, function() return E.db.ElvUI_EltreumUI.skins.playerdeathcustomtext end, function(_, value) E.db.ElvUI_EltreumUI.skins.playerdeathcustomtext = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return E.db.ElvUI_EltreumUI.skins.playerdeathgta or E.db.ElvUI_EltreumUI.skins.playerdeath or (not E.db.ElvUI_EltreumUI.skins.playerdeathcustom) end)
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.description6 = ACH:Description(" ", 18, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.ClassicHC)
	ElvUI_EltreumUI.Options.args.misc.args.combat.args.playerdeathhardcore = ACH:Toggle(L["Play a sound when you Die in Hardcore"], nil, 19, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.playerdeathhardcore end, function(_, value) E.db.ElvUI_EltreumUI.skins.playerdeathhardcore = value end, nil, not E.ClassicHC)
	--ElvUI_EltreumUI.Options.args.misc.args.combat.args.guildmemberdeathhardcore = ACH:Toggle(L["Enable Animation and Sound when Guild Member Dies"], nil, 20, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.guildmemberdeathhardcore end, function(_, value) E.db.ElvUI_EltreumUI.skins.guildmemberdeathhardcore = value end, nil, not E.ClassicHC)
	ElvUI_EltreumUI.Options.args.misc.args.datatext = ACH:Group(L["DataTexts"], nil, 2)
	ElvUI_EltreumUI.Options.args.misc.args.datatext.args.description1 = ACH:Description(L["Dynamic Datatext that changes according to class to show Ammo or Soul Shards when playing Hunter, Warrior, Rogue or Warlock"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail)
	ElvUI_EltreumUI.Options.args.misc.args.datatext.args.dynamicdatatext = ACH:Toggle(L["Enable"], L["Enable the Dynamic Datatext"], 2, nil, false,'full',function() return E.db.ElvUI_EltreumUI.otherstuff.dynamicdatatext end,function(_, value) E.db.ElvUI_EltreumUI.otherstuff.dynamicdatatext = value end, nil, E.Retail)
	ElvUI_EltreumUI.Options.args.misc.args.datatext.args.description2 = ACH:Description(" ", 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.misc.args.datatext.args.xp = ACH:Toggle(L["Dynamically toggle the mouseover of the Experience Bar"], L["Shows XP bar when below max level, makes it mouseover when max level"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.dynamicxpbar end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.dynamicxpbar = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.misc.args.datatext.args.description3 = ACH:Description(" ", 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.misc.args.datatext.args.bottomclasstexture = ACH:Toggle(L["Class Color Texture with Eltruism Datatext"], nil, 6, nil, false, "double", function() return E.db.ElvUI_EltreumUI.otherstuff.datatextclasscolorbar end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.datatextclasscolorbar = value ElvUI_EltreumUI:BottomDatabarTexture() end)
	ElvUI_EltreumUI.Options.args.misc.args.datatext.args.bottomclasstexturealpha = ACH:Range(L["Alpha"], nil, 7, { min = 0, max = 1, step = 0.01 }, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.datatextclasscolorbaralpha end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.datatextclasscolorbaralpha = value ElvUI_EltreumUI:BottomDatabarTexture() end, function() return not E.db.ElvUI_EltreumUI.otherstuff.datatextclasscolorbar end)
	ElvUI_EltreumUI.Options.args.misc.args.datatext.args.enablecustomcolorbottomclasstexture = ACH:Toggle(L["Enable Custom Colors"], nil, 8, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.datatextclasscolor.custom end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.datatextclasscolor.custom = value ElvUI_EltreumUI:BottomDatabarTexture() end, function() return not E.db.ElvUI_EltreumUI.otherstuff.datatextclasscolorbar end)
	ElvUI_EltreumUI.Options.args.misc.args.datatext.args.customcolorbottomclasstexture = ACH:Color(L["Custom Color"], nil, 9, false, nil, function() local dr = P.ElvUI_EltreumUI.otherstuff.datatextclasscolor.r local dg = P.ElvUI_EltreumUI.otherstuff.datatextclasscolor.g local db = P.ElvUI_EltreumUI.otherstuff.datatextclasscolor.b return E.db.ElvUI_EltreumUI.otherstuff.datatextclasscolor.r, E.db.ElvUI_EltreumUI.otherstuff.datatextclasscolor.g, E.db.ElvUI_EltreumUI.otherstuff.datatextclasscolor.b, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.otherstuff.datatextclasscolor.r, E.db.ElvUI_EltreumUI.otherstuff.datatextclasscolor.g, E.db.ElvUI_EltreumUI.otherstuff.datatextclasscolor.b = r, g, b ElvUI_EltreumUI:BottomDatabarTexture() end, function() return not E.db.ElvUI_EltreumUI.otherstuff.datatextclasscolor.custom or not E.db.ElvUI_EltreumUI.otherstuff.datatextclasscolorbar end)
	ElvUI_EltreumUI.Options.args.misc.args.datatext.args.description4 = ACH:Description(L["Datatext Hiding"], 10, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.misc.args.datatext.args.leftdatatexthide = ACH:Toggle(L["Hide Left Chat Datatext out of Combat"], nil, 11, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.leftdatatextcombatshow end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.leftdatatextcombatshow = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.datatexts.panels.LeftChatDataPanel.enable end)
	ElvUI_EltreumUI.Options.args.misc.args.datatext.args.rightdatatexthide = ACH:Toggle(L["Hide Right Chat Datatext out of Combat"], nil, 11, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.rightdatatextcombatshow end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.rightdatatextcombatshow = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.datatexts.panels.RightChatDataPanel.enable end)
	ElvUI_EltreumUI.Options.args.misc.args.datatext.args.description5 = ACH:Description(L["Eltruism Hearthstones/Teleports"], 12, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.misc.args.datatext.args.teleporttype = ACH:Select(L["Select which type of teleports to use on double click"], nil, 13, {
		["ITEM"] = _G.ITEMS,
		["SPELL"] = _G.SPELLS,
	}, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.datatextteleporttype end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.datatextteleporttype = value end)
	ElvUI_EltreumUI.Options.args.misc.args.datatext.args.teleporttype.style = "radio"
	ElvUI_EltreumUI.Options.args.misc.args.datatext.args.teleport = ACH:Select(L["Select Spell/Item"], nil, 11, function()
		local tpspellsitems = {}
		for _, v in pairs(ElvUI_EltreumUI:GetTeleportSpells()) do
			if E.db.ElvUI_EltreumUI.otherstuff.datatextteleporttype == "SPELL" then
				local spellData = GetSpellInfo(v)
				local hasSpell = IsSpellKnown(v)
				if hasSpell then
					tpspellsitems[v] = spellData.name
				end
			else
				local name, itemLink = GetItemInfo(v)
				local hasItem = GetItemCount(v)
				if name and ((hasItem > 0 and IsUsableItem(v)) or (not E.Classic and PlayerHasToy(v) and C_ToyBox.IsToyUsable(v))) then
					local itemid = itemLink:match("item:(%d+)")
					tpspellsitems[itemid] = name
				end
			end
		end
		return tpspellsitems
	end, false, "full", function()
		if E.db.ElvUI_EltreumUI.otherstuff.datatextteleporttype == "SPELL" then
			local spellData = GetSpellInfo(tostring(E.db.ElvUI_EltreumUI.otherstuff.datatextteleport))
			if spellData then
				local value = spellData.spellID
				if value then
					return value
				end
			else
				return 187874 --fallback value
			end
		else
			local _, itemLink = GetItemInfo(E.db.ElvUI_EltreumUI.otherstuff.datatextteleport)
			if itemLink then
				local itemid = itemLink:match("item:(%d+)")
				return itemid
			end
		end
	end,
			function(_, value)
				if E.db.ElvUI_EltreumUI.otherstuff.datatextteleporttype == "SPELL" then
					local spellData = GetSpellInfo(tostring(value))
					if spellData then
						local value = spellData.spellID
						if value then
							E.db.ElvUI_EltreumUI.otherstuff.datatextteleport = value
						end
					end
				else
					local name = GetItemInfo(value)
					E.db.ElvUI_EltreumUI.otherstuff.datatextteleport = tostring(name)
				end
			end)

	--unitframes
	ElvUI_EltreumUI.Options.args.unitframes = ACH:Group(E:TextGradient(L["Unitframes"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Add Gradient, Custom Textures, Models, change fill orientation and more"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.unitframes.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\unitframes'
	ElvUI_EltreumUI.Options.args.unitframes.args.enableufmods = ACH:Toggle(L["Enable Unitframe Modifications"], L["Enable changing textures and gradients for ElvUI unitframes"], 1, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.UFmodifications end,function(_, value) E.db.ElvUI_EltreumUI.unitframes.UFmodifications = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general = ACH:Group(L["General"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.orientation = ACH:Group(L["Fill Orientation"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.orientation.args.description1 = ACH:Description(L["Unitframe Fill Orientation"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.orientation.args.setorientation = ACH:Select("", nil, 4, {
		["HORIZONTAL"] = L["Horizontal"],
		["VERTICAL"] = L["Vertical"],
	}, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.UForientation end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.UForientation = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.orientation.args.setorientation.style = "radio"
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance = ACH:Group(L["Appearance"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.description1 = ACH:Description(L["Change the look of frames to Dark or Light mode"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.darkmode = ACH:Toggle(L["Dark Mode"], L["This will set colors to black with class colors when losing health"], 2, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.darkmode end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.darkmode = value end, function() return E.db.ElvUI_EltreumUI.unitframes.lightmode or not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.lightmode = ACH:Toggle(L["Light Mode"], L["This will set colors to class based with black backgrounds when losing health"], 2, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.lightmode end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.lightmode = value end, function() return E.db.ElvUI_EltreumUI.unitframes.darkmode or not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.apply = ACH:Execute(L["Apply"], L["Apply the mode selected"], 3, function()
		if E.db.ElvUI_EltreumUI.unitframes.lightmode then
			ElvUI_EltreumUI:LightMode()
			E:StaggeredUpdateAll()
			E:StaticPopup_Show('CONFIG_RL')
		elseif E.db.ElvUI_EltreumUI.unitframes.darkmode then
			ElvUI_EltreumUI:DarkMode()
			E:StaggeredUpdateAll()
			E:StaticPopup_Show('CONFIG_RL')
		else
			ElvUI_EltreumUI:LightMode()
			E:StaggeredUpdateAll()
			E:StaticPopup_Show('CONFIG_RL')
		end
	end, nil, false, nil, nil, nil, function() return (not E.db.ElvUI_EltreumUI.unitframes.UFmodifications) end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.description2 = ACH:Description(L["Light Mode Texture Version"], 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.textureselect = ACH:Select("", nil, 5, {
		["V1"] = L["Version 1"],
		["V2"] = L["Version 2"],
		["V3"] = L["Version 3"],
		["NONE"] = L["None"],
	}, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.uftextureversion end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.uftextureversion = value E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable or not E.db.ElvUI_EltreumUI.unitframes.UFmodifications or not E.db.ElvUI_EltreumUI.unitframes.lightmode end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.textureselect.style = "radio"
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.description3 = ACH:Description(L["Change the Class Power background"], 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.darkpower = ACH:Toggle(L["Dark Power Background"], L["Sets Class Power backgrounds to be black"], 7, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.darkpowercolor end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.darkpowercolor = value end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.description4 = ACH:Description(L["Rest Icon"], 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.restingicon = ACH:Toggle(L["Replace ElvUI Rest Icon with Blizzard's Animated one"], nil, 8, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.blizzardresticon end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.blizzardresticon = value E:StaticPopup_Show('CONFIG_RL') end, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.restingiconclasscolor = ACH:Toggle(L["Use Class Colors"], nil, 9, nil, false,nil, function() return E.db.ElvUI_EltreumUI.unitframes.blizzardresticonclasscolor end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.blizzardresticonclasscolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.blizzardresticon or E.db.ElvUI_EltreumUI.unitframes.blizzardresticongradient end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.restingicongradient = ACH:Toggle(L["Gradient Mode"], nil, 10, nil, false,nil, function() return E.db.ElvUI_EltreumUI.unitframes.blizzardresticongradient end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.blizzardresticongradient = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.blizzardresticon or E.db.ElvUI_EltreumUI.unitframes.blizzardresticonclasscolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.description5 = ACH:Description(L["Blizzard"], 11, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.skinblizzraid = ACH:Toggle(L["Skin Blizzard Raid Frames"], L["Adds Gradient, Custom Textures, Shadows, Font and Role Icons to Blizzard Raid Frames"], 12, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.blizzardraidframes end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.blizzardraidframes = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.description6 = ACH:Description(L["Combat Indicator"], 13, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.skincombaticons = ACH:Toggle(L["Change Combat Indicators to be class based"], nil, 14, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.classcombaticons end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.classcombaticons = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.description7 = ACH:Description(L["Heal Prediction"], 15, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.healpredictionskin = ACH:Toggle(L["Use ElvUI Unitframe Texture"], nil, 16, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enableHealComm end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enableHealComm = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.description8 = ACH:Description(L["Aura Bars"], 17, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.appearance.args.thinaurabars = ACH:Toggle(L["Thin Aura Bars"], nil, 18, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.thinmodeaurabars end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.thinmodeaurabars = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.backdrop = ACH:Group(L["Health"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.backdrop.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.backdrop.args.hide = ACH:Toggle(L["Hide Backdrop"], L["Sets the Backdrop as Transparent/Hidden"], 2, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.backdrophidden end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.backdrophidden = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.backdrop.args.texture = ACH:SharedMediaStatusbar(L["Backdrop Texture"], L["Select a Texture"], 3, "full", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.backdroptexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.backdroptexture = key end, function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable or not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.backdrop.args.description2 = ACH:Description(" ", 4, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.backdrop.args.backdropalpha = ACH:Range(L["Backdrop Alpha"], L["Change the transparency of the backdrop"], 5, { min = 0, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.backdropalpha end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.backdropalpha = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.backdrop.args.healthalpha = ACH:Range(L["Health Alpha"], L["Change the transparency of the health"], 5, { min = 0, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.healthalpha end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.healthalpha = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait = ACH:Group(L["Portrait"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.general = ACH:Group(L["General"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.general.args.description1 = ACH:Description(L["Target Portrait Fix"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.general.args.enableportraitfix = ACH:Toggle(L["Automatically rotate Target Portrait"], L["Detects target's species and uses it to fix the rotation of the Target's 3D Portrait"], 2, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.portraitfix end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portraitfix = value end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.general.args.offset = ACH:Toggle(L["Automatically offset Player/Target Portrait"], L["Detects player and target's species and uses it to fix the offset of the 3D Portrait"], 3, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.portraitfixoffset end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portraitfixoffset = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.portraitfix end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.general.args.enableportraitdead = ACH:Toggle(L["Pause and Desaturate Portrait if Dead"], nil, 4, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.portraitdead end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portraitdead = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.portraitfix end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.general.args.description2 = ACH:Description(L["Portrait Skin"], 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.general.args.enableportraitskin = ACH:Toggle(L["Enable Portrait Skin"], nil, 8, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.portrait.enable end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.enable = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.general.args.gradient = ACH:Toggle(L["Enable Gradient"], nil, 9, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.portrait.gradient end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.gradient = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.general.args.shadow = ACH:Toggle(L["Enable Shadows"], nil, 10, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.portrait.shadow end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.shadow = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player = ACH:Group(L["Player"], nil, 20, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.enable = ACH:Toggle(L["Enable"], nil, 0, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.portraittype = ACH:Select(L["Type"], L["Choose Portrait Type"], 1, {
		["CIRCLE"] = L["Circle"],
		["BLIZZARD"] = L["Blizzard"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.player.type end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.player.type = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.player.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.size = ACH:Range(L["Size"], nil, 2, { min = 8, max = 128, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.player.size end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.player.size = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.anchor = ACH:Select(L["Anchor Point"], L["What point to anchor to the frame you set to attach to."], 2, {
		LEFT = L["Left"],
		CENTER = L["Middle"],
		RIGHT = L["Right"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.player.position.align end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.player.position.align = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.xoffset = ACH:Range(L["X-Offset"], nil, 2, { min = -300, max = 300, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.player.position.x end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.player.position.x = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.yoffset = ACH:Range(L["Y-Offset"], nil, 2, { min = -300, max = 300, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.player.position.y end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.player.position.y = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.scale = ACH:Range(L["Scale"], nil, 2, { min = -0.15, max = 0.29, step = 0.01 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.player.scale end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.player.scale = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.edge = ACH:Toggle(L["Edge"], nil, 3, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.player.edge end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.player.edge = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.player.type ~= "BLIZZARD" or E.db.ElvUI_EltreumUI.unitframes.portrait.player.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.rare = ACH:Toggle(L["Rare"], nil, 3, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.player.rare end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.player.rare = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.player.type ~= "CIRCLE" or E.db.ElvUI_EltreumUI.unitframes.portrait.player.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.reversegradient = ACH:Toggle(L["Reverse Gradient"], nil, 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.player.reversegradient end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.player.reversegradient = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.player.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.defaultgradient = ACH:Toggle(L["Default Gradient Colors"], nil, 5, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.player.defaultgradient end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.player.defaultgradient = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.player.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.enablecustomcolor = ACH:Toggle(L["Enable Custom Colors"], nil, 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.player.customcolor end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.player.customcolor = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.customcolor = ACH:Color(L["Custom Color"], nil, 7, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.portrait.player.color.r local dg = P.ElvUI_EltreumUI.unitframes.portrait.player.color.g local db = P.ElvUI_EltreumUI.unitframes.portrait.player.color.b return E.db.ElvUI_EltreumUI.unitframes.portrait.player.color.r, E.db.ElvUI_EltreumUI.unitframes.portrait.player.color.g, E.db.ElvUI_EltreumUI.unitframes.portrait.player.color.b, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.portrait.player.color.r, E.db.ElvUI_EltreumUI.unitframes.portrait.player.color.g, E.db.ElvUI_EltreumUI.unitframes.portrait.player.color.b = r, g, b ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.player.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.description1 = ACH:Description(" ", 8, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.custom = ACH:Toggle(L["Enable Custom Textures"], nil, 9, nil, false, 'full', function() return E.db.ElvUI_EltreumUI.unitframes.portrait.player.custom end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.player.custom = value if value == true and E.db.ElvUI_EltreumUI.unitframes.portrait.player.customcircle then E.db.ElvUI_EltreumUI.unitframes.portrait.player.type = "CIRCLE" end ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.customcircle = ACH:Toggle(L["RAID_TARGET_2"], nil, 10, nil, false, 'full', function() return E.db.ElvUI_EltreumUI.unitframes.portrait.player.customcircle end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.player.customcircle = value if value == true then E.db.ElvUI_EltreumUI.unitframes.portrait.player.type = "CIRCLE" end ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.player.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.custombg = ACH:Toggle(L["Background"], nil, 11, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.player.background end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.player.background = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.player.customcircle or not E.db.ElvUI_EltreumUI.unitframes.portrait.player.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.custombgcolor = ACH:Color(L["Background Color"], nil, 12, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.portrait.player.backgroundcolor.r local dg = P.ElvUI_EltreumUI.unitframes.portrait.player.backgroundcolor.g local db = P.ElvUI_EltreumUI.unitframes.portrait.player.backgroundcolor.b return E.db.ElvUI_EltreumUI.unitframes.portrait.player.backgroundcolor.r, E.db.ElvUI_EltreumUI.unitframes.portrait.player.backgroundcolor.g, E.db.ElvUI_EltreumUI.unitframes.portrait.player.backgroundcolor.b, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.portrait.player.backgroundcolor.r, E.db.ElvUI_EltreumUI.unitframes.portrait.player.backgroundcolor.g, E.db.ElvUI_EltreumUI.unitframes.portrait.player.backgroundcolor.b = r, g, b ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.player.background or not E.db.ElvUI_EltreumUI.unitframes.portrait.player.custom or not E.db.ElvUI_EltreumUI.unitframes.portrait.player.customcircle end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.texture = ACH:Select(L["Texture"], L["Choose the texture type"], 13, PortraitStyles, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.player.style end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.player.style = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("player") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.player.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.player.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.player.args.texture.style = "radio"
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target = ACH:Group(L["Target"], nil, 21, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.enable = ACH:Toggle(L["Enable"], nil, 0, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.portraittype = ACH:Select(L["Type"], L["Choose Portrait Type"], 1, {
		["CIRCLE"] = L["Circle"],
		["BLIZZARD"] = L["Blizzard"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.target.type end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.target.type = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.size = ACH:Range(L["Size"], nil, 2, { min = 8, max = 128, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.target.size end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.target.size = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.anchor = ACH:Select(L["Anchor Point"], L["What point to anchor to the frame you set to attach to."], 2, {
		LEFT = L["Left"],
		CENTER = L["Middle"],
		RIGHT = L["Right"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.target.position.align end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.target.position.align = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.xoffset = ACH:Range(L["X-Offset"], nil, 2, { min = -300, max = 300, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.target.position.x end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.target.position.x = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.yoffset = ACH:Range(L["Y-Offset"], nil, 2, { min = -300, max = 300, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.target.position.y end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.target.position.y = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.scale = ACH:Range(L["Scale"], nil, 2, { min = -0.15, max = 0.29, step = 0.01 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.target.scale end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.target.scale = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.edge = ACH:Toggle(L["Edge"], nil, 3, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.target.edge end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.target.edge = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.target.type ~= "BLIZZARD" or E.db.ElvUI_EltreumUI.unitframes.portrait.target.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.rare = ACH:Toggle(L["Rare"], nil, 3, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.target.rare end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.target.rare = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.target.type ~= "CIRCLE" or E.db.ElvUI_EltreumUI.unitframes.portrait.target.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.reversegradient = ACH:Toggle(L["Reverse Gradient"], nil, 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.target.reversegradient end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.target.reversegradient = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.target.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.defaultgradient = ACH:Toggle(L["Default Gradient Colors"], nil, 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.target.defaultgradient end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.target.defaultgradient = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.target.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.enablecustomcolor = ACH:Toggle(L["Enable Custom Colors"], nil, 5, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.target.customcolor end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.target.customcolor = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.customcolor = ACH:Color(L["Custom Color"], nil, 6, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.portrait.target.color.r local dg = P.ElvUI_EltreumUI.unitframes.portrait.target.color.g local db = P.ElvUI_EltreumUI.unitframes.portrait.target.color.b return E.db.ElvUI_EltreumUI.unitframes.portrait.target.color.r, E.db.ElvUI_EltreumUI.unitframes.portrait.target.color.g, E.db.ElvUI_EltreumUI.unitframes.portrait.target.color.b, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.portrait.target.color.r, E.db.ElvUI_EltreumUI.unitframes.portrait.target.color.g, E.db.ElvUI_EltreumUI.unitframes.portrait.target.color.b = r, g, b ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.target.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.description1 = ACH:Description(" ", 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.custom = ACH:Toggle(L["Enable Custom Textures"], nil, 9, nil, false, 'full', function() return E.db.ElvUI_EltreumUI.unitframes.portrait.target.custom end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.target.custom = value if value == true and E.db.ElvUI_EltreumUI.unitframes.portrait.target.customcircle then E.db.ElvUI_EltreumUI.unitframes.portrait.target.type = "CIRCLE" end ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.customcircle = ACH:Toggle(L["RAID_TARGET_2"], nil, 10, nil, false, 'full', function() return E.db.ElvUI_EltreumUI.unitframes.portrait.target.customcircle end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.target.customcircle = value if value == true then E.db.ElvUI_EltreumUI.unitframes.portrait.target.type = "CIRCLE" end ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.target.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.custombg = ACH:Toggle(L["Background"], nil, 11, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.target.background end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.target.background = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.target.customcircle or not E.db.ElvUI_EltreumUI.unitframes.portrait.target.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.custombgcolor = ACH:Color(L["Background Color"], nil, 12, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.portrait.target.backgroundcolor.r local dg = P.ElvUI_EltreumUI.unitframes.portrait.target.backgroundcolor.g local db = P.ElvUI_EltreumUI.unitframes.portrait.target.backgroundcolor.b return E.db.ElvUI_EltreumUI.unitframes.portrait.target.backgroundcolor.r, E.db.ElvUI_EltreumUI.unitframes.portrait.target.backgroundcolor.g, E.db.ElvUI_EltreumUI.unitframes.portrait.target.backgroundcolor.b, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.portrait.target.backgroundcolor.r, E.db.ElvUI_EltreumUI.unitframes.portrait.target.backgroundcolor.g, E.db.ElvUI_EltreumUI.unitframes.portrait.target.backgroundcolor.b = r, g, b ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.target.background or not E.db.ElvUI_EltreumUI.unitframes.portrait.target.custom or not E.db.ElvUI_EltreumUI.unitframes.portrait.target.customcircle end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.texture = ACH:Select(L["Texture"], L["Choose the texture type"], 13, PortraitStyles, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.target.style end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.target.style = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("target") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.target.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.target.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.target.args.texture.style = "radio"
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus = ACH:Group(L["Focus"], nil, 22, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end, E.Classic or E.ClassicHC)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.enable = ACH:Toggle(L["Enable"], nil, 0, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.portraittype = ACH:Select(L["Type"], L["Choose Portrait Type"], 1, {
		["CIRCLE"] = L["Circle"],
		["BLIZZARD"] = L["Blizzard"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.type end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.type = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.size = ACH:Range(L["Size"], nil, 2, { min = 8, max = 128, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.size end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.size = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.anchor = ACH:Select(L["Anchor Point"], L["What point to anchor to the frame you set to attach to."], 2, {
		LEFT = L["Left"],
		CENTER = L["Middle"],
		RIGHT = L["Right"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.position.align end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.position.align = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.xoffset = ACH:Range(L["X-Offset"], nil, 2, { min = -300, max = 300, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.position.x end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.position.x = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.yoffset = ACH:Range(L["Y-Offset"], nil, 2, { min = -300, max = 300, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.position.y end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.position.y = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.scale = ACH:Range(L["Scale"], nil, 2, { min = -0.15, max = 0.29, step = 0.01 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.scale end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.scale = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.edge = ACH:Toggle(L["Edge"], nil, 3, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.edge end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.edge = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.focus.type ~= "BLIZZARD" or E.db.ElvUI_EltreumUI.unitframes.portrait.focus.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.rare = ACH:Toggle(L["Rare"], nil, 3, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.rare end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.rare = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.focus.type ~= "CIRCLE" or E.db.ElvUI_EltreumUI.unitframes.portrait.focus.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.reversegradient = ACH:Toggle(L["Reverse Gradient"], nil, 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.reversegradient end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.reversegradient = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.focus.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.defaultgradient = ACH:Toggle(L["Default Gradient Colors"], nil, 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.defaultgradient end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.defaultgradient = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.focus.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.enablecustomcolor = ACH:Toggle(L["Enable Custom Colors"], nil, 5, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.customcolor end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.customcolor = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.customcolor = ACH:Color(L["Custom Color"], nil, 6, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.portrait.focus.color.r local dg = P.ElvUI_EltreumUI.unitframes.portrait.focus.color.g local db = P.ElvUI_EltreumUI.unitframes.portrait.focus.color.b return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.color.r, E.db.ElvUI_EltreumUI.unitframes.portrait.focus.color.g, E.db.ElvUI_EltreumUI.unitframes.portrait.focus.color.b, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.color.r, E.db.ElvUI_EltreumUI.unitframes.portrait.focus.color.g, E.db.ElvUI_EltreumUI.unitframes.portrait.focus.color.b = r, g, b ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.description1 = ACH:Description(" ", 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.custom = ACH:Toggle(L["Enable Custom Textures"], nil, 9, nil, false, 'full', function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.custom end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.custom = value if value == true and E.db.ElvUI_EltreumUI.unitframes.portrait.focus.customcircle then E.db.ElvUI_EltreumUI.unitframes.portrait.focus.type = "CIRCLE" end ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.customcircle = ACH:Toggle(L["RAID_TARGET_2"], nil, 10, nil, false, 'full', function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.customcircle end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.customcircle = value if value == true then E.db.ElvUI_EltreumUI.unitframes.portrait.focus.type = "CIRCLE" end ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.custombg = ACH:Toggle(L["Background"], nil, 11, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.background end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.background = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.customcircle or not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.custombgcolor = ACH:Color(L["Background Color"], nil, 12, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.portrait.focus.backgroundcolor.r local dg = P.ElvUI_EltreumUI.unitframes.portrait.focus.backgroundcolor.g local db = P.ElvUI_EltreumUI.unitframes.portrait.focus.backgroundcolor.b return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.backgroundcolor.r, E.db.ElvUI_EltreumUI.unitframes.portrait.focus.backgroundcolor.g, E.db.ElvUI_EltreumUI.unitframes.portrait.focus.backgroundcolor.b, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.backgroundcolor.r, E.db.ElvUI_EltreumUI.unitframes.portrait.focus.backgroundcolor.g, E.db.ElvUI_EltreumUI.unitframes.portrait.focus.backgroundcolor.b = r, g, b ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.background or not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.custom or not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.customcircle end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.texture = ACH:Select(L["Texture"], L["Choose the texture type"], 13, PortraitStyles, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focus.style end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focus.style = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focus") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.focus.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focus.args.texture.style = "radio"
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget = ACH:Group(L["FocusTarget"], nil, 22, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end, E.Classic or E.ClassicHC)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.enable = ACH:Toggle(L["Enable"], nil, 0, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.portraittype = ACH:Select(L["Type"], L["Choose Portrait Type"], 1, {
		["CIRCLE"] = L["Circle"],
		["BLIZZARD"] = L["Blizzard"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.type end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.type = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.size = ACH:Range(L["Size"], nil, 2, { min = 8, max = 128, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.size end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.size = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.anchor = ACH:Select(L["Anchor Point"], L["What point to anchor to the frame you set to attach to."], 2, {
		LEFT = L["Left"],
		CENTER = L["Middle"],
		RIGHT = L["Right"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.position.align end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.position.align = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.xoffset = ACH:Range(L["X-Offset"], nil, 2, { min = -300, max = 300, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.position.x end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.position.x = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.yoffset = ACH:Range(L["Y-Offset"], nil, 2, { min = -300, max = 300, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.position.y end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.position.y = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.scale = ACH:Range(L["Scale"], nil, 2, { min = -0.15, max = 0.29, step = 0.01 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.scale end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.scale = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.edge = ACH:Toggle(L["Edge"], nil, 3, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.edge end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.edge = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.type ~= "BLIZZARD" or E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.rare = ACH:Toggle(L["Rare"], nil, 3, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.rare end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.rare = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.type ~= "CIRCLE" or E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.reversegradient = ACH:Toggle(L["Reverse Gradient"], nil, 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.reversegradient end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.reversegradient = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.defaultgradient = ACH:Toggle(L["Default Gradient Colors"], nil, 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.defaultgradient end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.defaultgradient = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.enablecustomcolor = ACH:Toggle(L["Enable Custom Colors"], nil, 5, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.customcolor end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.customcolor = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.customcolor = ACH:Color(L["Custom Color"], nil, 6, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.portrait.focustarget.color.r local dg = P.ElvUI_EltreumUI.unitframes.portrait.focustarget.color.g local db = P.ElvUI_EltreumUI.unitframes.portrait.focustarget.color.b return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.color.r, E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.color.g, E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.color.b, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.color.r, E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.color.g, E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.color.b = r, g, b ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.description1 = ACH:Description(" ", 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.custom = ACH:Toggle(L["Enable Custom Textures"], nil, 9, nil, false, 'full', function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.custom end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.custom = value if value == true and E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.customcircle then E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.type = "CIRCLE" end ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.customcircle = ACH:Toggle(L["RAID_TARGET_2"], nil, 10, nil, false, 'full', function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.customcircle end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.customcircle = value if value == true then E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.type = "CIRCLE" end ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.custombg = ACH:Toggle(L["Background"], nil, 11, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.background end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.background = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.customcircle or not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.custombgcolor = ACH:Color(L["Background Color"], nil, 12, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.portrait.focustarget.backgroundcolor.r local dg = P.ElvUI_EltreumUI.unitframes.portrait.focustarget.backgroundcolor.g local db = P.ElvUI_EltreumUI.unitframes.portrait.focustarget.backgroundcolor.b return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.backgroundcolor.r, E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.backgroundcolor.g, E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.backgroundcolor.b, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.backgroundcolor.r, E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.backgroundcolor.g, E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.backgroundcolor.b = r, g, b ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.background or not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.custom or not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.customcircle end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.texture = ACH:Select(L["Texture"], L["Choose the texture type"], 13, PortraitStyles, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.style end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.style = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("focustarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.focustarget.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.focustarget.args.texture.style = "radio"
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget = ACH:Group(L["TargetTarget"], nil, 22, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.enable = ACH:Toggle(L["Enable"], nil, 0, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.portraittype = ACH:Select(L["Type"], L["Choose Portrait Type"], 1, {
		["CIRCLE"] = L["Circle"],
		["BLIZZARD"] = L["Blizzard"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.type end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.type = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.size = ACH:Range(L["Size"], nil, 2, { min = 8, max = 128, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.size end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.size = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.anchor = ACH:Select(L["Anchor Point"], L["What point to anchor to the frame you set to attach to."], 2, {
		LEFT = L["Left"],
		CENTER = L["Middle"],
		RIGHT = L["Right"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.position.align end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.position.align = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.xoffset = ACH:Range(L["X-Offset"], nil, 2, { min = -300, max = 300, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.position.x end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.position.x = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.yoffset = ACH:Range(L["Y-Offset"], nil, 2, { min = -300, max = 300, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.position.y end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.position.y = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.scale = ACH:Range(L["Scale"], nil, 2, { min = -0.15, max = 0.29, step = 0.01 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.scale end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.scale = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.edge = ACH:Toggle(L["Edge"], nil, 3, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.edge end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.edge = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.type ~= "BLIZZARD" or E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.rare = ACH:Toggle(L["Rare"], nil, 3, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.rare end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.rare = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.type ~= "CIRCLE" or E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.reversegradient = ACH:Toggle(L["Reverse Gradient"], nil, 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.reversegradient end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.reversegradient = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.defaultgradient = ACH:Toggle(L["Default Gradient Colors"], nil, 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.defaultgradient end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.defaultgradient = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.enablecustomcolor = ACH:Toggle(L["Enable Custom Colors"], nil, 5, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.customcolor end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.customcolor = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.customcolor = ACH:Color(L["Custom Color"], nil, 6, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.portrait.targettarget.color.r local dg = P.ElvUI_EltreumUI.unitframes.portrait.targettarget.color.g local db = P.ElvUI_EltreumUI.unitframes.portrait.targettarget.color.b return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.color.r, E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.color.g, E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.color.b, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.color.r, E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.color.g, E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.color.b = r, g, b ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.description1 = ACH:Description(" ", 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.custom = ACH:Toggle(L["Enable Custom Textures"], nil, 9, nil, false, 'full', function() return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.custom end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.custom = value if value == true and E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.customcircle then E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.type = "CIRCLE" end ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.customcircle = ACH:Toggle(L["RAID_TARGET_2"], nil, 10, nil, false, 'full', function() return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.customcircle end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.customcircle = value if value == true then E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.type = "CIRCLE" end ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.custombg = ACH:Toggle(L["Background"], nil, 11, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.background end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.background = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.customcircle or not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.custombgcolor = ACH:Color(L["Background Color"], nil, 12, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.portrait.targettarget.backgroundcolor.r local dg = P.ElvUI_EltreumUI.unitframes.portrait.targettarget.backgroundcolor.g local db = P.ElvUI_EltreumUI.unitframes.portrait.targettarget.backgroundcolor.b return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.backgroundcolor.r, E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.backgroundcolor.g, E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.backgroundcolor.b, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.backgroundcolor.r, E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.backgroundcolor.g, E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.backgroundcolor.b = r, g, b ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.background or not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.custom or not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.customcircle end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.texture = ACH:Select(L["Texture"], L["Choose the texture type"], 13, PortraitStyles, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.style end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.style = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("targettarget") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.targettarget.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.targettarget.args.texture.style = "radio"
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party = ACH:Group(L["Party"], nil, 23, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.enable = ACH:Toggle(L["Enable"], nil, 0, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.portraittype = ACH:Select(L["Type"], L["Choose Portrait Type"], 1, {
		["CIRCLE"] = L["Circle"],
		["BLIZZARD"] = L["Blizzard"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.party.type end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.party.type = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.size = ACH:Range(L["Size"], nil, 2, { min = 8, max = 128, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.party.size end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.party.size = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.anchor = ACH:Select(L["Anchor Point"], L["What point to anchor to the frame you set to attach to."], 2, {
		LEFT = L["Left"],
		CENTER = L["Middle"],
		RIGHT = L["Right"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.party.position.align end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.party.position.align = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.xoffset = ACH:Range(L["X-Offset"], nil, 2, { min = -300, max = 300, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.party.position.x end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.party.position.x = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.yoffset = ACH:Range(L["Y-Offset"], nil, 2, { min = -300, max = 300, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.party.position.y end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.party.position.y = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.scale = ACH:Range(L["Scale"], nil, 2, { min = -0.15, max = 0.29, step = 0.01 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.party.scale end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.party.scale = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.edge = ACH:Toggle(L["Edge"], nil, 3, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.party.edge end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.party.edge = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.party.type ~= "BLIZZARD" or E.db.ElvUI_EltreumUI.unitframes.portrait.party.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.rare = ACH:Toggle(L["Rare"], nil, 3, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.party.rare end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.party.rare = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.party.type ~= "CIRCLE" or E.db.ElvUI_EltreumUI.unitframes.portrait.party.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.reversegradient = ACH:Toggle(L["Reverse Gradient"], nil, 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.party.reversegradient end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.party.reversegradient = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.party.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.defaultgradient = ACH:Toggle(L["Default Gradient Colors"], nil, 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.party.defaultgradient end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.party.defaultgradient = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.party.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.enablecustomcolor = ACH:Toggle(L["Enable Custom Colors"], nil, 5, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.party.customcolor end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.party.customcolor = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.customcolor = ACH:Color(L["Custom Color"], nil, 6, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.portrait.party.color.r local dg = P.ElvUI_EltreumUI.unitframes.portrait.party.color.g local db = P.ElvUI_EltreumUI.unitframes.portrait.party.color.b return E.db.ElvUI_EltreumUI.unitframes.portrait.party.color.r, E.db.ElvUI_EltreumUI.unitframes.portrait.party.color.g, E.db.ElvUI_EltreumUI.unitframes.portrait.party.color.b, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.portrait.party.color.r, E.db.ElvUI_EltreumUI.unitframes.portrait.party.color.g, E.db.ElvUI_EltreumUI.unitframes.portrait.party.color.b = r, g, b ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.party.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.description1 = ACH:Description(" ", 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.custom = ACH:Toggle(L["Enable Custom Textures"], nil, 9, nil, false, 'full', function() return E.db.ElvUI_EltreumUI.unitframes.portrait.party.custom end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.party.custom = value if value == true and E.db.ElvUI_EltreumUI.unitframes.portrait.party.customcircle then E.db.ElvUI_EltreumUI.unitframes.portrait.party.type = "CIRCLE" end ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.customcircle = ACH:Toggle(L["RAID_TARGET_2"], nil, 10, nil, false, 'full', function() return E.db.ElvUI_EltreumUI.unitframes.portrait.party.customcircle end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.party.customcircle = value if value == true then E.db.ElvUI_EltreumUI.unitframes.portrait.party.type = "CIRCLE" end ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.party.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.custombg = ACH:Toggle(L["Background"], nil, 11, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.party.background end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.party.background = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.party.customcircle or not E.db.ElvUI_EltreumUI.unitframes.portrait.party.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.custombgcolor = ACH:Color(L["Background Color"], nil, 12, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.portrait.party.backgroundcolor.r local dg = P.ElvUI_EltreumUI.unitframes.portrait.party.backgroundcolor.g local db = P.ElvUI_EltreumUI.unitframes.portrait.party.backgroundcolor.b return E.db.ElvUI_EltreumUI.unitframes.portrait.party.backgroundcolor.r, E.db.ElvUI_EltreumUI.unitframes.portrait.party.backgroundcolor.g, E.db.ElvUI_EltreumUI.unitframes.portrait.party.backgroundcolor.b, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.portrait.party.backgroundcolor.r, E.db.ElvUI_EltreumUI.unitframes.portrait.party.backgroundcolor.g, E.db.ElvUI_EltreumUI.unitframes.portrait.party.backgroundcolor.b = r, g, b ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.party.background or not E.db.ElvUI_EltreumUI.unitframes.portrait.party.custom or not E.db.ElvUI_EltreumUI.unitframes.portrait.party.customcircle end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.texture = ACH:Select(L["Texture"], L["Choose the texture type"], 13, PortraitStyles, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.party.style end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.party.style = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("party") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.party.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.party.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.party.args.texture.style = "radio"
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.pet = ACH:Group(E.NewSign..L["Pet"], nil, 24, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.pet.args.enable = ACH:Toggle(L["Enable"], nil, 0, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.pet.enable end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.pet.enable = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("pet") end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.pet.args.portraittype = ACH:Select(L["Type"], L["Choose Portrait Type"], 1, {
		["CIRCLE"] = L["Circle"],
		["BLIZZARD"] = L["Blizzard"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.pet.type end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.pet.type = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("pet") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.pet.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.pet.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.pet.args.size = ACH:Range(L["Size"], nil, 2, { min = 8, max = 128, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.pet.size end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.pet.size = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("pet") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.pet.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.pet.args.anchor = ACH:Select(L["Anchor Point"], L["What point to anchor to the frame you set to attach to."], 2, {
		LEFT = L["Left"],
		CENTER = L["Middle"],
		RIGHT = L["Right"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.pet.position.align end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.pet.position.align = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("pet") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.pet.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.pet.args.xoffset = ACH:Range(L["X-Offset"], nil, 2, { min = -300, max = 300, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.pet.position.x end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.pet.position.x = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("pet") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.pet.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.pet.args.yoffset = ACH:Range(L["Y-Offset"], nil, 2, { min = -300, max = 300, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.pet.position.y end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.pet.position.y = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("pet") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.pet.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.pet.args.scale = ACH:Range(L["Scale"], nil, 2, { min = -0.15, max = 0.29, step = 0.01 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.pet.scale end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.pet.scale = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("pet") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.pet.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.pet.args.edge = ACH:Toggle(L["Edge"], nil, 3, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.portrait.pet.edge end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.pet.edge = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("pet") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.pet.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.pet.type ~= "BLIZZARD" or E.db.ElvUI_EltreumUI.unitframes.portrait.pet.custom end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.pet.args.reversegradient = ACH:Toggle(L["Reverse Gradient"], nil, 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.pet.reversegradient end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.pet.reversegradient = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("pet") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.pet.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.pet.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.pet.args.defaultgradient = ACH:Toggle(L["Default Gradient Colors"], nil, 5, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.pet.defaultgradient end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.pet.defaultgradient = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("pet") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.pet.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or E.db.ElvUI_EltreumUI.unitframes.portrait.pet.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.pet.args.enablecustomcolor = ACH:Toggle(L["Enable Custom Colors"], nil, 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.portrait.pet.customcolor end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.portrait.pet.customcolor = value ElvUI_EltreumUI:BlizzPortraitSettingUpdate("pet") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.pet.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.portrait.args.pet.args.customcolor = ACH:Color(L["Custom Color"], nil, 7, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.portrait.pet.color.r local dg = P.ElvUI_EltreumUI.unitframes.portrait.pet.color.g local db = P.ElvUI_EltreumUI.unitframes.portrait.pet.color.b return E.db.ElvUI_EltreumUI.unitframes.portrait.pet.color.r, E.db.ElvUI_EltreumUI.unitframes.portrait.pet.color.g, E.db.ElvUI_EltreumUI.unitframes.portrait.pet.color.b, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.portrait.pet.color.r, E.db.ElvUI_EltreumUI.unitframes.portrait.pet.color.g, E.db.ElvUI_EltreumUI.unitframes.portrait.pet.color.b = r, g, b ElvUI_EltreumUI:BlizzPortraitSettingUpdate("pet") end, function() return not E.db.ElvUI_EltreumUI.unitframes.portrait.pet.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.enable or not E.db.ElvUI_EltreumUI.unitframes.portrait.pet.customcolor end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.infopanel = ACH:Group(L["Information Panel"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.infopanel.args.description1 = ACH:Description(L["Information Panel"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.infopanel.args.infoPanelOnTop = ACH:Toggle(L["Enable Information Panel on Top"], L["Sets Information panel to be on Top instead of Bottom of the unitframe"], 2, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.infopanelontop end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.infopanelontop = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.infopanel.args.infoPanelOnTopAll = ACH:Toggle(L["Enable on All Unitframes"], nil, 3, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.infopanelontopallframes end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.infopanelontopallframes = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications or not E.db.ElvUI_EltreumUI.unitframes.infopanelontop end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.spark = ACH:Group(L["Castbar Spark"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.spark.args.description1 = ACH:Description(L["Customize the player castbar spark"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.spark.args.enable = ACH:Toggle(L["Enable"], L["Customize Player CastBar Spark"], 2, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor.enable end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor.enable = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.spark.args.enableaurabars = ACH:Toggle(L["Enable on Aura Bars"], nil, 3, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor.enableaurabars end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor.enableaurabars = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.spark.args.description2 = ACH:Description(" ", 4, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.spark.args.color = ACH:Color(L["Custom Color"], nil, 5, false, nil, function()
		local glowcustomcolor = E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor
		local d = P.ElvUI_EltreumUI.unitframes.sparkcustomcolor
		return glowcustomcolor.r, glowcustomcolor.g, glowcustomcolor.b, glowcustomcolor.a, d.r, d.g, d.b, d.a
	end, function(_, r, g, b)
		local glowcustomcolor = E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor
		glowcustomcolor.r, glowcustomcolor.g, glowcustomcolor.b = r, g, b
	end, function() return not E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.spark.args.colorsparkempowering = ACH:Color(L["Empowering Color"], nil, 6, false, nil, function()
		local glowcustomcolor = E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor
		local d = P.ElvUI_EltreumUI.unitframes.sparkcustomcolor
		return glowcustomcolor.empoweringr, glowcustomcolor.empoweringg, glowcustomcolor.empoweringb, glowcustomcolor.a, d.empoweringr, d.empoweringg, d.empoweringb, d.a
	end, function(_, r, g, b)
		local glowcustomcolor = E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor
		glowcustomcolor.empoweringr, glowcustomcolor.empoweringg, glowcustomcolor.empoweringb = r, g, b
	end, function() return not E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor.enable end, not E.Retail)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.spark.args.description3 = ACH:Description(" ", 7, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.spark.args.texture = ACH:SharedMediaStatusbar(L["Spark Texture"], L["Select a Texture"], 8, nil, function() return E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor.texture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor.texture = key end, function() return not E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor.enable or not E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor.enableaurabars end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.spark.args.width = ACH:Range(L["Width"], L["Set Width of the Spark (Default 3)"], 9, { min = 1, max = 20, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor.width end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor.width = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor.enable or not E.db.ElvUI_EltreumUI.unitframes.sparkcustomcolor.enableaurabars end)
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.layout = ACH:Group(L["Layout"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.layout.args.description1 = ACH:Description(L["Alternative unitframe layouts"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.layout.args.description2 = ACH:Description(L["DPS/Tank layouts were created with pure dps classes in mind, if you play a class with more raid cooldowns like a Shaman, Druid or Paladin you might want to use the alternative layout in order to make it easier for you to use your cooldowns on the members of your group"], 2, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.layout.args.alternative = ACH:Execute(L["Alternative Layout"], nil, 3, function() ElvUI_EltreumUI:AlternativeGroupsDPS() end, nil, false, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.general.args.layout.args.original = ACH:Execute(L["Original Layout"], nil, 3, function() ElvUI_EltreumUI:OriginalGroupsDPS() end, nil, false, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.texture = ACH:Group(L["Textures"], L["Choose custom textures for some unitframes"], 3, "tab", nil, nil, function() return (not E.db.ElvUI_EltreumUI.unitframes.lightmode and not E.db.ElvUI_EltreumUI.unitframes.darkmode) or not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.enable = ACH:Group("", nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.enable.inline = true
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.enable.args.description1 = ACH:Description(L["Customize Unitframe textures"], 1, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.enable.args.customtexturesenable = ACH:Toggle(L["Enable Custom Textures"], nil, 2, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable = value end, function() return (not E.db.ElvUI_EltreumUI.unitframes.lightmode and not E.db.ElvUI_EltreumUI.unitframes.darkmode) or not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.enable.args.classdetect = ACH:Toggle(L["Automatically Detect Classes for Player, Target, Target of Target and Focus"], L["Use the custom texture based on it's class instead of general texture for Player, Target, Target of Target and Focus"], 3, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.classdetect end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.classdetect = value end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.enable.args.disableclass = ACH:Toggle(L["Disable Class Textures"], L["Use only textures sets for specific frames and not class specific textures"], 4, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture = value end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.classdetect end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes = ACH:Group(L["UnitFrames"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.player = ACH:SharedMediaStatusbar(L["Player Texture"], L["Select a Texture"], 1, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.applytoall1 = ACH:Execute(L["Apply To All"], nil, 2, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.gap1 = ACH:Description('', 3, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.playercastbar = ACH:SharedMediaStatusbar(L["Player Castbar Texture"], L["Select a Texture"], 4, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.applytoall2 = ACH:Execute(L["Apply To All"], nil, 5, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.gap2 = ACH:Description('', 6, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.target = ACH:SharedMediaStatusbar(L["Target Texture"], L["Select a Texture"], 7, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.applytoall3 = ACH:Execute(L["Apply To All"], nil, 8, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.gap3 = ACH:Description('', 9, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.targettarget = ACH:SharedMediaStatusbar(L["Target of Target Texture"], L["Select a Texture"], 10, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.applytoall4 = ACH:Execute(L["Apply To All"], nil, 11, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture= E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.gap4 = ACH:Description('', 12, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.targettargettarget = ACH:SharedMediaStatusbar(L["Target of Target of Target Texture"], L["Select a Texture"], 13, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.applytoall5 = ACH:Execute(L["Apply To All"], nil, 14, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.gap5 = ACH:Description('', 15, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.focus = ACH:SharedMediaStatusbar(L["Focus Texture"], L["Select a Texture"], 16, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.applytoall6 = ACH:Execute(L["Apply To All"], nil, 17, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.gap6 = ACH:Description('', 18, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.pet = ACH:SharedMediaStatusbar(L["Pet Texture"], L["Select a Texture"], 19, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.applytoall7 = ACH:Execute(L["Apply To All"], nil, 20, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.gap7 = ACH:Description('', 21, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.boss = ACH:SharedMediaStatusbar(L["Boss Texture"], L["Select a Texture"], 22, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable end, E.Classic)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.applytoall8 = ACH:Execute(L["Apply To All"], nil, 23, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true, nil, nil, nil, nil, E.Classic)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.gap8 = ACH:Description('', 24, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.party = ACH:SharedMediaStatusbar(L["Party"], L["Select a Texture"], 25, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.applytoall9 = ACH:Execute(L["Apply To All"], nil, 26, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.gap9 = ACH:Description('', 27, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.raid = ACH:SharedMediaStatusbar(L["Raid"], L["Select a Texture"], 28, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.applytoall11 = ACH:Execute(L["Apply To All"], nil, 29, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.gap10 = ACH:Description('', 30, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.arena = ACH:SharedMediaStatusbar(E.NewSign..L["Arena"], L["Select a Texture"], 31, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.unitframes.args.applytoall12 = ACH:Execute(L["Apply To All"], nil, 32, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.playertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.castbartexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.targettargettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.focustexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.bosstexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.pettexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.partytexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.raidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.arenatexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes = ACH:Group(L["Classes"], nil, 3, "tab")
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.description1 = ACH:Description(L["Class Textures"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.dk = ACH:SharedMediaStatusbar(L["Death Knight"], L["Select a Texture"], 2, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end, E.Classic)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.applytoall1 = ACH:Execute(L["Apply To All"], nil, 3, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true, nil, nil, nil, nil, E.Classic)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.gap1 = ACH:Description('', 4, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.dh = ACH:SharedMediaStatusbar(L["Demon Hunter"], L["Select a Texture"], 5, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end, not E.Retail)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.applytoall2 = ACH:Execute(L["Apply To All"], nil, 6, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true, nil, nil, nil, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.gap2 = ACH:Description('', 7, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.druid = ACH:SharedMediaStatusbar(L["Druid"], L["Select a Texture"], 8, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.applytoall3 = ACH:Execute(L["Apply To All"], nil, 9, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.gap3 = ACH:Description('', 10, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.hunter = ACH:SharedMediaStatusbar(L["Hunter"], L["Select a Texture"], 11, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.applytoall4 = ACH:Execute(L["Apply To All"], nil, 12, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.gap4 = ACH:Description('', 13, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.mage = ACH:SharedMediaStatusbar(L["Mage"], L["Select a Texture"], 14, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.applytoall5 = ACH:Execute(L["Apply To All"], nil, 15, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.gap5 = ACH:Description('', 16, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.monk = ACH:SharedMediaStatusbar(L["Monk"], L["Select a Texture"], 17, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end, not E.Retail)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.applytoall6 = ACH:Execute(L["Apply To All"], nil, 18, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true, nil, nil, nil, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.gap6 = ACH:Description('', 19, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.evoker = ACH:SharedMediaStatusbar(L["Evoker"], L["Select a Texture"], 20, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end, not E.Retail)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.applytoall7 = ACH:Execute(L["Apply To All"], nil, 21, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true, nil, nil, nil, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.gap7 = ACH:Description('', 22, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.paladin = ACH:SharedMediaStatusbar(L["Paladin"], L["Select a Texture"], 23, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.applytoall8 = ACH:Execute(L["Apply To All"], nil, 24, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.gap8 = ACH:Description('', 25, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.priest = ACH:SharedMediaStatusbar(L["Priest"], L["Select a Texture"], 26, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.applytoall9 = ACH:Execute(L["Apply To All"], nil, 27, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.gap9 = ACH:Description('', 28, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.rogue = ACH:SharedMediaStatusbar(L["Rogue"], L["Select a Texture"], 29, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.applytoall10 = ACH:Execute(L["Apply To All"], nil, 30, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.gap10 = ACH:Description('', 31, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.shaman = ACH:SharedMediaStatusbar(L["Shaman"], L["Select a Texture"], 32, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.applytoall11 = ACH:Execute(L["Apply To All"], nil, 33, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.gap11 = ACH:Description('', 34, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.warlock = ACH:SharedMediaStatusbar(L["Warlock"], L["Select a Texture"], 35, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.applytoall12 = ACH:Execute(L["Apply To All"], nil, 36, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.gap12 = ACH:Description('', 37, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.warrior = ACH:SharedMediaStatusbar(L["Warrior"], L["Select a Texture"], 38, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.applytoall13 = ACH:Execute(L["Apply To All"], nil, 39, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.classes.args.gap13 = ACH:Description('', 40, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.npcs = ACH:Group(L["NPC"], nil, 3, "tab")
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.npcs.args.description1 = ACH:Description(L["NPC Textures"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.npcs.args.npcfriendly = ACH:SharedMediaStatusbar(L["Friendly NPC"], L["Select a Texture"], 2, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.npcs.args.applytoall14 = ACH:Execute(L["Apply To All"], nil, 3, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.npcs.args.gap1 = ACH:Description('', 4, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.npcs.args.npcneutral = ACH:SharedMediaStatusbar(L["Neutral NPC"], L["Select a Texture"], 5, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.npcs.args.applytoall15 = ACH:Execute(L["Apply To All"], nil, 6, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.npcs.args.gap2 = ACH:Description('', 7, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.npcs.args.npcunfriendly = ACH:SharedMediaStatusbar(L["Unfriendly NPC"], L["Select a Texture"], 8, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.npcs.args.applytoall16 = ACH:Execute(L["Apply To All"], nil, 9, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.npcs.args.gap3 = ACH:Description('', 10, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.npcs.args.npchostile = ACH:SharedMediaStatusbar(L["Hostile NPC"], L["Select a Texture"], 11, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.npcs.args.applytoall17 = ACH:Execute(L["Apply To All"], nil, 12, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.npcs.args.gap4 = ACH:Description('', 13, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.npcs.args.tappedtexture = ACH:SharedMediaStatusbar(L["Tapped NPC"], L["Select a Texture"], 14, "double", function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture = key ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable) or E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.noclasstexture end)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.npcs.args.applytoall18 = ACH:Execute(L["Apply To All"], nil, 15, function()
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.deathknighttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.demonhuntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.evokertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.druidtexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.huntertexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.magetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.monktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.paladintexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.priesttexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.roguetexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.shamantexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warlocktexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.warriortexture = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcneutral = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npcunfriendly = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture
		E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.npchostile = E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.tappedtexture
		ElvUI_EltreumUI:GradientColorTableUpdate()
	end, nil, true)
	ElvUI_EltreumUI.Options.args.unitframes.args.texture.args.npcs.args.gap5 = ACH:Description('', 16, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.models = ACH:Group(L["Models"], nil, 4, "tab", nil, nil, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.warning = ACH:Description("|cffFF0000WARNING:|r"..L[" This can be a very demanding feature, it's not recommended to use models for performance."], 1, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.unitframes = ACH:Group(L["UnitFrames"], nil, 2, "tab", nil, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.unitframes.args.description1 = ACH:Description(L["Unitframe Models"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.unitframes.args.enable = ACH:Toggle(L["Enable Models/Effects"], L["Enable adding models as effects on unitframes"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.models.unitframe end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.models.unitframe = value ElvUI_EltreumUI:PlayerUFEffects() ElvUI_EltreumUI:TargetUFEffects() ElvUI_EltreumUI:TargetTargetUFEffects() E.db.unitframe.colors.transparentHealth = true E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.unitframes.args.insideHP = ACH:Toggle(L["Model Inside Health"], L["Model will be set inside health instead of over whole frame"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.models.insideHP end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.models.insideHP = value ElvUI_EltreumUI:PlayerUFEffects() ElvUI_EltreumUI:TargetUFEffects() ElvUI_EltreumUI:TargetTargetUFEffects() E.db.unitframe.colors.transparentHealth = true E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.models.unitframe or not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.unitframes.args.selectmodel = ACH:Select(L["Choose between Class Based Models or a Custom Model"], nil, 4, { ["CLASS"] = CLASS, ["CUSTOM"] = CUSTOM, }, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.models.modeltype end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.models.modeltype = value ElvUI_EltreumUI:PlayerUFEffects() ElvUI_EltreumUI:TargetUFEffects() ElvUI_EltreumUI:TargetTargetUFEffects() end, function() return not E.db.ElvUI_EltreumUI.unitframes.models.unitframe or not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.unitframes.args.selectmodel.style = "radio"
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.unitframes.args.custommodelpath = ACH:Input(function() if E.Retail then return L["Type the Model ID, such as 165575"] else return L["Type the Model Path, such as spells/arcanebreath.m2"] end end, nil, 5, nil, "full", function() if E.Retail then return tostring(E.db.ElvUI_EltreumUI.unitframes.models.custommodel) else return tostring(E.db.ElvUI_EltreumUI.unitframes.models.custommodelclassic) end end, function(_, value) if E.Retail then E.db.ElvUI_EltreumUI.unitframes.models.custommodel = tonumber(value) else E.db.ElvUI_EltreumUI.unitframes.models.custommodelclassic = tostring(value) end ElvUI_EltreumUI:PlayerUFEffects() ElvUI_EltreumUI:TargetUFEffects() ElvUI_EltreumUI:TargetTargetUFEffects() end, function() return E.db.ElvUI_EltreumUI.unitframes.models.modeltype == 'CLASS' or not E.db.ElvUI_EltreumUI.unitframes.models.unitframe or not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end, nil, function(_, value)
		E.PopupDialogs["ELTRUISMINVALIDMODEL"] = {
			text = L["Invalid Model, you need to add a Model ID/Path"],
			button1 = OKAY,
			timeout = 0,
			whileDead = 1,
			hideOnEscape = true,
		}
		if E.Retail then if tonumber(value) ~= nil then return true else return E:StaticPopup_Show('ELTRUISMINVALIDMODEL') and false end else return true end end)
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.unitframes.args.modelalphalight = ACH:Range(L["Light Mode Alpha"], nil, 6, { min = 0, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.models.ufalpha end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.models.ufalpha = value ElvUI_EltreumUI:PlayerUFEffects() ElvUI_EltreumUI:TargetUFEffects() ElvUI_EltreumUI:TargetTargetUFEffects() end, function() return not E.db.ElvUI_EltreumUI.unitframes.models.unitframe or not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.unitframes.args.modelalphadark = ACH:Range(L["Dark Mode Alpha"], nil, 6, { min = 0, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.models.ufalphadark end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.models.ufalphadark = value ElvUI_EltreumUI:PlayerUFEffects() ElvUI_EltreumUI:TargetUFEffects() ElvUI_EltreumUI:TargetTargetUFEffects() end, function() return not E.db.ElvUI_EltreumUI.unitframes.models.unitframe or not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.unitframes.args.modeldesaturation = ACH:Range(L["Desaturation"], nil, 7, { min = 0, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.models.ufdesaturation end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.models.ufdesaturation = value ElvUI_EltreumUI:PlayerUFEffects() ElvUI_EltreumUI:TargetUFEffects() ElvUI_EltreumUI:TargetTargetUFEffects() end, function() return not E.db.ElvUI_EltreumUI.unitframes.models.unitframe or not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.castbar = ACH:Group(L["Cast Bar"], nil, 2, "tab", nil, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.castbar.args.description1 = ACH:Description(L["Castbar Models"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.castbar.args.enable = ACH:Toggle(L["Enable Models/Effects"], L["Enable adding models as effects on Castbars"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.models.castbar end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.models.castbar = value ElvUI_EltreumUI:CastbarEffects() end, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.castbar.args.selectmodel = ACH:Select(L["Choose between a Default Model or a Custom Model"], nil, 3, { ["DEFAULT"] = L["Default"], ["CUSTOM"] = CUSTOM, }, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.models.modeltypecast end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.models.modeltypecast = value ElvUI_EltreumUI:CastbarEffects() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.UFmodifications or not E.db.ElvUI_EltreumUI.unitframes.models.castbar) end)
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.castbar.args.selectmodel.style = "radio"
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.castbar.args.custommodelpath = ACH:Input(function() if E.Retail then return L["Type the Model ID, such as 165821"] else return L["Type the Model Path, such as spells/corruption_impactdot_med_base.m2"] end end, nil, 4, nil, "full", function() if E.Retail then return tostring(E.db.ElvUI_EltreumUI.unitframes.models.custommodelcast) else return tostring(E.db.ElvUI_EltreumUI.unitframes.models.custommodelclassiccast) end end, function(_, value) if E.Retail then E.db.ElvUI_EltreumUI.unitframes.models.custommodelcast = tonumber(value) else E.db.ElvUI_EltreumUI.unitframes.models.custommodelclassiccast = tostring(value) end ElvUI_EltreumUI:CastbarEffects() end, function() return E.db.ElvUI_EltreumUI.unitframes.models.modeltypecast == "DEFAULT" or (not E.db.ElvUI_EltreumUI.unitframes.UFmodifications or not E.db.ElvUI_EltreumUI.unitframes.models.castbar) end, nil, function(_, value)
		E.PopupDialogs["ELTRUISMINVALIDMODELCAST"] = {
			text = L["Invalid Model, you need to add a Model ID/Path"],
			button1 = OKAY,
			timeout = 0,
			whileDead = 1,
			hideOnEscape = true,
		}
		if E.Retail then if tonumber(value) ~= nil then return true else return E:StaticPopup_Show('ELTRUISMINVALIDMODELCAST') and false end else return true end end)
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.power = ACH:Group(L["Power Bar"], nil, 2, "tab", nil, nil)
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.power.args.description1 = ACH:Description(L["Power Bar Models"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.power.args.enable = ACH:Toggle(L["Enable Models/Effects"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.models.powerbar end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.models.powerbar = value ElvUI_EltreumUI:PlayerUFEffects() end, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.power.args.select = ACH:Select(L["Choose between a Default Model or a Custom Model"], nil, 3, {
		["DEFAULT"] = L["Default"],
		["CUSTOM"] = CUSTOM,
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.models.modeltypepower end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.models.modeltypepower = value ElvUI_EltreumUI:PlayerUFEffects() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.UFmodifications or not E.db.ElvUI_EltreumUI.unitframes.models.powerbar) end)
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.power.args.select.style = "radio"
	ElvUI_EltreumUI.Options.args.unitframes.args.models.args.power.args.custommodelpath = ACH:Input(function() if E.Retail then return L["Type the Model ID, such as 165821"] else return L["Type the Model Path, such as spells/corruption_impactdot_med_base.m2"] end end, nil, 5, nil, "full", function() if E.Retail then return tostring(E.db.ElvUI_EltreumUI.unitframes.models.custommodelpower) else return tostring(E.db.ElvUI_EltreumUI.unitframes.models.custommodelclassicpower) end end, function(_, value) if E.Retail then E.db.ElvUI_EltreumUI.unitframes.models.custommodelpower = tonumber(value) else E.db.ElvUI_EltreumUI.unitframes.models.custommodelclassicpower = tostring(value) end ElvUI_EltreumUI:PlayerUFEffects() end, function() return E.db.ElvUI_EltreumUI.unitframes.models.modeltypepower == "DEFAULT" or (not E.db.ElvUI_EltreumUI.unitframes.UFmodifications or not E.db.ElvUI_EltreumUI.unitframes.models.powerbar) end, nil, function(_, value)
		E.PopupDialogs["ELTRUISMINVALIDMODELPOWER"] = {
			text = L["Invalid Model, you need to add a Model ID/Path"],
			button1 = OKAY,
			timeout = 0,
			whileDead = 1,
			hideOnEscape = true,
		}
		if E.Retail then if tonumber(value) ~= nil then return true else return E:StaticPopup_Show('ELTRUISMINVALIDMODELPOWER') and false end else return true end end)
	--party/raid
	ElvUI_EltreumUI.Options.args.party = ACH:Group(E:TextGradient(L["Party/Raid"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Play sounds when party members die, show resurrection timers and change instance texts"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.party.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\party'
	ElvUI_EltreumUI.Options.args.party.args.general = ACH:Group(L["General"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.party.args.general.args.description1 = ACH:Description(L["Play a sound when someone dies in Party or Raid"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.party.args.general.args.deathssound = ACH:Toggle(L["Enable"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.partyraiddeath.enable end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.partyraiddeath.enable = value end)
	ElvUI_EltreumUI.Options.args.party.args.general.args.deathssoundbg= ACH:Toggle(L["Disable in Battlegrounds/Arenas"], nil, 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.partyraiddeath.bgdisable end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.partyraiddeath.bgdisable = value end, function() return not E.db.ElvUI_EltreumUI.otherstuff.partyraiddeath.enable end)
	ElvUI_EltreumUI.Options.args.party.args.general.args.deathssoundLSM = ACH:SharedMediaSound(L["Select a Sound"], L["Choose a Sound from SharedMedia files"], 4, "double", function() return E.db.ElvUI_EltreumUI.otherstuff.partyraiddeath.playerdeathsound end, function(_,key) E.db.ElvUI_EltreumUI.otherstuff.partyraiddeath.playerdeathsound = key end, function() return not E.db.ElvUI_EltreumUI.otherstuff.partyraiddeath.enable end)
	ElvUI_EltreumUI.Options.args.party.args.general.args.description2 = ACH:Description(" ", 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.general.args.battleres = ACH:Toggle(L["Show a Battle Resurrection Count and Cooldown Frame"], L["Enables a frame that shows a cooldown and count for battle resurrections while in an instance that has them"], 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.bres end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.bres = value E:StaticPopup_Show('CONFIG_RL') end, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.general.args.description3 = ACH:Description(COMBAT_LOG, 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.party.args.general.args.autocombatlog = ACH:Toggle(L["Enable Automatic Combat Log"], nil, 8, nil, false, "full", function() return E.db.ElvUI_EltreumUI.cvars.combatlog end, function(_, value) E.db.ElvUI_EltreumUI.cvars.combatlog = value end)
	ElvUI_EltreumUI.Options.args.party.args.general.args.description4 = ACH:Description(_G.DUNGEONS_BUTTON, 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Classic)
	ElvUI_EltreumUI.Options.args.party.args.general.args.groupfinderSpecIcons = ACH:Toggle(L["Add Spec Icons to the Group Finder Listing"] or L["Add Class Icons to the Group Finder Listing"], nil, 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.groupfinderSpecIcons end, function(_, value) E.db.ElvUI_EltreumUI.skins.groupfinderSpecIcons = value E:StaticPopup_Show('CONFIG_RL') end, nil, E.Classic)
	ElvUI_EltreumUI.Options.args.party.args.general.args.groupfinderDungeonScore = ACH:Toggle(L["Add Dungeon Score to Group Finder Listing"], nil, 11, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.groupfinderDungeonScore end, function(_, value) E.db.ElvUI_EltreumUI.skins.groupfinderDungeonScore = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.groupfinderSpecIcons end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.general.args.groupfinderSpecIconsType = ACH:Select(L["Style"], nil, 12, {
		["SPEC"] = L["Spec"],
		["CLASS"] = CLASS,
	}, false, nil, function() return E.db.ElvUI_EltreumUI.skins.groupfinderSpecIconsType end, function(_, value) E.db.ElvUI_EltreumUI.skins.groupfinderSpecIconsType = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.groupfinderSpecIcons end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.general.args.groupfinderSpecIconsType.style = "radio"
	ElvUI_EltreumUI.Options.args.party.args.general.args.groupfinderIconStyle = ACH:Select(L["Country Style"], nil, 12, {
		["TEXT"] = L["Text"],
		["FLAG"] = L["Flag"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.skins.groupfinderIconStyle end, function(_, value) E.db.ElvUI_EltreumUI.skins.groupfinderIconStyle = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.groupfinderSpecIcons end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.general.args.groupfinderIconStyle.style = "radio"

	ElvUI_EltreumUI.Options.args.party.args.instances = ACH:Group(L["Instances"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description1 = ACH:Description(L["Instance Texts"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.enable = ACH:Toggle(L["Enable"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.instances.enable end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.enable = value end)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.classcolor = ACH:Toggle(L["Use Class Colors"], nil, 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.instances.classcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.classcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.unifycolor = ACH:Toggle(L["Difficulty Specific Colors"], L["Use different colors per Difficulty"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.instances.difficultycolors end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.difficultycolors = value E:StaticPopup_Show('CONFIG_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor) end)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.color = ACH:Color(L["Instance Text Color"], nil, 5, false, "full", function() return E.db.ElvUI_EltreumUI.skins.instances.r, E.db.ElvUI_EltreumUI.skins.instances.g, E.db.ElvUI_EltreumUI.skins.instances.b, 1, P.ElvUI_EltreumUI.skins.instances.r, P.ElvUI_EltreumUI.skins.instances.g, P.ElvUI_EltreumUI.skins.instances.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.r, E.db.ElvUI_EltreumUI.skins.instances.g, E.db.ElvUI_EltreumUI.skins.instances.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor) end)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.gradientcolor = ACH:Toggle(L["Gradient Colors"], nil, 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.instances.gradient end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.gradient = value E:StaticPopup_Show('CONFIG_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.gradientred = ACH:Range(L["Red"], nil, 7, { min = -1, max = 1, step = 0.01 }, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.redoffset end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.redoffset = value E:StaticPopup_Show('CONFIG_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or not E.db.ElvUI_EltreumUI.skins.instances.gradient or E.db.ElvUI_EltreumUI.skins.instances.classcolor) end)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.gradientgreen = ACH:Range(L["Green"], nil, 7, { min = -1, max = 1, step = 0.01 }, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.greenoffset end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.greenoffset = value E:StaticPopup_Show('CONFIG_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or not E.db.ElvUI_EltreumUI.skins.instances.gradient or E.db.ElvUI_EltreumUI.skins.instances.classcolor) end)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.gradientblue = ACH:Range(L["Blue"], nil, 7, { min = -1, max = 1, step = 0.01 }, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.blueoffset end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.blueoffset = value E:StaticPopup_Show('CONFIG_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or not E.db.ElvUI_EltreumUI.skins.instances.gradient or E.db.ElvUI_EltreumUI.skins.instances.classcolor) end)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.fontsize = ACH:Range(L["Font Size"], L["Instance text Font Size"], 8, { min = 4, max = 72, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.instances.fontsize end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.fontsize = tonumber(value) end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description4 = ACH:Description(" ", 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.party.args.instances.args.DungeonNormalColor = ACH:Color(L["Color"], nil, 10, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.DungeonNormalColor.r, E.db.ElvUI_EltreumUI.skins.instances.DungeonNormalColor.g, E.db.ElvUI_EltreumUI.skins.instances.DungeonNormalColor.b, 1, P.ElvUI_EltreumUI.skins.instances.DungeonNormalColor.r, P.ElvUI_EltreumUI.skins.instances.DungeonNormalColor.g, P.ElvUI_EltreumUI.skins.instances.DungeonNormalColor.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.DungeonNormalColor.r, E.db.ElvUI_EltreumUI.skins.instances.DungeonNormalColor.g, E.db.ElvUI_EltreumUI.skins.instances.DungeonNormalColor.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor or not E.db.ElvUI_EltreumUI.skins.instances.difficultycolors) end)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.DungeonNormalText = ACH:Input(L["Dungeon"], L["The text displayed when in a normal dungeon"], 11, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.DungeonNormal end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.DungeonNormal = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description5 = ACH:Description(" ", 12, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Classic)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.DungeonHeroicColor = ACH:Color(L["Color"], nil, 13, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.DungeonHeroicColor.r, E.db.ElvUI_EltreumUI.skins.instances.DungeonHeroicColor.g, E.db.ElvUI_EltreumUI.skins.instances.DungeonHeroicColor.b, 1, P.ElvUI_EltreumUI.skins.instances.DungeonHeroicColor.r, P.ElvUI_EltreumUI.skins.instances.DungeonHeroicColor.g, P.ElvUI_EltreumUI.skins.instances.DungeonHeroicColor.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.DungeonHeroicColor.r, E.db.ElvUI_EltreumUI.skins.instances.DungeonHeroicColor.g, E.db.ElvUI_EltreumUI.skins.instances.DungeonHeroicColor.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor or not E.db.ElvUI_EltreumUI.skins.instances.difficultycolors) end, E.Classic)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.DungeonHeroicText = ACH:Input(L["Dungeon (Heroic)"], L["The text displayed when in a heroic dungeon"], 14, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.DungeonHeroic end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.DungeonHeroic = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end, E.Classic)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description6 = ACH:Description(" ", 15, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.DungeonTimewalkerColor = ACH:Color(L["Color"], nil, 16, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.DungeonTimewalkerColor.r, E.db.ElvUI_EltreumUI.skins.instances.DungeonTimewalkerColor.g, E.db.ElvUI_EltreumUI.skins.instances.DungeonTimewalkerColor.b, 1, P.ElvUI_EltreumUI.skins.instances.DungeonTimewalkerColor.r, P.ElvUI_EltreumUI.skins.instances.DungeonTimewalkerColor.g, P.ElvUI_EltreumUI.skins.instances.DungeonTimewalkerColor.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.DungeonTimewalkerColor.r, E.db.ElvUI_EltreumUI.skins.instances.DungeonTimewalkerColor.g, E.db.ElvUI_EltreumUI.skins.instances.DungeonTimewalkerColor.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor or not E.db.ElvUI_EltreumUI.skins.instances.difficultycolors) end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.DungeonTimewalkerText = ACH:Input(L["Dungeon (Timewalking)"], L["The text displayed when in a timewalking dungeon"], 17, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.DungeonTimewalker end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.DungeonTimewalker = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description7 = ACH:Description(" ", 18, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.DungeonMythicColor = ACH:Color(L["Color"], nil, 19, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.DungeonMythicColor.r, E.db.ElvUI_EltreumUI.skins.instances.DungeonMythicColor.g, E.db.ElvUI_EltreumUI.skins.instances.DungeonMythicColor.b, 1, P.ElvUI_EltreumUI.skins.instances.DungeonMythicColor.r, P.ElvUI_EltreumUI.skins.instances.DungeonMythicColor.g, P.ElvUI_EltreumUI.skins.instances.DungeonMythicColor.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.DungeonMythicColor.r, E.db.ElvUI_EltreumUI.skins.instances.DungeonMythicColor.g, E.db.ElvUI_EltreumUI.skins.instances.DungeonMythicColor.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor or not E.db.ElvUI_EltreumUI.skins.instances.difficultycolors) end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.DungeonMythicText = ACH:Input(L["Dungeon (Mythic)"], L["The text displayed when in a mythic dungeon"], 20, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.DungeonMythic end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.DungeonMythic = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description8 = ACH:Description(" ", 21, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.DungeonMythicPlusColor = ACH:Color(L["Color"], nil, 22, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.DungeonMythicPlusColor.r, E.db.ElvUI_EltreumUI.skins.instances.DungeonMythicPlusColor.g, E.db.ElvUI_EltreumUI.skins.instances.DungeonMythicPlusColor.b, 1, P.ElvUI_EltreumUI.skins.instances.DungeonMythicPlusColor.r, P.ElvUI_EltreumUI.skins.instances.DungeonMythicPlusColor.g, P.ElvUI_EltreumUI.skins.instances.DungeonMythicPlusColor.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.DungeonMythicPlusColor.r, E.db.ElvUI_EltreumUI.skins.instances.DungeonMythicPlusColor.g, E.db.ElvUI_EltreumUI.skins.instances.DungeonMythicPlusColor.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor or not E.db.ElvUI_EltreumUI.skins.instances.difficultycolors) end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.DungeonMythicPlusText = ACH:Input(L["Dungeon (Mythic Plus)"], L["The text displayed when in a mythic plus dungeon"], 23, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.DungeonMythicPlus end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.DungeonMythicPlus = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description9 = ACH:Description(" ", 24, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.party.args.instances.args.RaidColor = ACH:Color(L["Color"], nil, 25, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.RaidColor.r, E.db.ElvUI_EltreumUI.skins.instances.RaidColor.g, E.db.ElvUI_EltreumUI.skins.instances.RaidColor.b, 1, P.ElvUI_EltreumUI.skins.instances.RaidColor.r, P.ElvUI_EltreumUI.skins.instances.RaidColor.g, P.ElvUI_EltreumUI.skins.instances.RaidColor.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.RaidColor.r, E.db.ElvUI_EltreumUI.skins.instances.RaidColor.g, E.db.ElvUI_EltreumUI.skins.instances.RaidColor.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor or not E.db.ElvUI_EltreumUI.skins.instances.difficultycolors) end)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.RaidText = ACH:Input(L["Raid (Normal)"], L["The text displayed when in a normal raid"], 26, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.Raid end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.Raid = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description10 = ACH:Description(" ", 27, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.party.args.instances.args.Raid10Color = ACH:Color(L["Color"], nil, 28, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.Raid10Color.r, E.db.ElvUI_EltreumUI.skins.instances.Raid10Color.g, E.db.ElvUI_EltreumUI.skins.instances.Raid10Color.b, 1, P.ElvUI_EltreumUI.skins.instances.Raid10Color.r, P.ElvUI_EltreumUI.skins.instances.Raid10Color.g, P.ElvUI_EltreumUI.skins.instances.Raid10Color.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.Raid10Color.r, E.db.ElvUI_EltreumUI.skins.instances.Raid10Color.g, E.db.ElvUI_EltreumUI.skins.instances.Raid10Color.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor or not E.db.ElvUI_EltreumUI.skins.instances.difficultycolors) end)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.Raid10Text = ACH:Input(L["Raid (Normal)"].." 10", L["The text displayed when in a normal raid"], 29, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.Raid10 end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.Raid10 = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description11 = ACH:Description(" ", 30, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Classic)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.Raid25Color = ACH:Color(L["Color"], nil, 31, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.Raid25Color.r, E.db.ElvUI_EltreumUI.skins.instances.Raid25Color.g, E.db.ElvUI_EltreumUI.skins.instances.Raid25Color.b, 1, P.ElvUI_EltreumUI.skins.instances.Raid25Color.r, P.ElvUI_EltreumUI.skins.instances.Raid25Color.g, P.ElvUI_EltreumUI.skins.instances.Raid25Color.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.Raid25Color.r, E.db.ElvUI_EltreumUI.skins.instances.Raid25Color.g, E.db.ElvUI_EltreumUI.skins.instances.Raid25Color.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor or not E.db.ElvUI_EltreumUI.skins.instances.difficultycolors) end, E.Classic)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.Raid25Text = ACH:Input(L["Raid (Normal)"].." 25", L["The text displayed when in a normal raid"], 32, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.Raid25 end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.Raid25 = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end, E.Classic)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description12 = ACH:Description(" ", 33, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.party.args.instances.args.RaidHeroicColor = ACH:Color(L["Color"], nil, 34, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.RaidHeroicColor.r, E.db.ElvUI_EltreumUI.skins.instances.RaidHeroicColor.g, E.db.ElvUI_EltreumUI.skins.instances.RaidHeroicColor.b, 1, P.ElvUI_EltreumUI.skins.instances.RaidHeroicColor.r, P.ElvUI_EltreumUI.skins.instances.RaidHeroicColor.g, P.ElvUI_EltreumUI.skins.instances.RaidHeroicColor.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.RaidHeroicColor.r, E.db.ElvUI_EltreumUI.skins.instances.RaidHeroicColor.g, E.db.ElvUI_EltreumUI.skins.instances.RaidHeroicColor.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor or not E.db.ElvUI_EltreumUI.skins.instances.difficultycolors) end)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.RaidHeroicText = ACH:Input(L["Raid (Heroic)"], L["The text displayed when in a heroic raid"], 35, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.RaidHeroic end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.RaidHeroic = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description13 = ACH:Description(" ", 36, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Classic)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.Raid25HeroicColor = ACH:Color(L["Color"], nil, 37, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.Raid25HeroicColor.r, E.db.ElvUI_EltreumUI.skins.instances.Raid25HeroicColor.g, E.db.ElvUI_EltreumUI.skins.instances.Raid25HeroicColor.b, 1, P.ElvUI_EltreumUI.skins.instances.Raid25HeroicColor.r, P.ElvUI_EltreumUI.skins.instances.Raid25HeroicColor.g, P.ElvUI_EltreumUI.skins.instances.Raid25HeroicColor.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.Raid25HeroicColor.r, E.db.ElvUI_EltreumUI.skins.instances.Raid25HeroicColor.g, E.db.ElvUI_EltreumUI.skins.instances.Raid25HeroicColor.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor or not E.db.ElvUI_EltreumUI.skins.instances.difficultycolors) end, E.Classic)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.Raid25HeroicText = ACH:Input(L["Raid (Heroic)"].." 25", L["The text displayed when in a heroic raid"], 38, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.Raid25Heroic end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.Raid25Heroic = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end, E.Classic)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description14 = ACH:Description(" ", 39, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Classic)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.Raid10HeroicColor = ACH:Color(L["Color"], nil, 40, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.Raid10HeroicColor.r, E.db.ElvUI_EltreumUI.skins.instances.Raid10HeroicColor.g, E.db.ElvUI_EltreumUI.skins.instances.Raid10HeroicColor.b, 1, P.ElvUI_EltreumUI.skins.instances.Raid10HeroicColor.r, P.ElvUI_EltreumUI.skins.instances.Raid10HeroicColor.g, P.ElvUI_EltreumUI.skins.instances.Raid10HeroicColor.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.Raid10HeroicColor.r, E.db.ElvUI_EltreumUI.skins.instances.Raid10HeroicColor.g, E.db.ElvUI_EltreumUI.skins.instances.Raid10HeroicColor.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor or not E.db.ElvUI_EltreumUI.skins.instances.difficultycolors) end, E.Classic)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.Raid10HeroicText = ACH:Input(L["Raid (Heroic)"].." 10", L["The text displayed when in a heroic raid"], 41, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.Raid10Heroic end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.Raid10Heroic = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end, E.Classic)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description15 = ACH:Description(" ", 42, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.RaidLFRColor = ACH:Color(L["Color"], nil, 43, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.RaidLFRColor.r, E.db.ElvUI_EltreumUI.skins.instances.RaidLFRColor.g, E.db.ElvUI_EltreumUI.skins.instances.RaidLFRColor.b, 1, P.ElvUI_EltreumUI.skins.instances.RaidLFRColor.r, P.ElvUI_EltreumUI.skins.instances.RaidLFRColor.g, P.ElvUI_EltreumUI.skins.instances.RaidLFRColor.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.RaidLFRColor.r, E.db.ElvUI_EltreumUI.skins.instances.RaidLFRColor.g, E.db.ElvUI_EltreumUI.skins.instances.RaidLFRColor.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor or not E.db.ElvUI_EltreumUI.skins.instances.difficultycolors) end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.RaidLFRText = ACH:Input(L["Raid (LFR)"], L["The text displayed when in a lfr raid"], 44, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.RaidLFR end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.RaidLFR = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description16 = ACH:Description(" ", 45, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.MythicRaidColor = ACH:Color(L["Color"], nil, 46, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.MythicRaidColor.r, E.db.ElvUI_EltreumUI.skins.instances.MythicRaidColor.g, E.db.ElvUI_EltreumUI.skins.instances.MythicRaidColor.b, 1, P.ElvUI_EltreumUI.skins.instances.MythicRaidColor.r, P.ElvUI_EltreumUI.skins.instances.MythicRaidColor.g, P.ElvUI_EltreumUI.skins.instances.MythicRaidColor.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.MythicRaidColor.r, E.db.ElvUI_EltreumUI.skins.instances.MythicRaidColor.g, E.db.ElvUI_EltreumUI.skins.instances.MythicRaidColor.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor or not E.db.ElvUI_EltreumUI.skins.instances.difficultycolors) end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.MythicRaidText = ACH:Input(L["Raid (Mythic)"], L["The text displayed when in a mythic raid"], 47, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.MythicRaid end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.MythicRaid = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description17 = ACH:Description(" ", 48, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.RaidTimewalkerColor = ACH:Color(L["Color"], nil, 49, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.RaidTimewalkerColor.r, E.db.ElvUI_EltreumUI.skins.instances.RaidTimewalkerColor.g, E.db.ElvUI_EltreumUI.skins.instances.RaidTimewalkerColor.b, 1, P.ElvUI_EltreumUI.skins.instances.RaidTimewalkerColor.r, P.ElvUI_EltreumUI.skins.instances.RaidTimewalkerColor.g, P.ElvUI_EltreumUI.skins.instances.RaidTimewalkerColor.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.RaidTimewalkerColor.r, E.db.ElvUI_EltreumUI.skins.instances.RaidTimewalkerColor.g, E.db.ElvUI_EltreumUI.skins.instances.RaidTimewalkerColor.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor or not E.db.ElvUI_EltreumUI.skins.instances.difficultycolors) end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.RaidTimewalkerText = ACH:Input(L["Raid (Timewalking)"], L["The text displayed when in a timewalking raid"], 50, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.RaidTimewalker end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.RaidTimewalker = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description18 = ACH:Description(" ", 51, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.GuildColor = ACH:Color(L["Color"], nil, 52, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.guildColor.r, E.db.ElvUI_EltreumUI.skins.instances.guildColor.g, E.db.ElvUI_EltreumUI.skins.instances.guildColor.b, 1, P.ElvUI_EltreumUI.skins.instances.guildColor.r, P.ElvUI_EltreumUI.skins.instances.guildColor.g, P.ElvUI_EltreumUI.skins.instances.guildColor.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.guildColor.r, E.db.ElvUI_EltreumUI.skins.instances.guildColor.g, E.db.ElvUI_EltreumUI.skins.instances.guildColor.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor or not E.db.ElvUI_EltreumUI.skins.instances.difficultycolors) end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.GuildText = ACH:Input(L["Guild"], L["The text displayed when in a guild group"], 53, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.guild end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.guild = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description19 = ACH:Description(" ", 54, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.delveColor = ACH:Color(L["Color"], nil, 55, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.delveColor.r, E.db.ElvUI_EltreumUI.skins.instances.delveColor.g, E.db.ElvUI_EltreumUI.skins.instances.delveColor.b, 1, P.ElvUI_EltreumUI.skins.instances.delveColor.r, P.ElvUI_EltreumUI.skins.instances.delveColor.g, P.ElvUI_EltreumUI.skins.instances.delveColor.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.delveColor.r, E.db.ElvUI_EltreumUI.skins.instances.delveColor.g, E.db.ElvUI_EltreumUI.skins.instances.delveColor.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor or not E.db.ElvUI_EltreumUI.skins.instances.difficultycolors) end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.delveText = ACH:Input(DELVE_LABEL, L["The text displayed when in a delve"], 56, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.delve end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.delve = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.description20 = ACH:Description(" ", 57, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.questColor = ACH:Color(L["Color"], nil, 58, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.questColor.r, E.db.ElvUI_EltreumUI.skins.instances.questColor.g, E.db.ElvUI_EltreumUI.skins.instances.questColor.b, 1, P.ElvUI_EltreumUI.skins.instances.questColor.r, P.ElvUI_EltreumUI.skins.instances.questColor.g, P.ElvUI_EltreumUI.skins.instances.questColor.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.instances.questColor.r, E.db.ElvUI_EltreumUI.skins.instances.questColor.g, E.db.ElvUI_EltreumUI.skins.instances.questColor.b = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable or E.db.ElvUI_EltreumUI.skins.instances.classcolor or not E.db.ElvUI_EltreumUI.skins.instances.difficultycolors) end, not E.Retail)
	ElvUI_EltreumUI.Options.args.party.args.instances.args.questText = ACH:Input(QUESTS_LABEL, L["The text displayed when in a quest instance"], 59, false, nil, function() return E.db.ElvUI_EltreumUI.skins.instances.quest end, function(_, value) E.db.ElvUI_EltreumUI.skins.instances.quest = tostring(value) E:StaticPopup_Show('PRIVATE_RL') end, function() return (not E.db.ElvUI_EltreumUI.skins.instances.enable) end, not E.Retail)

	--gradient
	ElvUI_EltreumUI.Options.args.gradient = ACH:Group(E:TextGradient(L["Gradient"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Add gradients to Unitframes and Nameplates"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.gradient.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\gradient'
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes = ACH:Group(L["UnitFrames"], nil, 2, "tab", nil, nil, function() return (not E.db.ElvUI_EltreumUI.unitframes.lightmode and not E.db.ElvUI_EltreumUI.unitframes.darkmode) or not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes = ACH:Group(L["Frames"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.enable = ACH:Group("", nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.enable.inline = true
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.enable.args.gradientenable = ACH:Toggle(L["Enable Gradient (Requires Dark or Light Modes)"], L["Enable Gradient colors for Health"], 2, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable = value ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return (not E.db.ElvUI_EltreumUI.unitframes.lightmode and not E.db.ElvUI_EltreumUI.unitframes.darkmode) or not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.enable.args.powerenable = ACH:Toggle(L["Enable Gradient Power"], L["Enable Gradient Power Colors"], 3, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepower end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepower = value ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.enable.args.classbarenable = ACH:Toggle(L["Enable Gradient Class Bar"], nil, 3, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableclassbar end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableclassbar = value ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.enable.args.aurabarsenable = ACH:Toggle(L["Enable Gradient Aurabars"], nil, 3, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableaurabars end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableaurabars = value ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.enable.args.backdropenable = ACH:Toggle(L["Enable Gradient Backdrop"], nil, 3, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablebackdrop end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablebackdrop = value ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.enableplayer = ACH:Toggle(L["Enable for Player"], L["Enable Gradient colors for Health"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableplayer end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableplayer = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.enabletarget = ACH:Toggle(L["Enable for Target"], L["Enable Gradient colors for Health"], 3, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletarget end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletarget = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.reversetarget = ACH:Toggle(L["Reverse Target"], L["Reverse Target Gradient Health"], 4, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.reversetarget end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.reversetarget = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletarget end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.gap1 = ACH:Description('', 5, nil)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.enablefocus = ACH:Toggle(L["Enable for Focus"], L["Enable Gradient colors for Health"], 6, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablefocus end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablefocus = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end, E.Classic)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.reversefocus = ACH:Toggle(E.NewSign..L["Reverse Focus"], L["Reverse Focus Gradient Health"], 7, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.reversefocus end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.reversefocus = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablefocus end, E.Classic)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.enabletargettarget = ACH:Toggle(L["Enable for Target of Target"], L["Enable Gradient colors for Health"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargettarget end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargettarget = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.enabletargettargettarget = ACH:Toggle(L["Enable for Target of Target of Target"], L["Enable Gradient colors for Health"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargettargettarget end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargettargettarget = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.enablefocustarget = ACH:Toggle(L["Enable for Focus Target"], L["Enable Gradient colors for Health"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablefocustarget end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablefocustarget = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end, E.Classic)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.enableboss = ACH:Toggle(L["Enable for Boss"], L["Enable Gradient colors for Health"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableboss end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableboss = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end, E.Classic)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.enablearena = ACH:Toggle(L["Enable for Arena"], L["Enable Gradient colors for Health"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablearena end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablearena = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end, E.Classic)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.enablegroupunits = ACH:Toggle(L["Enable for Group Units"], L["Enable Gradient colors for Health"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablegroupunits end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablegroupunits = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.enableplayercastbar = ACH:Toggle(L["Enable for Player Castbar"], L["Enable Gradient colors for Player Castbar"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableplayercastbar end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableplayercastbar = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.enableplayercastbarnoninterruptible = ACH:Toggle(L["Enable for Player Castbar (Non Interruptible)"], L["Enable Gradient colors for Player Castbar (Non Interruptible)"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableplayercastbarnoninterruptible end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableplayercastbarnoninterruptible = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.enableplayercastbarinterrupted = ACH:Toggle(L["Enable for Player Castbar (Interrupted)"], L["Enable Gradient colors for Player Castbar (Interrupted)"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableplayercastbarinterrupted end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableplayercastbarinterrupted = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.enabletargetcastbar = ACH:Toggle(L["Enable for Target Castbar"], L["Enable Gradient colors for Target Castbar"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargetcastbar end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargetcastbar = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.enabletargetcastbarnoninterruptible = ACH:Toggle(L["Enable for Target Castbar (Non Interruptible)"], L["Enable Gradient colors for Target Castbar (Non Interruptible)"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargetcastbarnoninterruptible end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargetcastbarnoninterruptible = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.enabletargetcastbarinterrupted = ACH:Toggle(L["Enable for Target Castbar (Interrupted)"], L["Enable Gradient colors for Target Castbar (Interrupted)"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargetcastbarinterrupted end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargetcastbarinterrupted = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.unitframes.args.enablepet = ACH:Toggle(L["Enable for Pet"], L["Enable Gradient colors for Pet"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepet end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepet = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.orientation = ACH:Group(L["Gradient Orientation"], L["Choose the direction of the gradient"], 2, "tab")
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.orientation.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.orientation.args.orientationhealth = ACH:Select(L["Gradient Orientation"], nil, 2, {
		["HORIZONTAL"] = L["Horizontal"],
		["VERTICAL"] = L["Vertical"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.orientation end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.orientation = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.orientation.args.orientationhealth.style = "radio"
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.orientation.args.description2 = ACH:Description(" ", 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.orientation.args.orientationpower = ACH:Select(L["Gradient Power Orientation"], L["Choose the direction of the gradient"], 4, {
		["HORIZONTAL"] = L["Horizontal"],
		["VERTICAL"] = L["Vertical"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.orientationpower end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.orientationpower = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.orientation.args.orientationpower.style = "radio"
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.texture = ACH:Group(L["Texture"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.texture.args.selectLSM = ACH:SharedMediaStatusbar(L["Gradient Texture"], L["Select a Texture"], 1, nil , function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.texture end, function(_,key) E.db.ElvUI_EltreumUI.unitframes.gradientmode.texture = key ElvUI_EltreumUI:CustomTexture() end, function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable or E.db.ElvUI_EltreumUI.unitframes.gradientmode.useUFtexture or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.unitframes.args.texture.args.useElvUI = ACH:Toggle(L["Use ElvUI Unitframe Texture"], L["Uses ElvUI Unitframe Statusbar texture instead"], 2, nil, false, "double", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.useUFtexture end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.useUFtexture = value ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return E.db.ElvUI_EltreumUI.unitframes.ufcustomtexture.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.nameplates = ACH:Group(L["Nameplates"], nil, 3)
	ElvUI_EltreumUI.Options.args.gradient.args.nameplates.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.nameplates.args.enablegradientnp = ACH:Toggle(L["Enable Gradient Nameplates"], L["Enable Gradient colors for Nameplates. |cffFF0000WARNING:|r This will overwrite some default ElvUI NP settings, if you dont want this, please disable this feature."], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable = value end)
	ElvUI_EltreumUI.Options.args.gradient.args.nameplates.args.gradientorientation = ACH:Select(L["Gradient Orientation"], L["Choose the direction of the gradient"], 5, { ["HORIZONTAL"] = L["Horizontal"], ["VERTICAL"] = L["Vertical"], }, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.nporientation end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.nporientation = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable end)
	ElvUI_EltreumUI.Options.args.gradient.args.nameplates.args.gradientorientation.style = "radio"
	ElvUI_EltreumUI.Options.args.gradient.args.colors = ACH:Group(E:TextGradient(L["Gradient Colors"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Customize Gradient Colors"], 4, 'tab')
	ElvUI_EltreumUI.Options.args.gradient.args.colors.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\gradient'
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.enable = ACH:Group("", nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.enable.inline = true
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.enable.args.enablecustomcolornp = ACH:Toggle(L["Nameplate Custom Color"], L["Enable Custom Colors for Nameplates"], 1, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor = value ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.enable.args.enablecustomcoloruf = ACH:Toggle(L["Unitframe Custom Color"], L["Enable Custom Colors for Unitframes"], 1, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor = value ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class = ACH:Group(L["Custom Class Colors"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.description1 = ACH:Description(L["Death Knight"], 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Classic)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientdeathknight1 = ACH:Color(L["Color 1"], nil, 4, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end, E.Classic)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientdeathknight2 = ACH:Color(L["Color 2"], nil, 5, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.deathknightcustomcolorB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end, E.Classic)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.description2 = ACH:Description(L["Demon Hunter"], 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientdemonhunter1 = ACH:Color(L["Color 1"], nil, 7, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end, not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientdemonhunter2 = ACH:Color(L["Color 2"], nil, 8, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.demonhuntercustomcolorB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end, not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.description3 = ACH:Description(L["Druid"], 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientdruid1 = ACH:Color(L["Color 1"], nil, 10, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientdruid2 = ACH:Color(L["Color 2"], nil, 11, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.druidcustomcolorB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.description4 = ACH:Description(L["Evoker"], 12, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientevoker1 = ACH:Color(L["Color 1"], nil, 13, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end, not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientevoker2 = ACH:Color(L["Color 2"], nil, 14, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.evokercustomcolorB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end, not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.description5 = ACH:Description(L["Hunter"], 15, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradienthunter1 = ACH:Color(L["Color 1"], nil, 16, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradienthunter2 = ACH:Color(L["Color 2"], nil, 17, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.huntercustomcolorB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.description6 = ACH:Description(L["Mage"], 18, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientmage1 = ACH:Color(L["Color 1"], nil, 19, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientmage2 = ACH:Color(L["Color 2"], nil, 20, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.magecustomcolorB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.description7 = ACH:Description(L["Monk"], 21, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientmonk1 = ACH:Color(L["Color 1"], nil, 22, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end, not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientmonk2 = ACH:Color(L["Color 2"], nil, 23, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.monkcustomcolorB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end, not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.description8 = ACH:Description(L["Paladin"], 24, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientpaladin1 = ACH:Color(L["Color 1"], nil, 25, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientpaladin2 = ACH:Color(L["Color 2"], nil, 26, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.paladincustomcolorB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.description9 = ACH:Description(L["Priest"], 27, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientpriest1 = ACH:Color(L["Color 1"], nil, 28, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientpriest2 = ACH:Color(L["Color 2"], nil, 29, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.priestcustomcolorB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.description10 = ACH:Description(L["Rogue"], 30, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientrogue1 = ACH:Color(L["Color 1"], nil, 31, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientrogue2 = ACH:Color(L["Color 2"], nil, 32, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.roguecustomcolorB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.description11 = ACH:Description(L["Shaman"], 33, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientshaman1 = ACH:Color(L["Color 1"], nil, 34, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientshaman2 = ACH:Color(L["Color 2"], nil, 35, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.shamancustomcolorB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.description12 = ACH:Description(L["Warlock"], 36, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientwarlock1 = ACH:Color(L["Color 1"], nil, 37, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientwarlock2 = ACH:Color(L["Color 2"], nil, 38, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.warlockcustomcolorB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.description13 = ACH:Description(L["Warrior"], 39, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientwarrior1 = ACH:Color(L["Color 1"], nil, 40, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.class.args.gradientwarrior2 = ACH:Color(L["Color 2"], nil, 41, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.warriorcustomcolorB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.npc = ACH:Group(L["NPC"], nil, 3, "tab")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.npc.args.description14 = ACH:Description(L["Friendly NPC"], 42, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.npc.args.gradientnpcfriendly1 = ACH:Color(L["Color 1"], nil, 43, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.npc.args.gradientnpcfriendly2 = ACH:Color(L["Color 2"], nil, 44, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcfriendlyB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.npc.args.description15 = ACH:Description(L["Neutral NPC"], 45, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.npc.args.gradientnpcneutral1 = ACH:Color(L["Color 1"], nil, 46, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.npc.args.gradientnpcneutral2 = ACH:Color(L["Color 2"], nil, 47, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcneutralB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.npc.args.description16 = ACH:Description(L["Unfriendly NPC"], 48, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.npc.args.gradientnpcunfriendly1 = ACH:Color(L["Color 1"], nil, 49, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.npc.args.gradientnpcunfriendly2 = ACH:Color(L["Color 2"], nil, 50, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcunfriendlyB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.npc.args.description17 = ACH:Description(L["Hostile NPC"], 51, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.npc.args.gradientnpchostile1 = ACH:Color(L["Color 1"], nil, 52, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.npchostileR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.npchostileG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.npchostileB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.npchostileR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npchostileG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npchostileB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.npchostileR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npchostileG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npchostileB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.npc.args.gradientnpchostile2 = ACH:Color(L["Color 2"], nil, 53, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.npchostileR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.npchostileG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.npchostileB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.npchostileR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npchostileG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npchostileB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.npchostileR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npchostileG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.npchostileB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.npc.args.description18 = ACH:Description(L["Tapped NPC"], 54, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.npc.args.gradienttapped1 = ACH:Color(L["Color 1"], nil, 55, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.tappedR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.tappedG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.tappedB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.tappedR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.tappedG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.tappedB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.tappedR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.tappedG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.tappedB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.npc.args.gradienttapped2 = ACH:Color(L["Color 2"], nil, 56, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.tappedR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.tappedG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.tappedB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.tappedR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.tappedG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.tappedB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.tappedR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.tappedG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.tappedB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor and not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars = ACH:Group(L["Cast Bar"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.description1 = ACH:Description(L["Player Castbar"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.gradientcast1 = ACH:Color(L["Color 1"], nil, 2, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.classcolorplayercastbar or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableplayercastbar end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.gradientcast2 = ACH:Color(L["Color 2"], nil, 3, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.classcolorplayercastbar or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableplayercastbar end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.checkelvuiclasscolorcastbar = ACH:Toggle(L["Class Colors"], L["Use Class Colors instead of Custom Colors"], 4, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.classcolorplayercastbar end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.classcolorplayercastbar = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableplayercastbar end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.description2 = ACH:Description(L["Player Castbar (Non Interruptible)"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.gradientcast1cantinterruptplayer = ACH:Color(L["Color 1"], nil, 6, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR1noninterruptible local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG1noninterruptible local db = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB1noninterruptible return E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR1noninterruptiblecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG1noninterruptiblecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB1noninterruptiblecustom, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR1noninterruptiblecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG1noninterruptiblecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB1noninterruptiblecustom = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableplayercastbarnoninterruptible end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.gradientcast2cantinterruptplayer = ACH:Color(L["Color 2"], nil, 7, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR2noninterruptible local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG2noninterruptible local db = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB2noninterruptible return E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR2noninterruptiblecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG2noninterruptiblecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB2noninterruptiblecustom, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR2noninterruptiblecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG2noninterruptiblecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB2noninterruptiblecustom = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableplayercastbarnoninterruptible end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.description3 = ACH:Description(L["Player Castbar (Interrupted)"], 8, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.gradientcast1interruptedplayer = ACH:Color(L["Color 1"], nil, 9, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR1interrupted local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG1interrupted local db = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB1interrupted return E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR1interruptedcustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG1interruptedcustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB1interruptedcustom, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR1interruptedcustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG1interruptedcustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB1interruptedcustom = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableplayercastbarinterrupted end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.gradientcast2interruptedplayer = ACH:Color(L["Color 2"], nil, 10, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR2interrupted local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG2interrupted local db = P.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB2interrupted return E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR2interruptedcustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG2interruptedcustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB2interruptedcustom, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarR2interruptedcustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarG2interruptedcustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.playercastbarB2interruptedcustom = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enableplayercastbarinterrupted end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.description4 = ACH:Description(L["Target Castbar"], 11, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.gradientcast1target = ACH:Color(L["Color 1"], nil, 12, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR1custom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG1custom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB1custom, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR1custom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG1custom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB1custom = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargetcastbar or E.db.ElvUI_EltreumUI.unitframes.gradientmode.classcolortargetcastbar end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.gradientcast2target = ACH:Color(L["Color 2"], nil, 13, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR2custom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG2custom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB2custom, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR2custom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG2custom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB2custom = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargetcastbar or E.db.ElvUI_EltreumUI.unitframes.gradientmode.classcolortargetcastbar end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.checkelvuiclasscolorcastbartarget = ACH:Toggle(L["Class Colors"], L["Use Class Colors instead of Custom Colors"], 14, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.classcolortargetcastbar end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.classcolortargetcastbar = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargetcastbar end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.description5 = ACH:Description(L["Target Castbar (Non Interruptible)"], 15, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.gradientcast1noninterruptibletargetcustom = ACH:Color(L["Color 1"], nil, 16, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR1noninterruptible local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG1noninterruptible local db = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB1noninterruptible return E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR1noninterruptiblecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG1noninterruptiblecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB1noninterruptiblecustom, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR1noninterruptiblecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG1noninterruptiblecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB1noninterruptiblecustom = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargetcastbarnoninterruptible end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.gradientcast2noninterruptibletargetcustom = ACH:Color(L["Color 2"], nil, 17, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR2noninterruptible local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG2noninterruptible local db = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB2noninterruptible return E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR2noninterruptiblecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG2noninterruptiblecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB2noninterruptiblecustom, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR2noninterruptiblecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG2noninterruptiblecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB2noninterruptiblecustom = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargetcastbarnoninterruptible end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.description6 = ACH:Description(L["Target Castbar (Interrupted)"], 18, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.gradientcast1interruptedtarget = ACH:Color(L["Color 1"], nil, 19, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR1interrupted local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG1interrupted local db = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB1interrupted return E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR1interruptedcustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG1interruptedcustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB1interruptedcustom, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR1interruptedcustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG1interruptedcustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB1interruptedcustom = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargetcastbarinterrupted end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.gradientcast2interruptedtarget = ACH:Color(L["Color 2"], nil, 20, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR2interrupted local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG2interrupted local db = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB2interrupted return E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR2interruptedcustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG2interruptedcustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB2interruptedcustom, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR2interruptedcustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG2interruptedcustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB2interruptedcustom = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargetcastbarinterrupted end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.description7 = ACH:Description(L["NPC Castbars (Interruptible)"], 21, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.npcgradientinterruptible1 = ACH:Color(L["Color 1"], nil, 22, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR1interruptable local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG1interruptable local db = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB1interruptable return E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR1interruptablecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG1interruptablecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB1interruptablecustom, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR1interruptablecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG1interruptablecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB1interruptablecustom = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarreactioninterruptable end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.npcgradientinterruptible2 = ACH:Color(L["Color 2"], nil, 23, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR2interruptable local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG2interruptable local db = P.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB2interruptable return E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR2interruptablecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG2interruptablecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB2interruptablecustom, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarR2interruptablecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarG2interruptablecustom, E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarB2interruptablecustom = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarreactioninterruptable end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.castbars.args.npcreactioncastbarenable = ACH:Toggle(L["Color by Reaction"], nil, 24, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarreactioninterruptable end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.targetcastbarreactioninterruptable = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enabletargetcastbar end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate = ACH:Group(L["Nameplate Colors"], nil, 5, "tab")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.description1 = ACH:Description(L["Good Threat"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.goodthreat1 = ACH:Color(L["Color 1"], nil, 2, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.goodthreat2 = ACH:Color(L["Color 2"], nil, 3, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreatB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.description2 = ACH:Description(L["Bad Threat"], 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.badthreat1 = ACH:Color(L["Color 1"], nil, 5, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreatR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreatG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreatB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreatR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreatG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreatB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreatR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreatG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreatB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.badthreat2 = ACH:Color(L["Color 2"], nil, 6, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreatR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreatG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreatB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreatR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreatG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreatB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreatR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreatG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreatB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.description3 = ACH:Description(L["Good Threat Transition"], 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.goodthreattransition1 = ACH:Color(L["Color 1"], nil, 8, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.goodthreattransition2 = ACH:Color(L["Color 2"], nil, 9, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.description4 = ACH:Description(L["Bad Threat Transition"], 10, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.badthreattransition1 = ACH:Color(L["Color 1"], nil, 11, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.badthreattransition2 = ACH:Color(L["Color 2"], nil, 12, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.description5 = ACH:Description(L["Off Tank"], 13, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.offtank1 = ACH:Color(L["Color 1"], nil, 14, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.offtankR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.offtankG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.offtankB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.offtankR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.offtankG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.offtankB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.offtankR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.offtankG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.offtankB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.offtank2 = ACH:Color(L["Color 2"], nil, 15, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.offtankR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.offtankG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.offtankB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.offtankR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.offtankG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.offtankB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.offtankR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.offtankG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.offtankB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.description6 = ACH:Description(L["Off Tank Bad Threat Transition"], 16, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.badthreattransition1offtank = ACH:Color(L["Color 1"], nil, 17, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.badthreattransition2offtank = ACH:Color(L["Color 2"], nil, 18, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.badthreattransitionofftankB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.description7 = ACH:Description(L["Off Tank Good Threat Transition"], 19, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.goodthreattransition1offtank = ACH:Color(L["Color 1"], nil, 20, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.goodthreattransition2offtank = ACH:Color(L["Color 2"], nil, 21, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.goodthreattransitionofftankB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.description8 = ACH:Description(L["Style Filter"], 22, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.stylefilterred = ACH:Range(L["Red"], L["This is how much the color will gain or lose this value"], 23, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.stylefilterr end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.stylefilterr = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.stylefiltergreen = ACH:Range(L["Green"], L["This is how much the color will gain or lose this value"], 24, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.stylefilterg end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.stylefilterg = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.nameplate.args.stylefilterblue = ACH:Range(L["Blue"], L["This is how much the color will gain or lose this value"], 25, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.stylefilterb end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.stylefilterb = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npcustomcolor end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power = ACH:Group(L["Power Colors"], nil, 6, "tab")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.enablepowercustom = ACH:Toggle(L["Enable Custom Gradient Power"], L["Enable Custom Gradient Power Colors"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom = value ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepower and not E.db.ElvUI_EltreumUI.nameplates.nameplatepower.gradient end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.description2 = ACH:Description(MANA, 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.mana1 = ACH:Color(L["Color 1"], nil, 4, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.manaR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.manaG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.manaB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.manaR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.manaG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.manaB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.manaR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.manaG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.manaB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.mana2 = ACH:Color(L["Color 2"], nil, 5, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.manaR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.manaG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.manaB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.manaR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.manaG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.manaB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.manaR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.manaG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.manaB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.description3 = ACH:Description(RAGE, 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.rage1 = ACH:Color(L["Color 1"], nil, 7, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.rageR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.rageG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.rageB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.rageR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.rageG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.rageB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.rageR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.rageG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.rageB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.rage2 = ACH:Color(L["Color 2"], nil, 8, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.rageR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.rageG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.rageB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.rageR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.rageG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.rageB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.rageR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.rageG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.rageB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.description4 = ACH:Description(POWER_TYPE_FOCUS, 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.focus1 = ACH:Color(L["Color 1"], nil, 10, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.focusR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.focusG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.focusB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.focusR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.focusG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.focusB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.focusR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.focusG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.focusB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.focus2 = ACH:Color(L["Color 2"], nil, 11, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.focusR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.focusG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.focusB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.focusR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.focusG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.focusB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.focusR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.focusG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.focusB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.description5 = ACH:Description(ENERGY, 12, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.energy1 = ACH:Color(L["Color 1"], nil, 13, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.energyR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.energyG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.energyB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.energyR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.energyG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.energyB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.energyR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.energyG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.energyB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.energy2 = ACH:Color(L["Color 2"], nil, 14, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.energyR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.energyG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.energyB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.energyR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.energyG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.energyB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.energyR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.energyG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.energyB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.description6 = ACH:Description(RUNIC_POWER, 15, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Classic)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.runicpower1 = ACH:Color(L["Color 1"], nil, 16, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end, E.Classic)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.runicpower2 = ACH:Color(L["Color 2"], nil, 17, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.runicpowerB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end, E.Classic)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.description7 = ACH:Description(POWER_TYPE_LUNAR_POWER, 18, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.lunarpower1 = ACH:Color(L["Color 1"], nil, 19, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.lunarpower2 = ACH:Color(L["Color 2"], nil, 20, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.lunarpowerB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.description8 = ACH:Description(ALTERNATE_RESOURCE_TEXT, 21, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.altpower1 = ACH:Color(L["Color 1"], nil, 22, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.altpowerR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.altpowerG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.altpowerB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.altpowerR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.altpowerG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.altpowerB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.altpowerR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.altpowerG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.altpowerB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.altpower2 = ACH:Color(L["Color 2"], nil, 23, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.altpowerR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.altpowerG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.altpowerB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.altpowerR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.altpowerG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.altpowerB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.altpowerR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.altpowerG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.altpowerB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.description9 = ACH:Description(POWER_TYPE_MAELSTROM, 24, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.maelstrom1 = ACH:Color(L["Color 1"], nil, 25, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.maelstromR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.maelstromG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.maelstromB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.maelstromR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.maelstromG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.maelstromB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.maelstromR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.maelstromG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.maelstromB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end, not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.maelstrom2 = ACH:Color(L["Color 2"], nil, 26, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.maelstromR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.maelstromG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.maelstromB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.maelstromR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.maelstromG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.maelstromB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.maelstromR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.maelstromG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.maelstromB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end, not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.description10 = ACH:Description(INSANITY_POWER, 27, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.insanity1 = ACH:Color(L["Color 1"], nil, 28, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.insanityR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.insanityG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.insanityB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.insanityR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.insanityG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.insanityB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.insanityR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.insanityG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.insanityB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end, not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.insanity2 = ACH:Color(L["Color 2"], nil, 29, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.insanityR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.insanityG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.insanityB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.insanityR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.insanityG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.insanityB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.insanityR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.insanityG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.insanityB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end, not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.description11 = ACH:Description(POWER_TYPE_FURY, 30, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.fury1 = ACH:Color(L["Color 1"], nil, 31, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.furyR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.furyG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.furyB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.furyR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.furyG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.furyB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.furyR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.furyG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.furyB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end, not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.power.args.fury2 = ACH:Color(L["Color 2"], nil, 32, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.furyR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.furyG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.furyB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.furyR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.furyG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.furyB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.furyR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.furyG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.furyB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablepowercustom end, not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.backdrop = ACH:Group(L["Backdrops"], nil, 6, "tab")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.backdrop.args.description1 = ACH:Description(L["Health Backdrop"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.backdrop.args.classcolors = ACH:Toggle(L["Use Class Colors"], nil, 2, nil, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.classcolorbackdrop end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.classcolorbackdrop = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablebackdrop end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.backdrop.args.backdrop1 = ACH:Color(L["Color 1"], nil, 3, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.backdropR1 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.backdropG1 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.backdropB1 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.backdropR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.backdropG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.backdropB1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.backdropR1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.backdropG1, E.db.ElvUI_EltreumUI.unitframes.gradientmode.backdropB1 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablebackdrop or E.db.ElvUI_EltreumUI.unitframes.gradientmode.classcolorbackdrop end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.backdrop.args.backdrop2 = ACH:Color(L["Color 2"], nil, 4, false, nil, function() local dr = P.ElvUI_EltreumUI.unitframes.gradientmode.backdropR2 local dg = P.ElvUI_EltreumUI.unitframes.gradientmode.backdropG2 local db = P.ElvUI_EltreumUI.unitframes.gradientmode.backdropB2 return E.db.ElvUI_EltreumUI.unitframes.gradientmode.backdropR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.backdropG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.backdropB2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.backdropR2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.backdropG2, E.db.ElvUI_EltreumUI.unitframes.gradientmode.backdropB2 = r, g, b ElvUI_EltreumUI:GradientColorTableUpdate() end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor or not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enablebackdrop or E.db.ElvUI_EltreumUI.unitframes.gradientmode.classcolorbackdrop end)
	--ElvUI_EltreumUI.Options.args.gradient.args.colors.args.backdrop.args.description2 = ACH:Description(" ", 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.backdrop.args.usedeadbackdrop = ACH:Toggle(L["Use Dead Backdrop"], nil, 6, nil, false,'full', function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.usedeadbackdrop end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.usedeadbackdrop = value ElvUI_EltreumUI:GradientColorTableUpdate() end)
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.backdrop.args.description3 = ACH:Description(" ", 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.colors.args.backdrop.args.powerbgfade = ACH:Range(L["Gradient Backdrop Fade"], L["Change how much the Gradient Backdrop will Fade"], 8, { min = 0, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.bgfade end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.bgfade = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.UFmodifications end)
	ElvUI_EltreumUI.Options.args.gradient.args.tooltip = ACH:Group(L["Tooltip"], nil, 5, "tab")
	ElvUI_EltreumUI.Options.args.gradient.args.tooltip.args.tooltipenable = ACH:Toggle(L["Enable Gradient Tooltips"], nil, 1, nil, false,'full', function() return E.db.ElvUI_EltreumUI.skins.gradienttooltip end, function(_, value) E.db.ElvUI_EltreumUI.skins.gradienttooltip = value ElvUI_EltreumUI:GradientColorTableUpdate() end)
	ElvUI_EltreumUI.Options.args.gradient.args.tooltip.args.description1 = ACH:Description(L["Gradient Item Color Offsets"], 2, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.tooltip.args.offset1 = ACH:Range(L["Left Offset"], nil, 3, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.skins.gradienttooltipoffset1 end, function(_, value) E.db.ElvUI_EltreumUI.skins.gradienttooltipoffset1 = value end, function() return not E.db.ElvUI_EltreumUI.skins.gradienttooltip end)
	ElvUI_EltreumUI.Options.args.gradient.args.tooltip.args.offset2 = ACH:Range(L["Right Offset"], nil, 4, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.skins.gradienttooltipoffset2 end, function(_, value) E.db.ElvUI_EltreumUI.skins.gradienttooltipoffset2 = value end, function() return not E.db.ElvUI_EltreumUI.skins.gradienttooltip end)
	ElvUI_EltreumUI.Options.args.gradient.args.databars = ACH:Group(L["DataBars"], nil, 5, "tab")
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.experience = ACH:Group(L["Experience"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.experience.args.description1 = ACH:Description(L["Add a gradient color to the Experience Bar"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.experience.args.enable = ACH:Toggle(L["Enable"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientXP end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientXP = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.experience.args.direction = ACH:Select(L["Bar Direction"], nil, 3, {
		["HORIZONTAL"] = L["Horizontal"],
		["VERTICAL"] = L["Vertical"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientXPdirection end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientXPdirection = value end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientXP end)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.experience.args.color = ACH:Color(L["Color"], L["This is the second color on the Experience Bar, the first can be found in ElvUI Databars section"], 4, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientXPcolors.r, E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientXPcolors.g, E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientXPcolors.b, 1, P.ElvUI_EltreumUI.unitframes.gradientmode.gradientXPcolors.r, P.ElvUI_EltreumUI.unitframes.gradientmode.gradientXPcolors.g, P.ElvUI_EltreumUI.unitframes.gradientmode.gradientXPcolors.b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientXPcolors.r, E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientXPcolors.g, E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientXPcolors.b = r, g, b E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientXP end)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.reputation = ACH:Group(L["Reputation"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.reputation.args.description1 = ACH:Description(L["Add a gradient color to the Reputation Bar"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.reputation.args.enable = ACH:Toggle(L["Enable"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientReputation end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientReputation = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.reputation.args.red = ACH:Range(L["Red"], L["This is how much the color will gain or lose this value"], 3, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientReputationcolors.r end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientReputationcolors.r = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientReputation end)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.reputation.args.green = ACH:Range(L["Green"], L["This is how much the color will gain or lose this value"], 3, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientReputationcolors.g end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientReputationcolors.g = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientReputation end)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.reputation.args.blue = ACH:Range(L["Blue"], L["This is how much the color will gain or lose this value"], 3, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientReputationcolors.b end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientReputationcolors.b = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientReputation end)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.honor = ACH:Group(L["Honor"], nil, 2, "tab", nil, nil, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.honor.args.description1 = ACH:Description(L["Add a gradient color to the Honor Bar"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.honor.args.enable = ACH:Toggle(L["Enable"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientHonor end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientHonor = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.honor.args.red = ACH:Range(L["Red"], L["This is how much the color will gain or lose this value"], 3, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientHonorcolors.r end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientHonorcolors.r = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientHonor end)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.honor.args.green = ACH:Range(L["Green"], L["This is how much the color will gain or lose this value"], 3, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientHonorcolors.g end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientHonorcolors.g = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientHonor end)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.honor.args.blue = ACH:Range(L["Blue"], L["This is how much the color will gain or lose this value"], 3, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientHonorcolors.b end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientHonorcolors.b = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientHonor end)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.altpower = ACH:Group(L["Alternative Power"], nil, 2, "tab", nil, nil, nil, E.Classic)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.altpower.args.description1 = ACH:Description(L["Add a gradient color to the Alt Power Bar"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.altpower.args.enable = ACH:Toggle(L["Enable"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientAltPower end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientAltPower = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.altpower.args.red = ACH:Range(L["Red"], L["This is how much the color will gain or lose this value"], 3, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientAltPowercolors.r end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientAltPowercolors.r = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientAltPower end)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.altpower.args.green = ACH:Range(L["Green"], L["This is how much the color will gain or lose this value"], 3, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientAltPowercolors.g end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientAltPowercolors.g= value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientAltPower end)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.altpower.args.blue = ACH:Range(L["Blue"], L["This is how much the color will gain or lose this value"], 3, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientAltPowercolors.b end, function(_, value) E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientAltPowercolors.b = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.gradientAltPower end)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.archeology = ACH:Group(L["Archeology"], nil, 2, "tab", nil, nil, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.archeology.args.description1 = ACH:Description(L["Gradient Archeology Digsite Bar"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.archeology.args.color1 = ACH:Color(L["Color 1"], nil, 4, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.archeology.r1, E.db.ElvUI_EltreumUI.otherstuff.archeology.g1, E.db.ElvUI_EltreumUI.otherstuff.archeology.b1, 1, P.ElvUI_EltreumUI.otherstuff.archeology.r1, P.ElvUI_EltreumUI.otherstuff.archeology.g1, P.ElvUI_EltreumUI.otherstuff.archeology.b1, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.otherstuff.archeology.r1, E.db.ElvUI_EltreumUI.otherstuff.archeology.g1, E.db.ElvUI_EltreumUI.otherstuff.archeology.b1 = r, g, b E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)
	ElvUI_EltreumUI.Options.args.gradient.args.databars.args.archeology.args.color2 = ACH:Color(L["Color 2"], nil, 5, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.archeology.r2, E.db.ElvUI_EltreumUI.otherstuff.archeology.g2, E.db.ElvUI_EltreumUI.otherstuff.archeology.b2, 1, P.ElvUI_EltreumUI.otherstuff.archeology.r2, P.ElvUI_EltreumUI.otherstuff.archeology.g2, P.ElvUI_EltreumUI.otherstuff.archeology.b2, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.otherstuff.archeology.r2, E.db.ElvUI_EltreumUI.otherstuff.archeology.g2, E.db.ElvUI_EltreumUI.otherstuff.archeology.b2 = r, g, b E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.unitframes.gradientmode.enable end)

	--nameplates
	ElvUI_EltreumUI.Options.args.nameplates = ACH:Group(E:TextGradient(L["Nameplates"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Enhance ElvUI Nameplates with options for gradient, size, textures, models, behavior and more"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.nameplates.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\nameplate'
	ElvUI_EltreumUI.Options.args.nameplates.args.general = ACH:Group(L["General"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc = ACH:Group(L["Misc"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.description1 = ACH:Description(L["Smart Classbar"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.classbarautohide = ACH:Toggle(L["Enable Smart Classbar"], L["Automatically hide the Classbar if the Target is Friendly, show if it is an enemy"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.classbarautohide end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.classbarautohide = value end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.description2 = ACH:Description(L["Hide Cooldown Swipe"], 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.hidecdswipenp = ACH:Toggle(L["Hide Cooldown Swipe on Buffs and Debuffs"], L["Toggle On and Off"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.hideSwipe end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.hideSwipe = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.description3 = ACH:Description(L["Hide Debuffs on Non Target"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.hidenontargetdebuffs = ACH:Toggle(L["Hide Debuffs on Non Targeted Nameplates, show when Targeted"], L["Toggle On and Off"], 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.hidedebuffsnontarget end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.hidedebuffsnontarget = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.description4 = ACH:Description(L["Hide Auras"], 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.hideaurasnoncombat = ACH:Toggle(L["Hide Auras on Nameplates that are not in Combat"], L["Toggle On and Off"], 8, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.hideaurasnoncombat end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.hideaurasnoncombat = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.description5 = ACH:Description(L["Enemy Nameplate Level"], 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.dynamiclevel = ACH:Toggle(L["Hide level on enemy nameplates when you are max level"], L["Toggle On and Off"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatelevel end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplatelevel = value end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.description6 = ACH:Description(L["Automatically Hide NPC Names"], 11, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.hidenpcname = ACH:Toggle(L["Hide NPC Names when they are too far away to have Nameplates"], L["Toggle On and Off"], 12, nil, false, "full", function() return E.db.ElvUI_EltreumUI.cvars.autohidenpcname end, function(_, value) E.db.ElvUI_EltreumUI.cvars.autohidenpcname = value end, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.description7 = ACH:Description(L["Rested Nameplates"], 13, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.restednp = ACH:Toggle(L["Decrease Nameplate Overlap when Resting"], L["Toggle On and Off"], 14, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.restedoverlap end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.restedoverlap = value end, not E.private.nameplates.enable)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.description8 = ACH:Description(L["Restore Hidden Names"], 15, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.restorenames = ACH:Execute(function() if E.Retail then return L["Restore Unit Names hidden by Hide NPC Names"] else return L["Restore Unit Names Hidden during install"] end end, function() if E.Retail then return L["Use this button to restore names should you have disabled the Hide NPC Names option"] else return L["Use this button to restore names"] end end, 16, function() ElvUI_EltreumUI:RestoreNameplateNames() end, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.description9 = ACH:Description(" ", 17, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.misc.args.nameplaterefreshdebufffilter = ACH:Execute(L["Manage Debuff Style Filter"], L["Add debuffs to the Style Filter to make Nameplates with expiring Debuffs show full alpha and scale"], 18, function() local C = unpack(E.Config) C:StyleFilterSetConfig("EltreumRefreshDebuff") E.Libs.AceConfigDialog:SelectGroup('ElvUI', 'nameplates', "stylefilters", "triggers", "debuffs") end, nil, false, "full", nil, nil, function() return not E.global["nameplates"]["filters"]["EltreumRefreshDebuff"] end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.classtexture = ACH:Group(L["Class Textures"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.classtexture.args.description1 = ACH:Description(L["Class Colored Nameplate Options"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.classtexture.args.classhover = ACH:Toggle(L["Hover"], L["Change the color of the hover to be class colored"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.ClassColorGlow end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.ClassColorGlow = value ElvUI_EltreumUI:SetStyleFilters() end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.classtexture.args.classborder = ACH:Toggle(L["Border"], L["Change the color of the border glow to be class bordered in nameplates"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.ClassBorderNameplate end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.ClassBorderNameplate = value ElvUI_EltreumUI:SetStyleFilters() end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.classtexture.args.classtexture = ACH:Toggle(L["Player Class Texture"], L["Change the texture of the nameplate to be a class gradient of the player's class"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.nameplatetexture end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.nameplatetexture = value ElvUI_EltreumUI:SetStyleFilters() end, function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetclasstexture end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.classtexture.args.targetclasstexture = ACH:Toggle(L["Target Class Texture"], L["Change the texture of the nameplate to be a class gradient of the target's class"], 5, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetclasstexture end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetclasstexture = value ElvUI_EltreumUI:SetStyleFilters() end, function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.nameplatetexture end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.classtexture.args.description2 = ACH:Description(L["Nameplate Texture Version"], 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.classtexture.args.textureselect = ACH:Select(" ", nil, 7, { ["V1"] = L["Version 1"], ["V2"] = L["Version 2"], ["V3"] = L["Version 3"], ["NONE"] = L["None"], }, false, nil, function() return E.db.ElvUI_EltreumUI.nameplates.nptextureversion end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nptextureversion = value end, function() return (not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.nameplatetexture and not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetclasstexture) end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.classtexture.args.textureselect.style = "radio"
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.height = ACH:Group(L["Health Height"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.height.args.description1 = ACH:Description(L["Custom Health Height"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.height.args.enableCustomHealthHeight = ACH:Toggle(L["Enable Custom Health Heights"], L["Changes Nameplate Health Height depending on conditions"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.enableHealthHeight end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.enableHealthHeight = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.height.args.enableCustomHealthHeightelvui = ACH:Toggle(L["Use ElvUI Health Heights"], L["Use ElvUI Nameplate Health Heights when targeted or in combat"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.useelvuinpheight end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.useelvuinpheight = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.enableHealthHeight end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.height.args.enableCustomHealthHeightnocombat = ACH:Range(L["Out of Combat/Not Targeted"], L["Choose the Health Height for Nameplates not in combat or not targeted"], 4, { min = 1, max = 40, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.outofcombatHeight end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.outofcombatHeight = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.enableHealthHeight end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.height.args.enableCustomHealthHeightincombat = ACH:Range(L["In Combat/Targeted"], L["Choose the Health Height for Nameplates that are in combat or targeted"], 5, { min = 1, max = 40, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.incombatHeight end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.incombatHeight = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.enableHealthHeight or E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.useelvuinpheight end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.height.args.disableCombatConditions = ACH:Toggle(L["Disable Combat Conditions"], L["Disables the in combat and out of combat conditions, keeping only the target/non-target function"], 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.disableCombatConditions end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.disableCombatConditions = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.enableHealthHeight end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.aura = ACH:Group(L["Aura Text"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.aura.args.description1 = ACH:Description(L["Adjust Aura Position"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.aura.args.npauraposenable = ACH:Toggle(L["Enable"], L["Adjust the position of the text on Buffs/Debuffs"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.auras.enable end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.auras.enable = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.aura.args.npaurahorizontaloffset = ACH:Range(L["X-Offset"], nil, 3, { min = 0, max = 20, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.auras.xOffset end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.auras.xOffset = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.auras.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.aura.args.npauraverticaloffset = ACH:Range(L["Y-Offset"], nil, 4, { min = 0, max = 20, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.auras.yOffset end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.auras.yOffset = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.auras.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.friendlynp = ACH:Group(L["Friendly Nameplates"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.friendlynp.args.description1 = ACH:Description(L["Control how Blizzard Friendly Nameplates behave"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.friendlynp.args.hidehealthinsideinstances = ACH:Toggle(L["Show Blizzard Friendly Nameplates but Hide Healthbar"], L["Show Blizzard Friendly Nameplates but Hide Healthbar"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.friendlynames end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.friendlynames = value E:StaticPopup_Show('CONFIG_RL') end, function() return (E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.disablefriendly or E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.hidefriendly) end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.friendlynp.args.nofriendlyinstances = ACH:Toggle(L["Hide Blizzard Friendly Nameplates inside Instances"], L["Hide Blizzard Friendly Nameplates inside Instances"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.disablefriendly end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.disablefriendly = value E:StaticPopup_Show('CONFIG_RL') end, function() return (E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.friendlynames or E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.hidefriendly) end)
	ElvUI_EltreumUI.Options.args.nameplates.args.general.args.friendlynp.args.dontshowfriendlyatall = ACH:Toggle(L["Hide Blizzard Friendly Nameplates everywhere"], L["Hide Blizzard Friendly Nameplates everywhere"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.hidefriendly end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.hidefriendly = value E:StaticPopup_Show('CONFIG_RL') end, function() return (E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.friendlynames or E.db.ElvUI_EltreumUI.nameplates.friendlynameplatetoggle.disablefriendly) end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar = ACH:Group(L["Nameplate Power Bar"], nil, 2)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.description1 = ACH:Description(L["Nameplate Power Bar"], 1, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.enablepowerbar = ACH:Toggle(L["Enable Nameplate Power Bar"], L["Enable an extra Power Bar on Nameplates for missing powers"], 2, nil, false, "full", function() return E.private.ElvUI_EltreumUI.nameplatepower.enable end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.enable = value E:StaticPopup_Show('PRIVATE_RL') end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.enableadjust = ACH:Toggle(L["Enable Auto-adjusting Buffs/Debuffs"], L["Enable Auto-adjusting the position of Buffs/Debuffs"], 3, nil, false, "full", function() return E.private.ElvUI_EltreumUI.nameplatepower.adjust end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.adjust = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.position = ACH:Group(L["Position"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.position.args.description1 = ACH:Description(L["Nameplate Powerbar Position"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.position.args.enableautoadjust = ACH:Toggle(L["Enable Auto-adjusting the Vertical Position of the Power Bar"], L["Power Bar will move automatically based on class/spec/druid form"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.autoadjustposition end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.autoadjustposition = value end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.position.args.powerbarYoffset = ACH:Range(L["Select the Y Offset for the Power Bar (Default 16)"], L["Set Y Offset"], 3, { min = -100, max = 100, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.posy end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.posy = value end, function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.autoadjustposition end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.size = ACH:Group(L["Size"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.size.args.description1 = ACH:Description(L["Nameplate Powerbar Size"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.size.args.powerbarsizeX = ACH:Range(L["Select the Horizontal Size of the Power Bar (Default 132)"], L["Set Horizontal Size"], 2, { min = 10, max = 300, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.sizex end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.sizex = value end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.size.args.powerbarsizeY = ACH:Range(L["Select the Vertical Size of the Power Bar (Default 6)"], L["Set Vertical Size"], 2, { min = 2, max = 20, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.sizey end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.sizey = value end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types = ACH:Group(L["Types"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.description1 = ACH:Description(L["Select the power types to be displayed:"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.mana = ACH:Toggle(MANA, nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.mana end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.mana = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.rage = ACH:Toggle(RAGE, nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.rage end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.rage = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.energy = ACH:Toggle(ENERGY, nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.energy end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.energy = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.astral = ACH:Toggle(POWER_TYPE_LUNAR_POWER, nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.astral end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.astral = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end, not E.Retail)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.runic = ACH:Toggle(RUNIC_POWER, nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.runic end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.runic = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end, E.Classic)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.insanity = ACH:Toggle(INSANITY_POWER, nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.insanity end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.insanity = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end, not E.Retail)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.maelstrom = ACH:Toggle(POWER_TYPE_MAELSTROM, nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.maelstrom end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.maelstrom = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end, not E.Retail)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.fury = ACH:Toggle(POWER_TYPE_FURY, nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.fury end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.fury = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end, not E.Retail)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.types.args.focus = ACH:Toggle(POWER_TYPE_FOCUS, nil, 2, nil, false, nil, function() return E.private.ElvUI_EltreumUI.nameplatepower.focus end, function(_, value) E.private.ElvUI_EltreumUI.nameplatepower.focus = value E:StaticPopup_Show('PRIVATE_RL') end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end, not E.Retail)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance = ACH:Group(L["Appearance"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance.args.description1 = ACH:Description(L["Nameplate Powerbar Appearance"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance.args.font = ACH:SharedMediaFont(L["Font"], L["Choose a font for the Nameplate Powerbar Text"], 2, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.font end, function(_,fontvalue) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.font = fontvalue end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance.args.fontsize = ACH:Range(L["Font Size"], L["Nameplate Powerbar Font Size"], 3, { min = 4, max = 64, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.fontsize end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.fontsize = tonumber(value) end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance.args.bgcolor = ACH:Color(L["Background Color"], nil, 4, true, "full", function() local customcolorpowerbar = E.db.ElvUI_EltreumUI.nameplates.nameplatepower local d = P.ElvUI_EltreumUI.nameplates.nameplatepower return customcolorpowerbar.r, customcolorpowerbar.g, customcolorpowerbar.b, customcolorpowerbar.a, d.r, d.g, d.b, d.a end, function(_, r, g, b, a) local customcolorpowerbar = E.db.ElvUI_EltreumUI.nameplates.nameplatepower customcolorpowerbar.r, customcolorpowerbar.g, customcolorpowerbar.b, customcolorpowerbar.a = r, g, b, a end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance.args.texture = ACH:SharedMediaStatusbar(L["Choose the Power Bar Texture"], L["Select a Texture"], 5, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.texture end, function(_,key) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.texture = key end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance.args.modeleffect = ACH:Toggle(L["Effect"], L["Add an Effect"], 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.modeleffect end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.modeleffect = value end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance.args.gradient = ACH:Toggle(L["Gradient"], L["Gradient Colors"], 7, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplatepower.gradient end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplatepower.gradient = value end, function() return not E.private.ElvUI_EltreumUI.nameplatepower.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.powerbar.args.appearance.args.gradientcolors = ACH:Execute(L["Colors"], L["Customize Colors"], 8, function() if not E.db.ElvUI_EltreumUI.unitframes.gradientmode.npenable then E.Libs.AceConfigDialog:SelectGroup('ElvUI', 'unitframe','allColorsGroup','classResourceGroup') else E.Libs.AceConfigDialog:SelectGroup('ElvUI', 'ElvUI_EltreumUI', "gradient", "power") end end, nil, false, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.model = ACH:Group(L["Target Model"], nil, 2)
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.description1 = ACH:Description(L["Target Model"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.enable = ACH:Toggle(L["Enable Target Model"], L["Shows the target's model on the target nameplate"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel = value end)
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.pause = ACH:Toggle(L["Pause"], nil, 3, nil, false, nil, function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.paused end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.paused = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel end)
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.description2 = ACH:Description(" ", 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.CamDistance = ACH:Range(L["Camera Distance Scale"], nil, 5, { min = 0.01, max = 10, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.CamDistanceScale end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.CamDistanceScale = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel end)
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.ViewTranslationx = ACH:Range(L["X-Offset"], nil, 6, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.ViewTranslationx end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.ViewTranslationx = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel end)
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.ViewTranslationy = ACH:Range(L["Y-Offset"], nil, 6, { min = -1, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.ViewTranslationy end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.ViewTranslationy = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel end)
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.Rotation = ACH:Range(L["Model Rotation"], nil, 7, { min = 0, max = 360, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.Rotation end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.Rotation = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel end)
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.alpha = ACH:Range(L["Model Alpha"], nil, 7, { min = 0, max = 1, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.modelalpha end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.modelalpha = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel end)
	ElvUI_EltreumUI.Options.args.nameplates.args.model.args.desaturation = ACH:Range(L["Desaturate"], nil, 7, { min = 0, max = 1, step = 0.1 }, "full", function() return E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.desaturation end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.desaturation = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.nameplateOptions.targetmodel end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification = ACH:Group(L["Classification"], nil, 2)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.description1 = ACH:Description(L["Custom Icons"], 1)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.enable = ACH:Toggle(L["Enable replacing Elite/Rare Icons"].." - |cffFF0000"..L["Requires ElvUI Nameplate Elite Icon"].."|r", L["Adds different Rare/Elite Icons"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.enable end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.classification.enable = value ElvUI_EltreumUI:NPClassificatioNIcon() end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.boss = ACH:Group(L["Boss"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.boss.args.description1 = ACH:Description(L["Boss"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.boss.args.color = ACH:Color(L["Boss Color"], nil, 2, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.bossR, E.db.ElvUI_EltreumUI.nameplates.classification.bossG, E.db.ElvUI_EltreumUI.nameplates.classification.bossB, 1, P.ElvUI_EltreumUI.nameplates.classification.bossR, P.ElvUI_EltreumUI.nameplates.classification.bossG, P.ElvUI_EltreumUI.nameplates.classification.bossB, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.nameplates.classification.bossR, E.db.ElvUI_EltreumUI.nameplates.classification.bossG, E.db.ElvUI_EltreumUI.nameplates.classification.bossB = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.nameplates.classification.enable) end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.boss.args.select = ACH:Select(L["Boss Icon"], nil, 3, {
		["TYPE1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star',':20:20'),
		["TYPE2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star2',':20:20'),
		["TYPE3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star3',':20:20'),
		["TYPE4"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star4',':20:20'),
		["TYPE5"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star5',':20:20'),
		["TYPE6"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star6',':20:20'),
		["TYPE7"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star7',':20:20'),
		["TYPE8"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\dragon',':20:20'),
		["TYPE9"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\dragon2',':20:20'),
		["TYPE10"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\treasure',':20:20'),
		["TYPE11"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull',':20:20'),
		["TYPE12"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull2',':20:20'),
		["TYPE13"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull3',':20:20'),
		["TYPE14"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull4',':20:20'),
		["TYPE15"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull5',':20:20'),
		["TYPE16"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull6',':20:20'),
		["TYPE17"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull7',':20:20'),
		["TYPE18"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull8',':20:20'),
		["TYPE19"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull9',':20:20'),
		["TYPE20"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\reaper',':20:20'),
		["TYPE21"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\reaper2',':20:20'),
		["TYPE22"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull10',':20:20'),
		["TYPE23"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull11',':20:20'),
		["TYPE24"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull12',':20:20'),
		["TYPE25"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull13',':20:20'),
		["CUSTOM"] = 'Custom',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.nameplates.classification.icontypeboss end, function(_,value) E.db.ElvUI_EltreumUI.nameplates.classification.icontypeboss = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.classification.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.boss.args.select.style = "radio"
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.elite = ACH:Group(L["Elite"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.elite.args.description1 = ACH:Description(L["Elite"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.elite.args.color = ACH:Color(L["Elite Color"], nil, 2, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.eliteR, E.db.ElvUI_EltreumUI.nameplates.classification.eliteG, E.db.ElvUI_EltreumUI.nameplates.classification.eliteB, 1, P.ElvUI_EltreumUI.nameplates.classification.eliteR, P.ElvUI_EltreumUI.nameplates.classification.eliteG, P.ElvUI_EltreumUI.nameplates.classification.eliteB, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.nameplates.classification.eliteR, E.db.ElvUI_EltreumUI.nameplates.classification.eliteG, E.db.ElvUI_EltreumUI.nameplates.classification.eliteB = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.nameplates.classification.enable) end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.elite.args.select = ACH:Select(L["Elite Icon"], nil, 3, {
		["TYPE1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star',':20:20'),
		["TYPE2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star2',':20:20'),
		["TYPE3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star3',':20:20'),
		["TYPE4"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star4',':20:20'),
		["TYPE5"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star5',':20:20'),
		["TYPE6"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star6',':20:20'),
		["TYPE7"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star7',':20:20'),
		["TYPE8"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\dragon',':20:20'),
		["TYPE9"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\dragon2',':20:20'),
		["TYPE10"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\treasure',':20:20'),
		["TYPE11"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull',':20:20'),
		["TYPE12"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull2',':20:20'),
		["TYPE13"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull3',':20:20'),
		["TYPE14"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull4',':20:20'),
		["TYPE15"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull5',':20:20'),
		["TYPE16"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull6',':20:20'),
		["TYPE17"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull7',':20:20'),
		["TYPE18"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull8',':20:20'),
		["TYPE19"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull9',':20:20'),
		["TYPE20"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\reaper',':20:20'),
		["TYPE21"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\reaper2',':20:20'),
		["TYPE22"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull10',':20:20'),
		["TYPE23"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull11',':20:20'),
		["TYPE24"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull12',':20:20'),
		["TYPE25"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull13',':20:20'),
		["CUSTOM"] = 'Custom',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.nameplates.classification.icontypeelite end, function(_,value) E.db.ElvUI_EltreumUI.nameplates.classification.icontypeelite = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.classification.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.elite.args.select.style = "radio"
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rare = ACH:Group(L["Rare"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rare.args.description1 = ACH:Description(L["Rare"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rare.args.color = ACH:Color(L["Rare Color"], nil, 2, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.rareR, E.db.ElvUI_EltreumUI.nameplates.classification.rareG, E.db.ElvUI_EltreumUI.nameplates.classification.rareB, 1, P.ElvUI_EltreumUI.nameplates.classification.rareR, P.ElvUI_EltreumUI.nameplates.classification.rareG, P.ElvUI_EltreumUI.nameplates.classification.rareB, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.nameplates.classification.rareR, E.db.ElvUI_EltreumUI.nameplates.classification.rareG, E.db.ElvUI_EltreumUI.nameplates.classification.rareB = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.nameplates.classification.enable) end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rare.args.select = ACH:Select(L["Rare Icon"], nil, 3, {
		["TYPE1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star',':20:20'),
		["TYPE2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star2',':20:20'),
		["TYPE3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star3',':20:20'),
		["TYPE4"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star4',':20:20'),
		["TYPE5"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star5',':20:20'),
		["TYPE6"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star6',':20:20'),
		["TYPE7"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star7',':20:20'),
		["TYPE8"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\dragon',':20:20'),
		["TYPE9"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\dragon2',':20:20'),
		["TYPE10"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\treasure',':20:20'),
		["TYPE11"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull',':20:20'),
		["TYPE12"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull2',':20:20'),
		["TYPE13"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull3',':20:20'),
		["TYPE14"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull4',':20:20'),
		["TYPE15"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull5',':20:20'),
		["TYPE16"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull6',':20:20'),
		["TYPE17"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull7',':20:20'),
		["TYPE18"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull8',':20:20'),
		["TYPE19"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull9',':20:20'),
		["TYPE20"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\reaper',':20:20'),
		["TYPE21"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\reaper2',':20:20'),
		["TYPE22"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull10',':20:20'),
		["TYPE23"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull11',':20:20'),
		["TYPE24"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull12',':20:20'),
		["TYPE25"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull13',':20:20'),
		["CUSTOM"] = 'Custom',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.nameplates.classification.icontyperare end, function(_,value) E.db.ElvUI_EltreumUI.nameplates.classification.icontyperare = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.classification.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rare.args.select.style = "radio"
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rareelite = ACH:Group(L["Rare Elite"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rareelite.args.description1 = ACH:Description(L["Rare Elite"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rareelite.args.color = ACH:Color(L["Rare Elite Color"], nil, 2, false, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.rareeliteR, E.db.ElvUI_EltreumUI.nameplates.classification.rareeliteG, E.db.ElvUI_EltreumUI.nameplates.classification.rareeliteB, 1, P.ElvUI_EltreumUI.nameplates.classification.rareeliteR, P.ElvUI_EltreumUI.nameplates.classification.rareeliteG, P.ElvUI_EltreumUI.nameplates.classification.rareeliteB, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.nameplates.classification.rareeliteR, E.db.ElvUI_EltreumUI.nameplates.classification.rareeliteG, E.db.ElvUI_EltreumUI.nameplates.classification.rareeliteB = r, g, b end, function() return (not E.db.ElvUI_EltreumUI.nameplates.classification.enable) end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rareelite.args.select = ACH:Select(L["Rare Elite Icon"], nil, 3, {
		["TYPE1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star',':20:20'),
		["TYPE2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star2',':20:20'),
		["TYPE3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star3',':20:20'),
		["TYPE4"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star4',':20:20'),
		["TYPE5"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star5',':20:20'),
		["TYPE6"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star6',':20:20'),
		["TYPE7"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\star7',':20:20'),
		["TYPE8"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\dragon',':20:20'),
		["TYPE9"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\dragon2',':20:20'),
		["TYPE10"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\treasure',':20:20'),
		["TYPE11"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull',':20:20'),
		["TYPE12"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull2',':20:20'),
		["TYPE13"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull3',':20:20'),
		["TYPE14"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull4',':20:20'),
		["TYPE15"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull5',':20:20'),
		["TYPE16"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull6',':20:20'),
		["TYPE17"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull7',':20:20'),
		["TYPE18"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull8',':20:20'),
		["TYPE19"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull9',':20:20'),
		["TYPE20"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\reaper',':20:20'),
		["TYPE21"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\reaper2',':20:20'),
		["TYPE22"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull10',':20:20'),
		["TYPE23"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull11',':20:20'),
		["TYPE24"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull12',':20:20'),
		["TYPE25"] = E:TextureString('Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\Nameplates\\skull13',':20:20'),
		["CUSTOM"] = 'Custom',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.nameplates.classification.icontyperareelite end, function(_,value) E.db.ElvUI_EltreumUI.nameplates.classification.icontyperareelite = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.classification.enable end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.rareelite.args.select.style = "radio"
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.custom = ACH:Group(L["CUSTOM"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.custom.args.description1 = ACH:Description(L["Custom Icons"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.custom.args.description2 = ACH:Description(L["Name of file inside Interface\\Addons"], 2, nil, nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.custom.args.bossicon = ACH:Input(L["Boss"], L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", 3, nil, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.customboss end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.classification.customboss = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.classification.enable or E.db.ElvUI_EltreumUI.nameplates.classification.icontypeboss ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.custom.args.eliteicon = ACH:Input(L["Elite"], L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", 3, nil, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.customelite end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.classification.customelite = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.classification.enable or E.db.ElvUI_EltreumUI.nameplates.classification.icontypeelite ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.custom.args.rareicon = ACH:Input(L["Rare"], L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", 3, nil, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.customrare end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.classification.customrare = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.classification.enable or E.db.ElvUI_EltreumUI.nameplates.classification.icontyperare ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.nameplates.args.classification.args.custom.args.rareeliteicon = ACH:Input(L["Rare Elite"], L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", 3, nil, "full", function() return E.db.ElvUI_EltreumUI.nameplates.classification.customrareelite end, function(_, value) E.db.ElvUI_EltreumUI.nameplates.classification.customrareelite = value end, function() return not E.db.ElvUI_EltreumUI.nameplates.classification.enable or E.db.ElvUI_EltreumUI.nameplates.classification.icontyperareelite ~= 'CUSTOM' end)

	--skins
	ElvUI_EltreumUI.Options.args.skins = ACH:Group(E:TextGradient(L["Skins"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Add several skins to World of Warcraft, such as Quests, Character Frame, Shadows, other Addons, Role Icons and more"], 85, 'tab')
	ElvUI_EltreumUI.Options.args.skins.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\paint'
	ElvUI_EltreumUI.Options.args.skins.args.general = ACH:Group(L["General"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons = ACH:Group(L["Role Icons"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.description1 = ACH:Description(L["Replace role icons with Eltruism role icons"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.enable = ACH:Toggle(L["Enable Eltruism Icons"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismroleicons end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismroleicons = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.select = ACH:Select(" ", nil, 3, {
		["ELTRUISM"] = "Eltruism "..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ELTRUISM\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ELTRUISM\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ELTRUISM\\Tank',':20:20'),
		["ATWOODELVUI"] = 'ElvUI '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODELVUI\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODELVUI\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODELVUI\\Tank',':20:20'),
		["ATWOODGLOW"] = 'Glow '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGLOW\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGLOW\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGLOW\\Tank',':20:20'),
		["ATWOODGRAVED"] = 'Atwood '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGRAVED\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGRAVED\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGRAVED\\Tank',':20:20'),
		["ATWOODGREY"] = 'Grey '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGREY\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGREY\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODGREY\\Tank',':20:20'),
		["ATWOODWHITE"] = 'White '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODWHITE\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODWHITE\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ATWOODWHITE\\Tank',':20:20'),
		["RELEAF"] = 'Releaf '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\RELEAF\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\RELEAF\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\RELEAF\\Tank',':20:20'),
		["IOS"] = 'iOS '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\IOS\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\IOS\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\IOS\\Tank',':20:20'),
		["MATERIAL"] = 'Material '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\MATERIAL\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\MATERIAL\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\MATERIAL\\Tank',':20:20'),
		["EMOJI"] = 'Emoji '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\EMOJI\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\EMOJI\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\EMOJI\\Tank',':20:20'),
		["ICONIC"] = 'Iconic '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ICONIC\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ICONIC\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\ICONIC\\Tank',':20:20'),
		["SIMPLE"] = 'Simple '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\SIMPLE\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\SIMPLE\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\SIMPLE\\Tank',':20:20'),
		["RPG"] = 'RPG '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\RPG\\DPS',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\RPG\\Healer',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Unitframes\\RPG\\Tank',':20:20'),
		["CUSTOM"] = 'Custom',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.roleiconstype end, function(_,value) E.db.ElvUI_EltreumUI.otherstuff.roleiconstype = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismroleicons end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.select.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.select.sorting = {
		"ELTRUISM",
		"ATWOODELVUI",
		"ATWOODGLOW",
		"ATWOODGRAVED",
		"ATWOODGREY",
		"ATWOODWHITE",
		"RELEAF",
		"IOS",
		"MATERIAL",
		"EMOJI",
		"ICONIC",
		"SIMPLE",
		"RPG",
		"CUSTOM"
	}
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.custom = ACH:Group(L["Name of file inside Interface\\Addons"],nil,4)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.custom.inline = true
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.custom.args.tank = ACH:Input(L["Tank"], L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", 1, nil, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismroleiconscustomtank end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismroleiconscustomtank = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismroleicons or E.db.ElvUI_EltreumUI.otherstuff.roleiconstype ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.custom.args.dps = ACH:Input(L["DPS"], L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", 1, nil, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismroleiconscustomdps end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismroleiconscustomdps = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismroleicons or E.db.ElvUI_EltreumUI.otherstuff.roleiconstype ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.custom.args.healer = ACH:Input(L["Healer"], L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", 1, nil, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismroleiconscustomhealer end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismroleiconscustomhealer = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismroleicons or E.db.ElvUI_EltreumUI.otherstuff.roleiconstype ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.roleicons.args.disabledps = ACH:Toggle(L["Disable DPS Icons"], nil, 5, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismroleiconsdisabledps end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismroleiconsdisabledps = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismroleicons end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard = ACH:Group(L["Blizzard"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description1 = ACH:Description(L["Make more texts use ElvUI font settings"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.zonetext = ACH:Toggle(L["Enable for Zones, Mail and others"], L["Such as the Zones, Mail and others"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.zones end, function(_, value) E.db.ElvUI_EltreumUI.skins.zones = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description2 = ACH:Description(" ", 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.bossbannerscale = ACH:Range(L["Boss Banner Frame Scale"], nil, 8, { min = 0.2, max = 3, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.skins.blizzframes.bossScale end, function(_, value) E.db.ElvUI_EltreumUI.skins.blizzframes.bossScale = tonumber(value) if _G.RaidBossEmoteFrame then _G.RaidBossEmoteFrame:SetScale(value) end end, function() return E.db.ElvUI_EltreumUI.skins.blizzframes.hideboss end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description3 = ACH:Description(L["Hide Blizzard Frames"], 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.hideerror = ACH:Toggle(L["Hide Error Frame"], L["Hide the Red Error Text"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.blizzframes.hideerrorframe end, function(_, value) E.db.ElvUI_EltreumUI.skins.blizzframes.hideerrorframe = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.hidezone = ACH:Toggle(L["Hide Zone Text"], L["Hide the text that appears when changing zones"], 11, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.blizzframes.hidezone end, function(_, value) E.db.ElvUI_EltreumUI.skins.blizzframes.hidezone = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.hidealert = ACH:Toggle(L["Hide Alert Frame"], L["Hide the Alert Frame that appears when looting a rare item or earning an achievement"], 12, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.blizzframes.hidealert end, function(_, value) E.db.ElvUI_EltreumUI.skins.blizzframes.hidealert = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.hideboss = ACH:Toggle(L["Hide Boss Banner Frame"], L["Hide the boss banner that appears when killing a raid boss or completing a Mythic+ dungeon"], 13, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.blizzframes.hideboss end, function(_, value) E.db.ElvUI_EltreumUI.skins.blizzframes.hideboss = value E:StaticPopup_Show('CONFIG_RL') end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.hideeventoaster = ACH:Toggle(L["Hide Event Toaster Frame"], L["Hide the toaster frame, such as when you level up"], 13, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.blizzframes.hideeventoaster end, function(_, value) E.db.ElvUI_EltreumUI.skins.blizzframes.hideeventoaster = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description4 = ACH:Description(L["Skin Level Up, Boss Loot and Instance Entrance frames to be class colored"], 14, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.skinlevelbossinstance = ACH:Toggle(L["Enable"], L["Enable the Skins"], 15, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.levelbossinstance end, function(_, value) E.db.ElvUI_EltreumUI.skins.levelbossinstance = value E:StaticPopup_Show('CONFIG_RL') end, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description5 = ACH:Description(L["Remove Blizzard's Boss Emote Frame"], 16, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Classic)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.bossemotehide = ACH:Toggle(L["Enable"], L["Enable removing the Alert Frame that can show up in the middle of the screen"], 17, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.bossemote end, function(_, value) E.db.ElvUI_EltreumUI.skins.bossemote = value E:StaticPopup_Show('CONFIG_RL') end, nil, E.Classic)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description6 = ACH:Description(L["Expand Transmog Window to better show your character"], 18, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not (E.Retail or E.Cata))
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.widetransmog = ACH:Toggle(L["Enable"], L["Enable the Wider Transmog Window"], 19, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.widertransmog end, function(_, value) E.db.ElvUI_EltreumUI.skins.widertransmog = value E:StaticPopup_Show('CONFIG_RL') end, nil, not (E.Retail or E.Cata))
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description7 = ACH:Description(L["Skin Profession Frame"], 20, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.professionskin = ACH:Toggle(L["Skin the Profession/Tradeskill Frame"], nil, 21, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.professions end, function(_, value) E.db.ElvUI_EltreumUI.skins.professions = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.professionscale = ACH:Range(L["Scale"], nil, 22, { min = 0.2, max = 1.3, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.skins.professionscale end, function(_, value) E.db.ElvUI_EltreumUI.skins.professionscale = value if _G.ProfessionsFrame then _G.ProfessionsFrame:SetScale(value) end end, function() return not E.db.ElvUI_EltreumUI.skins.professions end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description8 = ACH:Description(L["Expand the Talents to show the entire tree"], 23, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail or E.Cata)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.classictalentenable = ACH:Toggle(L["Expanded Talents"], L["Expand Talents to cover the full tree"], 24, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.tbctalents end, function(_, value) E.db.ElvUI_EltreumUI.skins.tbctalents = value E:StaticPopup_Show('CONFIG_RL') end, nil, E.Retail or E.Cata)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.classictalentscale = ACH:Range(L["Scale"], nil, 25, { min = 0.1, max = 2, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.skins.expandedtalentscale end, function(_, value) E.db.ElvUI_EltreumUI.skins.expandedtalentscale = value _G.PlayerTalentFrame:SetScale(value) end, function() return not E.db.ElvUI_EltreumUI.skins.tbctalents end, E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description9 = ACH:Description(L["TALENTS"], 26, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.retailtalentscale = ACH:Range(L["Scale"], nil, 27, { min = 0.1, max = 1.3, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.skins.expandedtalentscale end, function(_, value) E.db.ElvUI_EltreumUI.skins.expandedtalentscale = value if _G.PlayerSpellsFrame then _G.PlayerSpellsFrame:SetScale(value) end end, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description10 = ACH:Description(L["Bags"], 28, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.bagscale = ACH:Range(L["Scale"], nil, 29, { min = 0.1, max = 4, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.bagscale end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.bagscale = value if _G["ElvUI_ContainerFrame"] then _G["ElvUI_ContainerFrame"]:SetScale(value) end end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description11 = ACH:Description(L["Bank"], 30, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.bankscale = ACH:Range(L["Scale"], nil, 31, { min = 0.1, max = 4, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.bankscale end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.bankscale = value if _G["ElvUI_BankContainerFrame"] then _G["ElvUI_BankContainerFrame"]:SetScale(value) end end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description12 = ACH:Description(LOOT, 32, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.lootscale = ACH:Range(L["Scale"], nil, 33, { min = 0.1, max = 4, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.lootscale end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.lootscale = value if _G["ElvLootFrame"] then _G["ElvLootFrame"]:SetScale(value) end end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.description13 = ACH:Description(EXHAUSTION_LABEL.. ", "..BREATH_LABEL, 34, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.mirrorscale = ACH:Range(L["Scale"], nil, 35, { min = 0.1, max = 4, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.mirrorscale end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.mirrorscale = value end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.mirrorx = ACH:Range(L["Width"], nil, 36, { min = 20, max = 600, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.mirrorx end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.mirrorx = value end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.blizzard.args.mirrory = ACH:Range(L["Height"], nil, 36, { min = 10, max = 200, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.mirrory end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.mirrory = value end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc = ACH:Group(L["Misc"], nil, 3, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.description1 = ACH:Description(L["Add a Level Up toast"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.levelup = ACH:Toggle(L["Enable"], L["Enable a toast showing up when you level up"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.levelbossinstance end, function(_, value) E.db.ElvUI_EltreumUI.skins.levelbossinstance = value E:StaticPopup_Show('CONFIG_RL') end, nil, E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.description2 = ACH:Description(L["Expand Hunter Stables to show all pets and improve search"], 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Cata)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.expandedstable = ACH:Toggle(L["Enable"], L["Enable the Expanded Stable"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.expandedstable end, function(_, value) E.db.ElvUI_EltreumUI.skins.expandedstable = value E:StaticPopup_Show('CONFIG_RL') end, nil, not E.Cata)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.description3 = ACH:Description(L["Hide Actionbar Button Press"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.hidekeypress = ACH:Toggle(L["Enable"], nil, 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.hideABkeypress end, function(_, value) E.db.ElvUI_EltreumUI.skins.hideABkeypress = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.description4 = ACH:Description(L["Color Modifier Keys"], 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.colormodkeys = ACH:Toggle(L["Enable"], L["Add Class Color to Modifier Keys like ALT and CTRL on the ActionBars"], 8, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.colormodkey end, function(_, value) E.db.ElvUI_EltreumUI.skins.colormodkey = value end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.description5 = ACH:Description(L["Class Colored Cooldowns"], 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.misc.args.cdclasscolor = ACH:Toggle(L["Enable"], L["Sets Cooldowns to be Class Colored"], 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.classcolorcooldowns end, function(_, value) E.db.ElvUI_EltreumUI.skins.classcolorcooldowns = value ElvUI_EltreumUI:CooldownColors() end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.leadericons = ACH:Group(L["Leader Icons"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.leadericons.args.description1 = ACH:Description(L["Replace Leader icons with Eltruism leader icons"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.leadericons.args.enable = ACH:Toggle(L["Enable Eltruism Icons"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismleadericons end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismleadericons = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.leadericons.args.select = ACH:Select(" ", nil, 3, {
		["1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Leader\\Leader1',':20:20'),
		["2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Leader\\Leader2',':20:20'),
		["3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Leader\\Leader3',':20:20'),
		["4"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Leader\\Leader4',':20:20'),
		["5"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Leader\\Leader5',':20:20'),
		["CUSTOM"] = 'Custom',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.leadericonstype end, function(_,value) E.db.ElvUI_EltreumUI.otherstuff.leadericonstype = tostring(value) E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismleadericons end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.leadericons.args.select.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.general.args.leadericons.args.custom = ACH:Group(L["Name of file inside Interface\\Addons"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.leadericons.args.custom.inline = true
	ElvUI_EltreumUI.Options.args.skins.args.general.args.leadericons.args.custom.args.input = ACH:Input(L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", nil, 1, nil, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismleadericonscustom end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismleadericonscustom = tostring(value) E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismleadericons or E.db.ElvUI_EltreumUI.otherstuff.leadericonstype ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.assisticons = ACH:Group(L["Assist Icons"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.assisticons.args.description1 = ACH:Description(L["Replace Raid Assist icons with Eltruism Raid Assist icons"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.assisticons.args.enable = ACH:Toggle(L["Enable Eltruism Icons"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismassisticons end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismassisticons = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.assisticons.args.select = ACH:Select(" ", nil, 3, {
		["1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Assist\\Assist1',':20:20'),
		["2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Assist\\Assist2',':20:20'),
		["3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Assist\\Assist3',':20:20'),
		["4"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Assist\\Assist4',':20:20'),
		["5"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Assist\\Assist5',':20:20'),
		["CUSTOM"] = 'Custom',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.assisticonstype end, function(_,value) E.db.ElvUI_EltreumUI.otherstuff.assisticonstype = tostring(value) E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismassisticons end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.assisticons.args.select.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.general.args.assisticons.args.custom = ACH:Group(L["Name of file inside Interface\\Addons"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.assisticons.args.custom.inline = true
	ElvUI_EltreumUI.Options.args.skins.args.general.args.assisticons.args.custom.args.input = ACH:Input(L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", nil, 1, nil, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismassisticonscustom end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismassisticonscustom = tostring(value) E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismassisticons or E.db.ElvUI_EltreumUI.otherstuff.assisticonstype ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.lootericons = ACH:Group(L["Master Looter Icons"], nil, 4, "tab", nil, nil, nil, E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.lootericons.args.description1 = ACH:Description(L["Replace Master Looter icons with Eltruism Master Looter icons"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.lootericons.args.enable = ACH:Toggle(L["Enable Eltruism Icons"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismlootericons end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismlootericons = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.lootericons.args.select = ACH:Select(" ", nil, 3, {
		["1"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\MasterLooter\\Looter1',':20:20'),
		["2"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\MasterLooter\\Looter2',':20:20'),
		["3"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\MasterLooter\\Looter3',':20:20'),
		["4"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\MasterLooter\\Looter4',':20:20'),
		["5"] = E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\MasterLooter\\Looter5',':20:20'),
		["CUSTOM"] = 'Custom',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.otherstuff.lootericonstype end, function(_,value) E.db.ElvUI_EltreumUI.otherstuff.lootericonstype = tostring(value) E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismlootericons end)
	ElvUI_EltreumUI.Options.args.skins.args.general.args.lootericons.args.select.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.general.args.lootericons.args.custom = ACH:Group(L["Name of file inside Interface\\Addons"], nil, 4, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.general.args.lootericons.args.custom.inline = true
	ElvUI_EltreumUI.Options.args.skins.args.general.args.lootericons.args.custom.args.input = ACH:Input(L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", nil, 1, nil, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.eltruismlootericonscustom end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.eltruismlootericonscustom = tostring(value) E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.otherstuff.eltruismlootericons or E.db.ElvUI_EltreumUI.otherstuff.lootericonstype ~= 'CUSTOM' end)
	ElvUI_EltreumUI.Options.args.skins.args.character = ACH:Group(L["Character"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel = ACH:Group(L["Panel"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.icons = ACH:Group(L["Class Icons"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.icons.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.icons.args.enable = ACH:Toggle(L["Add Class Icons to Character Panel"], L["Enable this option"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.classiconsoncharacterpanel end, function(_, value) E.db.ElvUI_EltreumUI.skins.classiconsoncharacterpanel = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.icons.args.styles = ACH:Select(L["Style"], nil, 5, {
		["RELEAF"] = "Releaf "..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightReleaf',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterReleaf',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanReleaf',':20:20'),
		["BLIZZARD"] = 'Blizzard '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnight',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\Hunter',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\Shaman',':20:20'),
		["BORDER"] = 'Border '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightIconReleaf',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterIconReleaf',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanIconReleaf',':20:20'),
		["SHADOW"] = 'Shadow '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightShadow',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterShadow',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanShadow',':20:20'),
		["OUTLINE"] = 'Outline '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnight1',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\Hunter1',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\Shaman1',':20:20'),
		["ORIGINAL"] = 'Original '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightOriginal',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterOriginal',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanOriginal',':20:20'),
		["GRADIENT"] = 'Gradient '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightGradient',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterGradient',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanGradient',':20:20'),
		["BW"] = 'Grey '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightBW',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterBW',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanBW',':20:20'),
		["UGG"] = 'U.GG '..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightUGG',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterUGG',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanUGG',':20:20'),
		["UGGGREY"] = 'U.GG Grey'..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\DeathKnightUGGBW',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\HunterUGGBW',':20:20')..E:TextureString('Interface\\Addons\\ElvUI_EltreumUI\\Media\\Textures\\Classes\\32\\ShamanUGGBW',':20:20'),
	}, false, nil, function() return E.db.ElvUI_EltreumUI.skins.classiconsstyle end, function(_, value) E.db.ElvUI_EltreumUI.skins.classiconsstyle = value end, function() return not E.db.ElvUI_EltreumUI.skins.classiconsoncharacterpanel end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.icons.args.styles.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets = ACH:Group(L["Sockets/Enchants/Ilvl"], nil, 1, "tab", nil, nil, nil, not E.Classic)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.description1 = ACH:Description(L["Sockets and Enchants"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.enable = ACH:Toggle(L["Add Sockets and Enchants to the Character Panel"], L["Enable this option"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.sockets end, function(_, value) E.db.ElvUI_EltreumUI.skins.sockets = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.enableinspect = ACH:Toggle(L["Add Sockets and Enchants to the Inspect Frame"], L["Enable this option"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.socketsinspect end, function(_, value) E.db.ElvUI_EltreumUI.skins.socketsinspect = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.sockets end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.description2 = ACH:Description(L["Item Levels"], 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.enableilvl = ACH:Toggle(L["Add Item Levels to the Character Panel"], L["Enable this option"], 5, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.ilvls end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvls = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.enableinspectilvl = ACH:Toggle(L["Add Item Levels to the Inspect Panel"], L["Enable this option"], 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.ilvlsinspect end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvlsinspect = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ilvls end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.description3 = ACH:Description(" ", 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.ilvlanchor = ACH:Select(L["Ilvl Anchor Point"], L["Choose where the Ilvl will be attach to on the items"], 8, {
		["CENTER"] = "Center",
		["LEFT"] = 'Left',
		["RIGHT"] = 'Right',
		["TOP"] = 'Top',
		["TOPLEFT"] = 'Top Left',
		["TOPRIGHT"] = 'Top Right',
		["BOTTOM"] = 'Bottom',
		["BOTTOMLEFT"] = 'Bottom Left',
		["BOTTOMRIGHT"] = 'Bottom Right',
	}, false, nil, function() return E.db.ElvUI_EltreumUI.skins.ilvlanchor end, function(_,value) E.db.ElvUI_EltreumUI.skins.ilvlanchor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ilvls end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.ilvlanchor.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.ilvlfontx = ACH:Range(L["Ilvl Font X Offset"], nil, 9, { min = -100, max = 100, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.skins.ilvlanchorx end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvlanchorx = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ilvls end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.ilvlfonty = ACH:Range(L["Ilvl Font Y Offset"], nil, 9, { min = -100, max = 100, step = 1 }, nil, function() return E.db.ElvUI_EltreumUI.skins.ilvlanchory end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvlanchory = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ilvls end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.description4 = ACH:Description(" ", 10, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.ilvlfontoutline = ACH:Select(L["Ilvl Font Outline"], L["Choose the Ilvl font outline"], 11, { ["OUTLINE"] = "Outline", ["THICKOUTLINE"] = 'Thick Outline', ["MONOCHROME"] = 'Monochrome', }, false, "full", function() return E.db.ElvUI_EltreumUI.skins.ilvlfontweight end, function(_,value) E.db.ElvUI_EltreumUI.skins.ilvlfontweight = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ilvls end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.description5 = ACH:Description(" ", 12, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.sockets.args.ilvlfontsize = ACH:Range(L["Ilvl Font Size"], L["Change the Ilvl font size"], 13, { min = 4, max = 72, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.ilvlfontsize end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvlfontsize = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ilvls end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory = ACH:Group(L["Armory"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.description1 = ACH:Description(L["Character Panel"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.expandart = ACH:Toggle(L["Expand Character Art"], L["Enable this option"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.expandarmorybg end, function(_, value) E.db.ElvUI_EltreumUI.skins.expandarmorybg = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.classicarmory = ACH:Toggle(L["Expand Character Panel"], L["Enable this option"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.classicarmory end, function(_, value) E.db.ElvUI_EltreumUI.skins.classicarmory = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.classicarmoryeltruismstats = ACH:Toggle(L["Add Other Stats"], L["Display stats such as Speed and Mana Regen"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.classicarmoryeltruismstats end, function(_, value) E.db.ElvUI_EltreumUI.skins.classicarmoryeltruismstats = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.classicarmory end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.adjustitemlevelpoint = ACH:Toggle(L["Adjust Position of Item Level Text"], nil, 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.ilvltextchangepoint end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvltextchangepoint = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.classicarmory end, not E.Cata)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.addcrest = ACH:Toggle(L["Add Crest to Character Panel"], L["Enable this option"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.expandarmorycrest end, function(_, value) E.db.ElvUI_EltreumUI.skins.expandarmorycrest = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.addcrestversion = ACH:Select("", nil, 4, {
		[1] = L["Version 1"],
		[2] = L["Version 2"],
	}, false, nil, function() return E.db.ElvUI_EltreumUI.skins.armorycrestversion end, function(_, value) E.db.ElvUI_EltreumUI.skins.armorycrestversion = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.expandarmorycrest end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.addcrestversion.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.bgalpha = ACH:Range(L["Art Alpha"], L["Change the transparency of the Art"], 5, { min = 0.01, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.skins.expandarmorybgalpha end, function(_, value) E.db.ElvUI_EltreumUI.skins.expandarmorybgalpha = value if _G["EltruismCharacterBG"] then _G["EltruismCharacterBG"]:SetAlpha(value) end end, function() return not E.db.ElvUI_EltreumUI.skins.expandarmorybg end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.armorybgtextureselect = ACH:Select(L["Background Texture Type"], L["Choose between a Class, Race or Custom Background"], 6, {
		["CLASS"] = CLASS,
		["RACE"] = RACE,
		["RAGNAROS"] = L["Ragnaros"],
		["SPACECLOUD"] = L["SpaceCloud"],
		["RAVNYR"] = L["Ravnyr"],
		["BLACK"] = L["Black"],
		["CUSTOM"] = CUSTOM,
	}, false, nil, function() return E.db.ElvUI_EltreumUI.skins.armorybgtype end, function(_, value) E.db.ElvUI_EltreumUI.skins.armorybgtype = value ElvUI_EltreumUI:ExpandedCharacterStats() end, function() return not E.db.ElvUI_EltreumUI.skins.expandarmorybg end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.armorybgtextureselect.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.armorybgtextureselect.sorting = { "CLASS", "RACE", "RAGNAROS", "SPACECLOUD", "RAVNYR", "BLACK", "CUSTOM" }
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.armorybgtextureinput = ACH:Input(L["Name of file inside Interface\\Addons"], L["Example: "].."mytexture.tga or mytexture or mytexture.jpg", 7, nil, "full", function() return E.private.ElvUI_EltreumUI.skins.armorybgtexture end, function(_, value) E.private.ElvUI_EltreumUI.skins.armorybgtexture = value ElvUI_EltreumUI:ExpandedCharacterStats() end, function() return E.db.ElvUI_EltreumUI.skins.armorybgtype ~= "CUSTOM" end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.armoryvignette = ACH:Toggle(L["Add a Vignette over the Character Art"], L["Enable this option"], 8, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.armoryvignette end, function(_, value) E.db.ElvUI_EltreumUI.skins.armoryvignette = value ElvUI_EltreumUI:ExpandedCharacterStats() end, function() return not E.db.ElvUI_EltreumUI.skins.expandarmorybg end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.armoryvignettealpha = ACH:Range(L["Vignette Alpha"], L["Change the transparency of the Vignette"], 9, { min = 0.01, max = 1, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.skins.armoryvignettealpha end, function(_, value) E.db.ElvUI_EltreumUI.skins.armoryvignettealpha = value _G["EltruismCharacterBGVignette"]:SetAlpha(value) end, function() return not E.db.ElvUI_EltreumUI.skins.expandarmorybg or not E.db.ElvUI_EltreumUI.skins.armoryvignette end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.description2 = ACH:Description(" ", 10, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.bagilvl = ACH:Toggle(L["Enable Comparing Equipped and Bag Ilvl"], nil, 11, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferenceenable end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferenceenable = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.classicarmory end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.bagilvlenablecustomcolor = ACH:Toggle(L["Enable Custom Colors"], nil, 12, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferencecustom end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferencecustom = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferenceenable or not E.db.ElvUI_EltreumUI.skins.classicarmory end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.bagilvlcustomcolorbad = ACH:Color(L["Bad Color"], nil, 13, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.badR local dg = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.badG local db = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.badB return E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.badR, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.badG, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.badB, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.badR, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.badG, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.badB = r, g, b end, function() return not E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferencecustom or not E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferenceenable or not E.db.ElvUI_EltreumUI.skins.classicarmory end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.bagilvlcustomcolormedium = ACH:Color(L["Medium Color"], nil, 14, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumR local dg = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumG local db = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumB return E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumR, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumG, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumB, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumR, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumG, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.mediumB = r, g, b end, function() return not E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferencecustom or not E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferenceenable or not E.db.ElvUI_EltreumUI.skins.classicarmory end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.bagilvlcustomcolorgood = ACH:Color(L["Good Color"], nil, 15, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodR local dg = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodG local db = P.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodB return E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodR, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodG, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodB, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodR, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodG, E.db.ElvUI_EltreumUI.skins.ilvltextcolordifference.goodB = r, g, b end, function() return not E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferencecustom or not E.db.ElvUI_EltreumUI.skins.ilvltextcolordifferenceenable or not E.db.ElvUI_EltreumUI.skins.classicarmory end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.description3 = ACH:Description(" ", 16, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.scale = ACH:Range(L["Character Panel Scale"], L["Change the size of the Character Panel"], 17, { min = 0.2, max = 2, step = 0.01 }, "full", function() return E.db.ElvUI_EltreumUI.skins.characterpanelscale end, function(_, value) E.db.ElvUI_EltreumUI.skins.characterpanelscale = value _G["CharacterFrame"]:SetScale(value) if _G["CharacterModelFrame"] then _G["CharacterModelFrame"]:SetIgnoreParentScale(false) else _G["CharacterModelScene"]:SetIgnoreParentScale(false) end end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.armory.args.characterpanelnamefontsize = ACH:Range(L["Character Name Font Size"], nil, 18, { min = 8, max = 40, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.armorynamefontsize end, function(_, value) E.db.ElvUI_EltreumUI.skins.armorynamefontsize = value ElvUI_EltreumUI:ExpandedCharacterStats() PaperDollFrame_SetLevel() end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.model = ACH:Group(L["Model"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.model.args.description1 = ACH:Description(L["Character Model"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.model.args.modelcamzoom = ACH:Range(L["Character Model Zoom"], nil, 2, { min = -2, max = 2, step = 0.01 }, "full", function() if E.Retail or E.Cata then return E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomretail else return E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomclassic end end, function(_, value) if E.Retail or E.Cata then E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomretail = value else E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomclassic = value end
		if E.Retail or E.Cata then
			if _G.CharacterModelScene then
				local actor = _G.CharacterModelScene:GetPlayerActor()
				if actor then
					actor:SetPosition(0, 0, 0)
					actor:SetPosition(E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomretail, E.db.ElvUI_EltreumUI.skins.charactermodelcam.xretail, E.db.ElvUI_EltreumUI.skins.charactermodelcam.yretail)
				end
			end
		else
			if _G.CharacterModelFrame then
				_G.CharacterModelFrame:SetPosition(E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomclassic, E.db.ElvUI_EltreumUI.skins.charactermodelcam.xclassic, E.db.ElvUI_EltreumUI.skins.charactermodelcam.yclassic)
			end
		end
	end, function() return not E.db.ElvUI_EltreumUI.skins.expandarmorybg end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.model.args.modelcamx = ACH:Range(L["Character Model X Offset"], nil, 3, { min = -2, max = 2, step = 0.01 }, "full", function()
		if E.Retail or E.Cata then
			return E.db.ElvUI_EltreumUI.skins.charactermodelcam.xretail
		else
			return E.db.ElvUI_EltreumUI.skins.charactermodelcam.xclassic
		end
	end, function(_, value)
		if E.Retail or E.Cata then
			E.db.ElvUI_EltreumUI.skins.charactermodelcam.xretail = value
		else
			E.db.ElvUI_EltreumUI.skins.charactermodelcam.xclassic = value
		end

		if E.Retail or E.Cata then
			if _G.CharacterModelScene then
				local actor = _G.CharacterModelScene:GetPlayerActor()
				if actor then
					actor:SetPosition(0, 0, 0)
					actor:SetPosition(E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomretail, E.db.ElvUI_EltreumUI.skins.charactermodelcam.xretail, E.db.ElvUI_EltreumUI.skins.charactermodelcam.yretail)
				end
			end
		else
			if _G.CharacterModelFrame then
				_G.CharacterModelFrame:SetPosition(E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomclassic, E.db.ElvUI_EltreumUI.skins.charactermodelcam.xclassic, E.db.ElvUI_EltreumUI.skins.charactermodelcam.yclassic)
			end
		end
	end, function() return not E.db.ElvUI_EltreumUI.skins.expandarmorybg end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.model.args.modelcamy = ACH:Range(L["Character Model Y Offset"], nil, 3, { min = -2, max = 2, step = 0.01 }, "full", function()
		if E.Retail or E.Cata then
			return E.db.ElvUI_EltreumUI.skins.charactermodelcam.yretail
		else
			return E.db.ElvUI_EltreumUI.skins.charactermodelcam.yclassic
		end
	end, function(_, value)
		if E.Retail or E.Cata then
			E.db.ElvUI_EltreumUI.skins.charactermodelcam.yretail = value
		else
			E.db.ElvUI_EltreumUI.skins.charactermodelcam.yclassic = value
		end

		if E.Retail or E.Cata then
			if _G.CharacterModelScene then
				local actor = _G.CharacterModelScene:GetPlayerActor()
				if actor then
					actor:SetPosition(0, 0, 0)
					actor:SetPosition(E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomretail, E.db.ElvUI_EltreumUI.skins.charactermodelcam.xretail, E.db.ElvUI_EltreumUI.skins.charactermodelcam.yretail)
				end
			end
		else
			if _G.CharacterModelFrame then
				_G.CharacterModelFrame:SetPosition(E.db.ElvUI_EltreumUI.skins.charactermodelcam.zoomclassic, E.db.ElvUI_EltreumUI.skins.charactermodelcam.xclassic, E.db.ElvUI_EltreumUI.skins.charactermodelcam.yclassic)
			end
		end
	end, function() return not E.db.ElvUI_EltreumUI.skins.expandarmorybg end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.itemquality = ACH:Group(L["Item Quality"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.itemquality.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.itemquality.args.enabletexture = ACH:Toggle(L["Add Item Quality Texture"], L["Enable this option"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.itemquality end, function(_, value) E.db.ElvUI_EltreumUI.skins.itemquality = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.itemquality.args.colorsetsdifferently = ACH:Toggle(L["Add Item Set Colors"], L["Enable this option"], 3, nil, false, "double", function() return E.db.ElvUI_EltreumUI.skins.itemsetenable end, function(_, value) E.db.ElvUI_EltreumUI.skins.itemsetenable = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.itemquality end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.itemquality.args.itemsetcustomcolorenable = ACH:Toggle(L["Enable Custom Set Colors"], nil, 4, nil, false, "double", function() return E.db.ElvUI_EltreumUI.skins.itemsetcustomcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.itemsetcustomcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.itemsetenable or not E.db.ElvUI_EltreumUI.skins.itemquality end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.itemquality.args.itemsetcustomcolor = ACH:Color(L["Color"], nil, 5, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.itemsetcolor.r local dg = P.ElvUI_EltreumUI.skins.itemsetcolor.g local db = P.ElvUI_EltreumUI.skins.itemsetcolor.b return E.db.ElvUI_EltreumUI.skins.itemsetcolor.r, E.db.ElvUI_EltreumUI.skins.itemsetcolor.g, E.db.ElvUI_EltreumUI.skins.itemsetcolor.b, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.itemsetcolor.r, E.db.ElvUI_EltreumUI.skins.itemsetcolor.g, E.db.ElvUI_EltreumUI.skins.itemsetcolor.b = r, g, b end, function() return not E.db.ElvUI_EltreumUI.skins.itemsetenable or not E.db.ElvUI_EltreumUI.skins.itemquality or not E.db.ElvUI_EltreumUI.skins.itemsetcustomcolor end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.stats = ACH:Group(L["Stats"], nil, 1, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.stats.args.description1 = ACH:Description(" ", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Classic)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.stats.args.autoarmorystats = ACH:Toggle(L["Automatically swap the Character Stats to your main ones"], L["Enable this option"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.classicarmoryautostats end, function(_, value) E.db.ElvUI_EltreumUI.skins.classicarmoryautostats = value E:StaticPopup_Show('CONFIG_RL') end, nil, not E.Classic)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.stats.args.description2 = ACH:Description(" ", 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.stats.args.statcolors = ACH:Toggle(function() if E.Retail then return L["Add Class Gradient Colors to Stats"] else return L["Add Class Colors to Text"] end end, L["Enable this option"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.statcolors end, function(_, value) E.db.ElvUI_EltreumUI.skins.statcolors = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.stats.args.othergradientcolors = ACH:Toggle(function() if E.Retail then return L["Add Class Gradient Colors to Other Texts"] else return L["Add Class Gradient Colors to Text"] end end, L["Enable this option"], 5, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.characterskingradients end, function(_, value) E.db.ElvUI_EltreumUI.skins.characterskingradients = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.stats.args.description3 = ACH:Description(" ", 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.character.args.panel.args.stats.args.characterpanelfontsize = ACH:Range(L["Stats Font Size"], nil, 7, { min = 8, max = 40, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.armoryfontsize end, function(_, value) E.db.ElvUI_EltreumUI.skins.armoryfontsize = value ElvUI_EltreumUI:ExpandedCharacterStats() PaperDollFrame_UpdateStats() end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows = ACH:Group(L["Shadows"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.description1 = ACH:Description(L["Add Shadows to Frames"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.enable = ACH:Toggle(L["Enable General Shadows"], L["Add Shadows to frames like Player, target, Chats and others"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.enable end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.enable = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.actionbars = ACH:Toggle(L["ActionBars"], L["Add Shadows to Actionbars"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.actionbars end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.actionbars = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.minimap = ACH:Toggle(MINIMAP_LABEL, L["Add Shadows to the Minimap"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.minimap end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.minimap = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.chat = ACH:Toggle(CHAT_LABEL, L["Add Shadows to the Chat Frames"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.chat end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.chat = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.blizzelvui = ACH:Toggle(L["Blizzard/ElvUI"], L["Add Shadows to general Blizzard/ElvUI frames"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.blizzard end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.blizzard = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.tooltip = ACH:Toggle(L["Tooltip"], L["Add Shadows to Tooltips"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.tooltip end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.tooltip = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.datatexts = ACH:Toggle(L["DataTexts"], nil, 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.datatexts end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.datatexts = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.unitframes = ACH:Toggle(L["UnitFrames"], L["Add Shadows to the Unitframes"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.unitframes end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.unitframes = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.raid = ACH:Toggle(L["Raid"], L["Add Shadows to Raid Frames"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.raid end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.raid = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.description2 = ACH:Description(L["Other Shadows (can become CPU/Memory Intensive)"], 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.nphealth = ACH:Toggle(L["Nameplate Health"], L["Add Shadows to Nameplate Healthbars"], 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.nameplates end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.nameplates = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.npaura = ACH:Toggle(L["Nameplate Aura"], L["Add Shadows to Nameplate Auras"], 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.npauras end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.npauras = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.npportrait = ACH:Toggle(L["Nameplate Portrait"], L["Add Shadows to Nameplate Portraits"], 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.npportraits end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.npportraits = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.nppower = ACH:Toggle(L["Nameplate Power"], L["Add Shadows to Nameplate Powers"], 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.nppower end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.nppower = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.npcastbar = ACH:Toggle(L["Nameplate Castbar"], L["Add Shadows to Nameplate Castbars"], 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.npcastbar end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.npcastbar = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.ufaura = ACH:Toggle(L["Unitframe Aura"], L["Add Shadows to Unitframe Auras"], 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.ufaura end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.ufaura = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.aura = ACH:Toggle(L["Aura"], L["Add Aura Shadows (Aura list next to the minimap)"], 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.aura end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.aura = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.description3 = ACH:Description(L["Shadow Size"], 6, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.size = ACH:Range("", nil, 7, { min = 1, max = 10, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.length end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.length = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.description4 = ACH:Description(L["Custom Color"], 8, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.classcolors = ACH:Toggle(L["Use Class Colors"], nil, 9, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.classcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.classcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.skins.shadow.customcolor or not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.customcolorenable = ACH:Toggle(L["Enable Custom Colors"], nil, 10, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.customcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.customcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return E.db.ElvUI_EltreumUI.skins.shadow.classcolor or not E.db.ElvUI_EltreumUI.skins.shadow.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.shadows.args.customcolor = ACH:Color(L["Custom Color"], nil, 11, true, nil, function() return E.db.ElvUI_EltreumUI.skins.shadow.r, E.db.ElvUI_EltreumUI.skins.shadow.g, E.db.ElvUI_EltreumUI.skins.shadow.b, E.db.ElvUI_EltreumUI.skins.shadow.a, P.ElvUI_EltreumUI.skins.shadow.r, P.ElvUI_EltreumUI.skins.shadow.g, P.ElvUI_EltreumUI.skins.shadow.b, P.ElvUI_EltreumUI.skins.shadow.a end, function(_, r, g, b, a) E.db.ElvUI_EltreumUI.skins.shadow.r, E.db.ElvUI_EltreumUI.skins.shadow.g, E.db.ElvUI_EltreumUI.skins.shadow.b, E.db.ElvUI_EltreumUI.skins.shadow.a = r, g, b, a E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.shadow.enable or not E.db.ElvUI_EltreumUI.skins.shadow.customcolor end)
	ElvUI_EltreumUI.Options.args.skins.args.quests = ACH:Group(L["Quests"], nil, 2, "tab")
	--ElvUI_EltreumUI.Options.args.skins.args.quests.args.objectiveframe = ACH:Group(L["Objective Frame"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.description3 = ACH:Description(L["Skin Objective Frame"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.enable = ACH:Toggle(L["Enable Skin"], L["Skin the Objective/Quest Frame"], 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.quests end, function(_, value) E.db.ElvUI_EltreumUI.skins.quests = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.enableshadow = ACH:Toggle(L["Enable Shadows"], nil, 7, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.questsettings.lineshadow end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.lineshadow = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.description4 = ACH:Description(" ", 8, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.progresstexture = ACH:SharedMediaStatusbar(L["Choose the Progress Bar Texture"], L["Select a Texture"], 9, "full", function() return E.db.ElvUI_EltreumUI.skins.queststatusbartexture end, function(_,key) E.db.ElvUI_EltreumUI.skins.queststatusbartexture = key E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.description5 = ACH:Description(L["Line"], 10, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.linetexture = ACH:SharedMediaStatusbar(L["Line Texture"], L["Select a Texture"], 11, "full", function() return E.db.ElvUI_EltreumUI.skins.questsettings.texture end, function(_,key) E.db.ElvUI_EltreumUI.skins.questsettings.texture = key E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.linex = ACH:Range(L["Line Width"], nil, 12, { min = 1, max = 400, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.questsettings.sizex end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.sizex = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.liney = ACH:Range(L["Line Height"], nil, 12, { min = 1, max = 80, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.questsettings.sizey end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.sizey = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.buttonsize = ACH:Range(L["Button Size"], nil, 13, { min = 4, max = 40, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.questsettings.linebuttonsize end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.linebuttonsize = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end, E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.linecustomcolorenable = ACH:Toggle(L["Enable Custom Colors"], nil, 14, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.linecustomcolor1 = ACH:Color(L["Custom Color"].."1", nil, 15, false, nil, function() return E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1r, E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1g, E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1b, 1, P.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1r, P.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1g, P.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1r, E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1g, E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor1b = r, g, b E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor or not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.linecustomcolor2 = ACH:Color(L["Custom Color"].."2", nil, 16, false, nil, function() return E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2r, E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2g, E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2b, 1, P.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2r, P.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2g, P.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2b, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2r, E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2g, E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor2b = r, g, b E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.questsettings.linecustomcolor or not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.description6 = ACH:Description(L["Text"], 17, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.customcolorenable = ACH:Toggle(L["Enable Custom Colors"], nil, 18, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.questsettings.customcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.customcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.customcolor = ACH:Color(L["Custom Color"], nil, 19, false, nil, function() return E.db.ElvUI_EltreumUI.skins.questsettings.customr, E.db.ElvUI_EltreumUI.skins.questsettings.customg, E.db.ElvUI_EltreumUI.skins.questsettings.customb, 1, P.ElvUI_EltreumUI.skins.questsettings.customr, P.ElvUI_EltreumUI.skins.questsettings.customg, P.ElvUI_EltreumUI.skins.questsettings.customb, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.questsettings.customr, E.db.ElvUI_EltreumUI.skins.questsettings.customg, E.db.ElvUI_EltreumUI.skins.questsettings.customb = r, g, b E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.questsettings.customcolor or not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.hideDash = ACH:Toggle(L["Hide Dash"], nil, 20, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.questsettings.hideDash end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.hideDash = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.hideCheck = ACH:Toggle(L["Hide Completion Checkmark"], nil, 20, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.questsettings.hideCheck end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.hideCheck = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.headerfontsize = ACH:Range(L["Header Font Size"], nil, 21, { min = 6, max = 80, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.questsettings.fontSizeHeader end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings. fontSizeHeader = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.fontsize = ACH:Range(L["Font Size"], nil, 21, { min = 6, max = 80, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.questsettings.fontSize end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.fontSize = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.description7 = ACH:Description(_G.LFG_LIST_TITLE, 30, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.customcolorenabletitle = ACH:Toggle(L["Enable Custom Colors"], nil, 31, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.questsettings.customcolortitle end, function(_, value) E.db.ElvUI_EltreumUI.skins.questsettings.customcolortitle = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.quests.args.customcolortitle = ACH:Color(L["Custom Color"], nil, 32, false, nil, function() return E.db.ElvUI_EltreumUI.skins.questsettings.customrtitle, E.db.ElvUI_EltreumUI.skins.questsettings.customgtitle, E.db.ElvUI_EltreumUI.skins.questsettings.custombtitle, 1, P.ElvUI_EltreumUI.skins.questsettings.customrtitle, P.ElvUI_EltreumUI.skins.questsettings.customgtitle, P.ElvUI_EltreumUI.skins.questsettings.custombtitle, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.questsettings.customrtitle, E.db.ElvUI_EltreumUI.skins.questsettings.customgtitle, E.db.ElvUI_EltreumUI.skins.questsettings.custombtitle = r, g, b E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.questsettings.customcolortitle or not E.db.ElvUI_EltreumUI.skins.quests end)
	ElvUI_EltreumUI.Options.args.skins.args.addons = ACH:Group(L["Addons"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs = ACH:Group("BigWigs", nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.description1 = ACH:Description("BigWigs", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.enable = ACH:Toggle(L["Skin BigWigs"], L["Add Gradient to BigWigs Bars"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.bigwigs end, function(_, value) E.db.ElvUI_EltreumUI.skins.bigwigs = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.shadows = ACH:Toggle(L["Shadows"], L["Add Shadows to BigWigs Bars"], 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.shadow.bigwigs end, function(_, value) E.db.ElvUI_EltreumUI.skins.shadow.bigwigs = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.bigwigs end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.enablecustomcolor = ACH:Toggle(L["Custom Color"], L["Enable Custom Colors"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.bigwigscustomcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.bigwigscustomcolor = value end, function() return not E.db.ElvUI_EltreumUI.skins.bigwigs end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.description2 = ACH:Description(L["Normal"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.normal1 = ACH:Color(L["Color 1"], nil, 6, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.bigwigscustomnormalr1 local dg = P.ElvUI_EltreumUI.skins.bigwigscustomnormalg1 local db = P.ElvUI_EltreumUI.skins.bigwigscustomnormalb1 return E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalr1, E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalg1, E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalb1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalr1, E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalg1, E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalb1 = r, g, b end, function() return not E.db.ElvUI_EltreumUI.skins.bigwigscustomcolor or not E.db.ElvUI_EltreumUI.skins.bigwigs end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.normal2 = ACH:Color(L["Color 2"], nil, 7, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.bigwigscustomnormalr2 local dg = P.ElvUI_EltreumUI.skins.bigwigscustomnormalg2 local db = P.ElvUI_EltreumUI.skins.bigwigscustomnormalb2 return E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalr2, E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalg2, E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalb2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalr2, E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalg2, E.db.ElvUI_EltreumUI.skins.bigwigscustomnormalb2 = r, g, b end, function() return not E.db.ElvUI_EltreumUI.skins.bigwigscustomcolor or not E.db.ElvUI_EltreumUI.skins.bigwigs end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.description3 = ACH:Description(L["Emphasize"], 8, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.emphasize1 = ACH:Color(L["Color 1"], nil, 9, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.bigwigscustomemphasizedr1 local dg = P.ElvUI_EltreumUI.skins.bigwigscustomemphasizedg1 local db = P.ElvUI_EltreumUI.skins.bigwigscustomemphasizedb1 return E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedr1, E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedg1, E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedb1, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedr1, E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedg1, E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedb1 = r, g, b end, function() return not E.db.ElvUI_EltreumUI.skins.bigwigscustomcolor or not E.db.ElvUI_EltreumUI.skins.bigwigs end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.BigWigs.args.emphasize2 = ACH:Color(L["Color 2"], nil, 10, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.bigwigscustomemphasizedr2 local dg = P.ElvUI_EltreumUI.skins.bigwigscustomemphasizedg2 local db = P.ElvUI_EltreumUI.skins.bigwigscustomemphasizedb2 return E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedr2, E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedg2, E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedb2, 1, dr, dg, db, 1 end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedr2, E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedg2, E.db.ElvUI_EltreumUI.skins.bigwigscustomemphasizedb2 = r, g, b end, function() return not E.db.ElvUI_EltreumUI.skins.bigwigscustomcolor or not E.db.ElvUI_EltreumUI.skins.bigwigs end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details = ACH:Group("Details", nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.description1 = ACH:Description("Details", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.enable = ACH:Toggle(L["Skin Details"], L["Add gradient to Details Bars"], 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.details end, function(_, value) E.db.ElvUI_EltreumUI.skins.details = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.gradientmode = ACH:Select(L["Gradient Mode"], nil, 3, {
		["DARK"] = L["Dark Mode"],
		["LIGHT"] = L["Light Mode"],
	}, false, "full", function() return E.db.ElvUI_EltreumUI.skins.detailsmode end, function(_, value) E.db.ElvUI_EltreumUI.skins.detailsmode = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.details end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.gradientmode.style = "radio"
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.gradientname = ACH:Toggle(L["Gradient Name"], L["Add Gradient to Names"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.detailsgradientname end, function(_, value) E.db.ElvUI_EltreumUI.skins.detailsgradientname = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.details end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.gradientnamefontshadow = ACH:Toggle(L["Font Shadow"], nil, 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.detailsgradientnameshadow end, function(_, value) E.db.ElvUI_EltreumUI.skins.detailsgradientnameshadow = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.details end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.texture = ACH:Toggle(L["Replace Texture"], L["Replace Details Bar Texture"], 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.detailstextureoverwrite end, function(_, value) E.db.ElvUI_EltreumUI.skins.detailstextureoverwrite = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.details end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.embed = ACH:Toggle(L["Embed"], L["Simple Right Chat Embed"], 5, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.detailsembed end, function(_, value) E.db.ElvUI_EltreumUI.skins.detailsembed = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.hide = ACH:Toggle(L["Hide Out of Combat"], nil, 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.detailsembedooc end, function(_, value) E.db.ElvUI_EltreumUI.skins.detailsembedooc = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.detailsembed end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.Details.args.skin = ACH:Range(L["Out of Combat Delay"], nil, 7, { min = 1, max = 30, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.skins.detailsdelay end, function(_, value) E.db.ElvUI_EltreumUI.skins.detailsdelay = value end, function() return not E.db.ElvUI_EltreumUI.skins.detailsembed or not E.db.ElvUI_EltreumUI.skins.detailsembedooc end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons = ACH:Group(L["Other AddOns"], nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description1 = ACH:Description("BagSync", 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.bagsync = ACH:Toggle(L["Skin BagSync"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.bagsync end, function(_, value) E.db.ElvUI_EltreumUI.skins.bagsync = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("BagSync") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description2 = ACH:Description("BugSack", 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.bugsack = ACH:Toggle(L["Skin BugSack"], nil, 4, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.bugsack end, function(_, value) E.db.ElvUI_EltreumUI.skins.bugsack = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("BugSack") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description3 = ACH:Description("Clique", 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.clique = ACH:Toggle(L["Skin Clique"], nil, 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.clique end, function(_, value) E.db.ElvUI_EltreumUI.skins.clique = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("Clique") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description4 = ACH:Description("Hekili", 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.hekili = ACH:Toggle(L["Skin Hekili"], nil, 8, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.hekili end, function(_, value) E.db.ElvUI_EltreumUI.skins.hekili = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("Hekili") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description5 = ACH:Description("Immersion", 9, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.immersion = ACH:Toggle(L["Skin Immersion"], nil, 10, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.immersion end, function(_, value) E.db.ElvUI_EltreumUI.skins.immersion = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("Immersion") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description6 = ACH:Description("MeetingHorn", 11, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.meetinghorn = ACH:Toggle(L["Skin MeetingHorn"], nil, 12, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.meetinghorn end, function(_, value) E.db.ElvUI_EltreumUI.skins.meetinghorn = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("MeetingHorn") end, E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description7 = ACH:Description("OmniCD", 13, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Classic)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.omnicd = ACH:Toggle(L["Skin OmniCD"], nil, 14, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.omnicd end, function(_, value) E.db.ElvUI_EltreumUI.skins.omnicd = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("OmniCD") end, E.Classic)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description8 = ACH:Description("PallyPower", 15, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Classic)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.pallypower = ACH:Toggle(L["Skin PallyPower"], nil, 16, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.pallypower end, function(_, value) E.db.ElvUI_EltreumUI.skins.pallypower = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("PallyPower") end, not E.Classic)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description9 = ACH:Description("RareScanner", 17, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.rarescanner = ACH:Toggle(L["Skin RareScanner"], nil, 18, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.rarescanner end, function(_, value) E.db.ElvUI_EltreumUI.skins.rarescanner = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("RareScanner") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description10 = ACH:Description("SimulationCraft", 19, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.simc = ACH:Toggle(L["Skin SimulationCraft"], nil, 20, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.simulationcraft end, function(_, value) E.db.ElvUI_EltreumUI.skins.simulationcraft = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("SimulationCraft") end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description11 = ACH:Description("WarpDeplete", 21, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.WarpDeplete = ACH:Toggle(L["Skin WarpDeplete"], nil, 22, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.warpdeplete end, function(_, value) E.db.ElvUI_EltreumUI.skins.warpdeplete = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("WarpDeplete") end, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description12 = ACH:Description("Cell", 23, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.cell = ACH:Toggle(L["Skin Cell"], nil, 24, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.cell end, function(_, value) E.db.ElvUI_EltreumUI.skins.cell = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("Cell") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.cellhealthloss = ACH:Toggle(L["Gradient Health Loss"], nil, 25, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.cellhealthloss end, function(_, value) E.db.ElvUI_EltreumUI.skins.cellhealthloss = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("Cell") or not E.db.ElvUI_EltreumUI.skins.cell end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description13 = ACH:Description("Deadly Boss Mods", 26, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.dbm = ACH:Toggle(L["Skin DBM"], nil, 27, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.dbm end, function(_, value) E.db.ElvUI_EltreumUI.skins.dbm = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("DBM-Core") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description14 = ACH:Description("Auctionator", 28, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.auctionator = ACH:Toggle(L["Skin Auctionator"], nil, 29, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.auctionator end, function(_, value) E.db.ElvUI_EltreumUI.skins.auctionator = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("Auctionator") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.description15 = ACH:Description("WeakAuras Options", 30, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.otheraddons.args.weakaurasoptions = ACH:Toggle(L["Skin"].." WeakAuras Options", nil, 31, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.weakaurasoptions end, function(_, value) E.db.ElvUI_EltreumUI.skins.weakaurasoptions = value E:StaticPopup_Show('CONFIG_RL') end, function() return not IsAddOnLoaded("WeakAuras") end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui = ACH:Group("ElvUI", nil, 2, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.description1 = ACH:Description(L["Skin ElvUI"], 1, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.enable = ACH:Toggle(L["Add a texture to ElvUI Backgrounds"], nil, 2, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.elvui.SetTemplate end, function(_, value) E.db.ElvUI_EltreumUI.skins.elvui.SetTemplate = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.enableuf = ACH:Toggle(L["Enable on Unitframes"], nil, 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.elvui.unitframes end, function(_, value) E.db.ElvUI_EltreumUI.skins.elvui.unitframes = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.elvui.SetTemplate end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.enablenp = ACH:Toggle(L["Enable on Nameplate"], nil, 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.elvui.nameplates end, function(_, value) E.db.ElvUI_EltreumUI.skins.elvui.nameplates = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.elvui.SetTemplate end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.enablebuttons = ACH:Toggle(L["Enable on Buttons"], nil, 3, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.elvui.button end, function(_, value) E.db.ElvUI_EltreumUI.skins.elvui.button = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.elvui.SetTemplate end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.description2 = ACH:Description(L["Colors"], 4, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.classcolors = ACH:Toggle(L["Use Class Colors"], nil, 5, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.elvui.color.classcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.elvui.color.classcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.elvui.SetTemplate end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.color = ACH:Color(L["Custom Color"], nil, 6, true, nil, function() local dr = P.ElvUI_EltreumUI.skins.elvui.color.r local dg = P.ElvUI_EltreumUI.skins.elvui.color.g local db = P.ElvUI_EltreumUI.skins.elvui.color.b local da = P.ElvUI_EltreumUI.skins.elvui.color.a return E.db.ElvUI_EltreumUI.skins.elvui.color.r, E.db.ElvUI_EltreumUI.skins.elvui.color.g, E.db.ElvUI_EltreumUI.skins.elvui.color.b, E.db.ElvUI_EltreumUI.skins.elvui.color.a, dr, dg, db, da end, function(_, r, g, b, a) E.db.ElvUI_EltreumUI.skins.elvui.color.r, E.db.ElvUI_EltreumUI.skins.elvui.color.g, E.db.ElvUI_EltreumUI.skins.elvui.color.b, E.db.ElvUI_EltreumUI.skins.elvui.color.a = r, g, b, a E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.elvui.SetTemplate or E.db.ElvUI_EltreumUI.skins.elvui.color.classcolor end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.description3 = ACH:Description(L["Texture"], 7, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.texture = ACH:SharedMediaBackground(" ", L["Select a Texture"], 8, "full", function() return E.db.ElvUI_EltreumUI.skins.elvui.texture end, function(_,key) E.db.ElvUI_EltreumUI.skins.elvui.texture = key E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.elvui.SetTemplate end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3 = ACH:Group("", nil, 40, "tab")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.inline = true
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.description0 = ACH:Description("Ace3", 41, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.enable = ACH:Toggle(L["Enable Ace3 Skin"], nil, 42, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.ace3.enable end, function(_, value) E.db.ElvUI_EltreumUI.skins.ace3.enable = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.Texture = ACH:SharedMediaStatusbar(L["Button Hover Texture"], L["Select a Texture"], 44, nil, function() return E.db.ElvUI_EltreumUI.skins.ace3.texture end, function(_,key) E.db.ElvUI_EltreumUI.skins.ace3.texture = key end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.fadeTime = ACH:Range(L["Fade Out Time"], nil, 43, { min = 0, max = 2, step = 0.01 }, nil, function() return E.db.ElvUI_EltreumUI.skins.ace3.fadetime end, function(_, value) E.db.ElvUI_EltreumUI.skins.ace3.fadetime = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.description1 = ACH:Description(L["Button Hover"], 49, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.ButtonHovercolorClassColors = ACH:Toggle(L["Use Class Colors"], nil, 50, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.classcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.classcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.ButtonHovercolor = ACH:Color(L["Custom Color"], nil, 51, true, nil, function() local dr = P.ElvUI_EltreumUI.skins.ace3.button.hovercolor.r local dg = P.ElvUI_EltreumUI.skins.ace3.button.hovercolor.g local db = P.ElvUI_EltreumUI.skins.ace3.button.hovercolor.b local da = P.ElvUI_EltreumUI.skins.ace3.button.hovercolor.a return E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.r, E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.g, E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.b, E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.a, dr, dg, db, da end, function(_, r, g, b, a) E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.r, E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.g, E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.b, E.db.ElvUI_EltreumUI.skins.ace3.button.hovercolor.a = r, g, b, a E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.description2 = ACH:Description(L["Button Disabled"], 59, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.ButtonDisabledcolorClassColors = ACH:Toggle(L["Use Class Colors"], nil, 60, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.classcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.classcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.ButtonDisabledcolor = ACH:Color(L["Custom Color"], nil, 61, true, nil, function() local dr = P.ElvUI_EltreumUI.skins.ace3.button.disabled.r local dg = P.ElvUI_EltreumUI.skins.ace3.button.disabled.g local db = P.ElvUI_EltreumUI.skins.ace3.button.disabled.b local da = P.ElvUI_EltreumUI.skins.ace3.button.disabled.a return E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.r, E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.g, E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.b, E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.a, dr, dg, db, da end, function(_, r, g, b, a) E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.r, E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.g, E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.b, E.db.ElvUI_EltreumUI.skins.ace3.button.disabled.a = r, g, b, a E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.description3 = ACH:Description(L["Text Selected"], 69, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.TextSelectedcolorClassColors = ACH:Toggle(L["Use Class Colors"], nil, 70, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.classcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.classcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.TextSelectedcolor = ACH:Color(L["Custom Color"], nil, 71, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.r local dg = P.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.g local db = P.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.b return E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.r, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.g, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.b, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.a, dr, dg, db end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.r, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.g, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextSelected.b = r, g, b E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.description4 = ACH:Description(L["Text Enabled"], 79, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.TextEnabledcolorClassColors = ACH:Toggle(L["Use Class Colors"], nil, 80, nil, false, nil, function() return E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.classcolor end, function(_, value) E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.classcolor = value E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.addons.args.elvui.args.ace3.args.TextEnabledcolor = ACH:Color(L["Custom Color"], nil, 81, false, nil, function() local dr = P.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.r local dg = P.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.g local db = P.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.b return E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.r, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.g, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.b, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.a, dr, dg, db end, function(_, r, g, b) E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.r, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.g, E.db.ElvUI_EltreumUI.skins.ace3.tab.TextEnabled.b = r, g, b E:StaticPopup_Show('CONFIG_RL') end, function() return not E.db.ElvUI_EltreumUI.skins.ace3.enable end)
	ElvUI_EltreumUI.Options.args.skins.args.tooltip = ACH:Group(L["Tooltip"], nil, 2, "tab", nil, nil, nil, E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.tooltip.args.description2 = ACH:Description(L["Item Level on Tooltip"], 5, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full", E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.tooltip.args.tooltipilvl = ACH:Toggle(L["Enable"], L["Shows Item Level on Tooltips"], 6, nil, false, "full", function() return E.db.ElvUI_EltreumUI.skins.ilvltooltip end, function(_, value) E.db.ElvUI_EltreumUI.skins.ilvltooltip = value E:StaticPopup_Show('CONFIG_RL') end, nil, E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.databars = ACH:Group(L["DataBars"], nil, 2, "tab", nil, nil, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.databars.args.archeology = ACH:Group(L["Archeology"], nil, 2, "tab", nil, nil, nil, not E.Retail)
	ElvUI_EltreumUI.Options.args.skins.args.databars.args.archeology.args.width = ACH:Range(L["Width"], nil, 2, { min = 10, max = 600, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.archeology.sizex end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.archeology.sizex = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.databars.args.archeology.args.height = ACH:Range(L["Height"], nil, 2, { min = 10, max = 400, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.archeology.sizey end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.archeology.sizey = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.databars.args.archeology.args.description2 = ACH:Description(" ", 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\EltreumHeader', nil, 3240, 1, "full")
	ElvUI_EltreumUI.Options.args.skins.args.databars.args.archeology.args.fontsize = ACH:Range(L["Font Size"], nil, 6, { min = 4, max = 40, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.archeology.archeologyfontsize end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.archeology.archeologyfontsize = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.databars.args.archeology.args.fontx = ACH:Range(L["Text X offset"], nil, 7, { min = -100, max = 100, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.archeology.archeologyfontoffsetx end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.archeology.archeologyfontoffsetx = value E:StaticPopup_Show('CONFIG_RL') end)
	ElvUI_EltreumUI.Options.args.skins.args.databars.args.archeology.args.fonty = ACH:Range(L["Text Y offset"], nil, 7, { min = -100, max = 100, step = 1 }, "full", function() return E.db.ElvUI_EltreumUI.otherstuff.archeology.archeologyfontoffsety end, function(_, value) E.db.ElvUI_EltreumUI.otherstuff.archeology.archeologyfontoffsety = value E:StaticPopup_Show('CONFIG_RL') end)

	--line break so these non options are not with the others
	ElvUI_EltreumUI.Options.args.linebreak = ACH:Group(" ", nil, 86)
	ElvUI_EltreumUI.Options.args.linebreak.disabled = true

	--weakauras anchor
	ElvUI_EltreumUI.Options.args.weakauras = ACH:Group(E:TextGradient(L["WeakAuras"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Learn how to use the WeakAuras anchors to attach WeakAuras and use ElvUI's movers to move them"], 85)
	ElvUI_EltreumUI.Options.args.weakauras.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\weakauras'
	ElvUI_EltreumUI.Options.args.weakauras.args.description1 = ACH:Description(L["WeakAuras"], 2, nil)
	ElvUI_EltreumUI.Options.args.weakauras.args.description2 = ACH:Description(L["You can set your Weakauras to anchor to custom locations making it easier to move them"], 3, nil)
	ElvUI_EltreumUI.Options.args.weakauras.args.description3 = ACH:Description(L["In order to use this feature, simply go to your Weakaura, and go to its Group options, scroll down to Position Settings and set the Anchored To Select Frame, then type either |cff82B4ffEltruismWA|r or |cff82B4ffEltruismConsumablesWA|r to anchor the weakaura to the preset location"], 4, nil)
	ElvUI_EltreumUI.Options.args.weakauras.args.description4 = ACH:Description(L["Setting "].."|cff82B4ffEltruismWA|r"..L[" or "].."|cff82B4ffEltruismConsumablesWA|r"..L[" as the anchor will move them to the locations, keep in mind you might need to change the X and Y offset of the weakaura to zero"], 5, nil)
	ElvUI_EltreumUI.Options.args.weakauras.args.image = ACH:Group(L["How to use the Anchors"], nil, 6)
	ElvUI_EltreumUI.Options.args.weakauras.args.image.inline = true
	ElvUI_EltreumUI.Options.args.weakauras.args.image.args.description1 = ACH:Description(L["Open WeakAuras, go to your group Weakauras and in Group change Position Settings > Anchored To > Select Frame > EltruismWA or EltruismConsumablesWA"], 2, nil)
	ElvUI_EltreumUI.Options.args.weakauras.args.image.args.description2 = ACH:Description(" ", 3, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\WADemo', nil, 512, 512)

	--credits
	ElvUI_EltreumUI.Options.args.credits = ACH:Group(E:TextGradient(L["Credits"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Credits and Licenses"], 98)
	ElvUI_EltreumUI.Options.args.credits.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\credits'
	ElvUI_EltreumUI.Options.args.credits.args.author = ACH:Group(L["Author"], nil, 1)
	ElvUI_EltreumUI.Options.args.credits.args.author.inline = true
	ElvUI_EltreumUI.Options.args.credits.args.author.args.description1 = ACH:Description(AUTHORS_STRING, 2, "medium")
	ElvUI_EltreumUI.Options.args.credits.args.thankyous = ACH:Group(L["Credits and Thank yous"], nil, 3)
	ElvUI_EltreumUI.Options.args.credits.args.thankyous.inline = true
	ElvUI_EltreumUI.Options.args.credits.args.thankyous.args.description1 = ACH:Description(THANKYOU_STRING, 4, "medium")
	ElvUI_EltreumUI.Options.args.credits.args.donators = ACH:Group(L["Donators"], nil, 5)
	ElvUI_EltreumUI.Options.args.credits.args.donators.inline = true
	ElvUI_EltreumUI.Options.args.credits.args.donators.args.description1 = ACH:Description(DONATORS_STRING1, 6,"MEDIUM",nil,nil,nil,nil,"fill")
	ElvUI_EltreumUI.Options.args.credits.args.donators.args.description2 = ACH:Description(DONATORS_STRING2, 7,"MEDIUM",nil,nil,nil,nil,"fill")
	ElvUI_EltreumUI.Options.args.credits.args.translators = ACH:Group(L["Translators"], nil, 17)
	ElvUI_EltreumUI.Options.args.credits.args.translators.inline = true
	ElvUI_EltreumUI.Options.args.credits.args.translators.args.description1 = ACH:Description(TRANSLATORS_STRING, 18, "medium")
	ElvUI_EltreumUI.Options.args.credits.args.licenses = ACH:Group(L["License"], nil, 19)
	ElvUI_EltreumUI.Options.args.credits.args.licenses.inline = true
	ElvUI_EltreumUI.Options.args.credits.args.licenses.args.description1 = ACH:Description(
			E.Retail and [[
Cooldown is a fork of discoteq's Doom Cooldown Pulse which is licensed under MIT License
Cursor Cooldowns is a fork of CooldownToGo by mitchnull which is licensed under Public Domain
Cursor is a fork of CastCursor by michaelsp which licensed under GNU GPLv3
FreeVector (www.freevector.com) for some of the icons. List in license.txt
Icons8 (www.icons8.com) for some of the icons. List in license.txt
Loot Icons are merged from Chat Loot Icons by Stanzilla which is licensed under Public Domain
LootText is a fork of SLoTe from xavjer which is licensed under GNU GPLv3
Quest Items is a merge of QBar by Aezay, which is licensed under GNU GPLv3
Rogue Door Opener is a fork of Rogue Door Opener by Burzolog which licensed under GNU GPLv3
]] or [[
Cooldown is a fork of discoteq's Doom Cooldown Pulse which is licensed under MIT License
Cursor Cooldowns is a fork of CooldownToGo by mitchnull which is licensed under Public Domain
Cursor is a fork of CastCursor by michaelsp which licensed under GNU GPLv3
FreeVector (www.freevector.com) for some of the icons. List in license.txt
Icons8 (www.icons8.com) for some of the icons. List in license.txt
Loot Icons are merged from Chat Loot Icons by Stanzilla which is licensed under Public Domain
LootText is a fork of SLoTe from xavjer which is licensed under GNU GPLv3
Quest Items is a merge of QBar by Aezay, which is licensed under GNU GPLv3
Sockets and Enchants is a fork of Kibs Item Levels by Kibsgaard which is licensed under Public Domain
The Item Level shown on the Character Panel Skin uses code from Simple Item level by Kemayo, licensed under BSD
]], 10, "small", nil, nil, nil, nil, "full")

	--support
	ElvUI_EltreumUI.Options.args.support = ACH:Group(E:TextGradient(GAMEMENU_SUPPORT, 0.50, 0.70, 1, 0.67, 0.95, 1), L["Direct links to GitHub, CurseForge, Wago and Tukui"], 88, 'tab')
	ElvUI_EltreumUI.Options.args.support.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\support'
	ElvUI_EltreumUI.Options.args.support.args.debug = ACH:Execute(L["Debug"], nil, 1, function()
		if next(ElvDB.EltruismDisabledAddOns) then
			ElvUI_EltreumUI:DebugMode("off")
		else
			ElvUI_EltreumUI:DebugMode("on")
		end
	end)
	ElvUI_EltreumUI.Options.args.support.args.issues = ACH:Input(L["Report issues and problems here:"], "", 8, false, "full", function() return 'https://github.com/eltreum0/eltruism/issues' end)
	--[[ElvUI_EltreumUI.Options.args.support.args.tukui = ACH:Input(L["Addon on Tukui:"], "", 9, false, "full", function()
		if E.Retail then
			return 'https://www.tukui.org/addons.php?id=209'
		elseif E.Cata then
			return 'https://www.tukui.org/classic-wotlk-addons.php?id=10'
		elseif E.Classic then
			return 'https://www.tukui.org/classic-addons.php?id=49'
		end
	end)]]
	ElvUI_EltreumUI.Options.args.support.args.site = ACH:Input(ElvUI_EltreumUI.Name, "", 9, false, "full", function() return 'https://eltruism.com/' end)
	ElvUI_EltreumUI.Options.args.support.args.curse = ACH:Input(L["Addon on CurseForge:"], "", 10, false, "full", function() return 'https://www.curseforge.com/wow/addons/elvui-eltruism' end)
	ElvUI_EltreumUI.Options.args.support.args.wago = ACH:Input(L["Addon on Wago:"], "", 10, false, "full", function() return 'https://addons.wago.io/addons/elvui-eltruism' end)
	ElvUI_EltreumUI.Options.args.support.args.discord = ACH:Description(" ", 42, nil, 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Textures\\disc', nil, 256, 128)
	ElvUI_EltreumUI.Options.args.support.args.discord2 = ACH:Description(L["Join the Discord for faster support and to report any issues you might encounter"], 43, nil)
	ElvUI_EltreumUI.Options.args.support.args.discord3 = ACH:Description(L["Join the Discord if you have any questions or issues"], 44, nil)
	ElvUI_EltreumUI.Options.args.support.args.discord4 = ACH:Description(L["Keep in mind the discord is in English"], 45, nil)
	ElvUI_EltreumUI.Options.args.support.args.discordlink = ACH:Input("", "", 46, false, "full", function() return 'https://discord.gg/rBXNxUY6pk' end)

	--faq
	ElvUI_EltreumUI.Options.args.faq = ACH:Group(E:TextGradient("F.A.Q", 0.50, 0.70, 1, 0.67, 0.95, 1), L["Frequently Asked Questions"], 88, 'tab')
	ElvUI_EltreumUI.Options.args.faq.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\faq'
	ElvUI_EltreumUI.Options.args.faq.args.faq = ACH:Group(E:TextGradient(L["Frequently Asked Questions"], 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 20)
	ElvUI_EltreumUI.Options.args.faq.args.faq.inline = true
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q1 = ACH:Group(E:TextGradient(L["How do I disable the chat hide?"], 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 22)
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q1.inline = true
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q1.args.answer = ACH:Description(L["If you are coming from a version before 2.3.0 then check ElvUI > Shadow and Light > Chat > Set Hide to None\nOtherwise, check Eltruism > Chat"])
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q2 = ACH:Group(E:TextGradient(L["After the Chat fades I still see some icons"], 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 22)
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q2.inline = true
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q2.args.answer = ACH:Description(L["This is a Blizzard bug that was found a long time ago"])
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q3 = ACH:Group(E:TextGradient(L["My chat hides when my mouse leaves it"], 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 22)
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q3.inline = true
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q3.args.answer = ACH:Description(L["Disable Mouse over in Eltruism > Chat"])
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q4 = ACH:Group(E:TextGradient(L["My chat hides after a few seconds"], 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 22)
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q4.inline = true
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q4.args.answer = ACH:Description(L["Disable Inactivity/Fader in Eltruism > Chat"])
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q5 = ACH:Group(E:TextGradient(L["My action bars and unitframes keep disappearing!"], 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 22)
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q5.inline = true
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q5.args.answer = ACH:Description(L["ElvUI > ActionBars > Player Bars > on each Bar disable Inherit Global Fade\nElvUI > Unitframes > Type of Unit > Unit > Fader, disable the fader"])
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q6 = ACH:Group(E:TextGradient(L["My Details! window disappears after combat!"], 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 22)
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q6.inline = true
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q6.args.answer = ACH:Description(L["If you have AddOnSkins then go to ElvUI > AddOnSkins > Embed Settings > Turn off Out of Combat (Hide)\nIf details is showing up on top of the trade chat, try going to AddOnSkins > Embed Settings and making sure that its hiding the Trade/Loot chat, you can also right click the > arrow in order to toggle the details embed.\nIf you do not have AddOnSkins then go to Eltruism > Skins > Addons > Details > Embed > Hide out of Combat, you can also change the amount of time it takes for it to hide.\nIn either AddOnSkins or Eltruism embeds you can also Right Click the Chat Toggle (the Arrow [ > ] on the bottom right) to Toggle the Visibility\nA shortcut to disabling the combat hide is /eltruism detailshide"])
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q7 = ACH:Group(E:TextGradient(L["Music keeps playing when AFK"], 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 22)
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q7.inline = true
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q7.args.answer = ACH:Description(L["Disable the AFK music in Eltruism > AFK in order to stop the music from playing"])
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q7 = ACH:Group(E:TextGradient(L["How do I make bar 1 my action paging bar instead of bar 4?"], 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 22)
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q7.inline = true
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q7.args.answer = ACH:Description(L["You can swap them out in Eltruism > Media, or by using the command /eltruism paging, make sure to reload"])
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q8 = ACH:Group(E:TextGradient(L["How can I get Blizzard's floating Mana/Energy/Rage/Other combat text back?"], 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 22)
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q8.inline = true
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q8.args.answer = ACH:Description(L["Go to ElvUI > Eltruism > Misc > Blizzard Combat Text and uncheck Disable Combat Text and Check Enable Resource Gains, then reload"])
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q9 = ACH:Group(E:TextGradient(L["My Loot Rolls are missing!"], 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 22)
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q9.inline = true
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q9.args.answer = ACH:Description(L["You have enabled Hide Alert Frame, disable that setting to restore the Alert Frame/Loot Rolls"])
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q10 = ACH:Group(E:TextGradient(L["Where is my floating combat text?"], 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 22)
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q10.inline = true
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q10.args.answer = ACH:Description(L["It's possible you installed NameplateSCT/FCT and removed it so the floating combat text was not enabled back\nYou can go into Eltruism > CVars > Other CVars > Restore All Combat Text to restore them"])
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q11 = ACH:Group(E:TextGradient(L["My nameplates flash once an enemy is below 20% Health!"], 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 22)
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q11.inline = true
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q11.args.answer = ACH:Description(L["That is due to the EltreumExecute filter, you can disable it in:\nElvUI > Nameplates > Style Filter > (from the dropdown) EltreumExecute > Triggers > Uncheck Enable"])
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q12 = ACH:Group(E:TextGradient(L["My Unitframes and/or ActionBars keep reverting positions!"], 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 22)
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q12.inline = true
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q12.args.answer = ACH:Description(L["If your actionbars or other frames are moving or resetting after a reload,\ncheck ElvUI > Eltruism > Borders for the Auto Adjust option.\n\nThis option is enabled when you enable Borders, it will not enable otherwise.\n\nAuto Adjust moves frames to a set position due to how borders need\ndifferent settings per layout and need to be changed so that borders don't overlap.\nDisable this option to stop the automatic changes.\n\nYou can also use the /eltruism autoadjust command to toggle it off"])
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q13 = ACH:Group(E:TextGradient(L["How do I remove the lines/skin on all the frames?"], 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 22)
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q13.inline = true
	ElvUI_EltreumUI.Options.args.faq.args.faq.args.q13.args.answer = ACH:Description(L["If you want to disable the ElvUI skin that adds textures to ElvUI you can go into\n\nEltruism > Skins > Addons > ElvUI\n\nWhere you can disable it or change its color, transparency and texture.\nYou can also type /eltruism elvuiskin to disable it "])

	--changelog
	ElvUI_EltreumUI.Options.args.changelog = ACH:Group(E:TextGradient(L["Changelog"], 0.50, 0.70, 1, 0.67, 0.95, 1), L["Check what has changed in the current version of Eltruism"], 88, 'tab')
	ElvUI_EltreumUI.Options.args.changelog.icon = 'Interface\\AddOns\\ElvUI_EltreumUI\\Media\\Icons\\changelog'
	ElvUI_EltreumUI.Options.args.changelog.args.changelog = ACH:Input(L["Changelog"], "", 1, false, "full", function() return 'https://github.com/eltreum0/eltruism/blob/main/Changelog.md' end)
	ElvUI_EltreumUI.Options.args.changelog.args.description1 = ACH:Description(E.NewSign..E:TextGradient("v"..ElvUI_EltreumUI.Version, 0.50, 0.70, 1, 0.67, 0.95, 1), 2, "large", nil, nil, nil, nil, "full")
	ElvUI_EltreumUI.Options.args.changelog.args.added = ACH:Group(E:TextGradient("Added", 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 3)
	ElvUI_EltreumUI.Options.args.changelog.args.added.inline = true
	ElvUI_EltreumUI.Options.args.changelog.args.added.args.description = ACH:Description([[
Added a few shadows
]], 3, "small", nil, nil, nil, nil, "full")

	ElvUI_EltreumUI.Options.args.changelog.args.updated = ACH:Group(E:TextGradient("Updated", 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 3)
	ElvUI_EltreumUI.Options.args.changelog.args.updated.inline = true
	ElvUI_EltreumUI.Options.args.changelog.args.updated.args.description = ACH:Description([[
Updated Unitframe Portrait skin to show NPC portraits when using Custom Textures
Updated to support Retail 11.1
Updated ElvUI Skin function
]], 5, "small", nil, nil, nil, nil, "full")

	ElvUI_EltreumUI.Options.args.changelog.args.fixed = ACH:Group(E:TextGradient("Fixed", 0.50, 0.70, 1, 0.67, 0.95, 1), nil, 4)
	ElvUI_EltreumUI.Options.args.changelog.args.fixed.inline = true
	ElvUI_EltreumUI.Options.args.changelog.args.fixed.args.description = ACH:Description([[
Fixed a possible error with the Character Panel Icons
]], 7, "small", nil, nil, nil, nil, "full")

	--[[
	ACH:Group(name, desc, order, childGroups, get, set, disabled, hidden, func)
	ACH:Description(name, order, fontSize, image, imageCoords, imageWidth, imageHeight, width, hidden)

	ACH:Toggle(name, desc, order, tristate, confirm, width, get, set, disabled, hidden)
	ACH:Execute(name, desc, order, func, image, confirm, width, get, set, disabled, hidden)
	ACH:Select(name, desc, order, values, confirm, width, get, set, disabled, hidden)
	ACH:Input(name, desc, order, multiline, width, get, set, disabled, hidden, validate)
	ACH:Color(name, desc, order, alpha, width, get, set, disabled, hidden)
	ACH:Range(name, desc, order, values, width, get, set, disabled, hidden)

	ACH:SharedMediaFont(name, desc, order, width, get, set, disabled, hidden)
	ACH:SharedMediaSound(name, desc, order, width, get, set, disabled, hidden)
	ACH:SharedMediaStatusbar(name, desc, order, width, get, set, disabled, hidden)
	ACH:SharedMediaBackground(name, desc, order, width, get, set, disabled, hidden)
	ACH:SharedMediaBorder(name, desc, order, width, get, set, disabled, hidden)
	]]--

	E.Options.args.ElvUI_EltreumUI = ElvUI_EltreumUI.Options
end
